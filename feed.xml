<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Haskell-jp Blog</title>
    <link href="https://haskell.jp/blog/feed.xml" rel="self" />
    <link href="https://haskell.jp/blog" />
    <id>https://haskell.jp/blog/feed.xml</id>
    <author>
        <name>Haskell-jp</name>
        <email></email>
    </author>
    <updated>2018-03-13T00:00:00Z</updated>
    <entry>
    <title>WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて</title>
    <link href="https://haskell.jp/blog/posts/2018/windows-long-path.html" />
    <id>https://haskell.jp/blog/posts/2018/windows-long-path.html</id>
    <published>2018-03-13T00:00:00Z</published>
    <updated>2018-03-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>去年、<a href="/posts/2017/windows-gotchas.html"><span class="ascii">Windows</span>で<span class="ascii">Haskell</span>を扱う時によく遭遇するエラーと対処法</a>という記事で、<span class="ascii">Windows</span>ユーザーが<span class="ascii">Haskell</span>で開発したとき、あるいは<span class="ascii">Haskell</span>製のプログラムを使用した際によく遭遇するエラーやその回避方法を紹介しました。<br />
今回は、そこに追記したい内容として、最近私がよく出遭うようになったエラーを紹介します。</p>
<h1 id="openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう"><code>openFile: does not exist (No such file or directory)</code>といわれたら短いパスに移そう</h1>
<p><code>does not exist (No such file or directory)</code>というエラーは、本当に読んで字のごとく、開こうとしたファイルが存在しないためのエラーであることとがもちろん多いのですが、エラーメッセージに反して違う原因である場合もあります。</p>
<p>例えば、最近私はとあるプロジェクトを数文字長い名前にリネームしたのですが、たったそれだけで、<code>stack test</code>した際必ず問題のエラーが発生するようになってしまいました。</p>
<pre><code>$ stack test
a-little-longer-name-project-0.1.0.0: build (lib + exe + test)
Preprocessing library for a-little-longer-name-project-0.1.0.0..
Building library for a-little-longer-name-project-0.1.0.0..
Preprocessing executable &#39;mmlh&#39; for a-little-longer-name-project-0.1.0.0..
Building executable &#39;mmlh&#39; for a-little-longer-name-project-0.1.0.0..
Preprocessing test suite &#39;a-little-longer-name-project-test&#39; for a-little-longer-name-project-0.1.0.0..
Building test suite &#39;a-little-longer-name-project-test&#39; for a-little-longer-name-project-0.1.0.0..
[1 of 5] Compiling Paths_aLittleLongerNameProject ( .stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\autogen\Paths_aLittleLongerNameProject.hs, .stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\a-little-longer-name-project-test-tmp\Paths_aLittleLongerNameProject.o )
.stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\a-little-longer-name-project-test-tmp\.stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\autogen\Paths_aLittleLongerNameProject.dump-hi: openFile: does not exist (No such file or directory)</code></pre>
<p>どういうことかと悩んでいたところ、<a href="https://github.com/commercialhaskell/stack/issues/3649">こんな<span class="ascii">Issue</span></a>を見つけました。<br />
<a href="https://github.com/commercialhaskell/stack/issues/3649#issuecomment-351612621"><span class="ascii">Snoyman</span>の指摘</a>のとおり、こちらの問題は<span class="ascii">Windows</span>で使えるパスの長さが原因のエラーのようです。<br />
どういうことかというと、<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%20(v=vs.85)#maxpath"><span class="ascii">MSDN</span>のこちらのページ</a>でも触れているとおり、<span class="ascii">Windows</span>の（<span class="ascii">C</span>言語レベルでの）各種ファイル操作用<span class="ascii">API</span>では、一度に扱えるパスの長さが<span class="ascii">260</span>文字までと決められていて、その制限にかかったためのエラーだというのです！<br />
<code>does not exist (No such file or directory)</code>なんてエラーメッセージで表されるのでわかりづらい！<small>（おそらく<span class="ascii">Windows</span>のエラーコードの出し方に問題があるんじゃないかと思います）</small></p>
<p><span class="ascii">DOS</span>時代から残るこの制限、完全に時代錯誤なものでしかないのですが、<span class="ascii">Windows</span>でパッケージマネージャーなどが自動的に作ったパスを扱っていると、しばしば出くわすことがあります。<br />
<span class="ascii">stack</span>においても、<a href="https://github.com/commercialhaskell/stack/issues/3285">こちらの<span class="ascii">Issue</span></a>で同じ問題が議論されていたり、<a href="https://github.com/commercialhaskell/stack/releases/tag/v1.6.5"><span class="ascii">ver. 1.6.5</span>の<span class="ascii">ChangeLog</span></a>でも言及されていたりと、至る所で格闘している跡があります。</p>
<h2 id="回避方法">回避方法</h2>
<p>そんな<code>does not exist (No such file or directory)</code>ですが、残念ながら私が知る限り、プロジェクトなどのパスを（<code>C:\</code>などのよりルートに近い場所に置いて）より短くする以外の回避方法はありません。<br />
<a href="https://github.com/haskell/haskell-ide-engine#installation-on-windows"><span class="ascii">haskell-ide-engine</span>のインストール方法のページ</a>曰く、（新しめの）<span class="ascii">Windows 10</span>であれば、グループポリシーを編集して、「<span class="ascii">Win32</span>の長いパスを有効にする」を「有効」にすれば回避できるとのことですが、残念ながら手元で試した限りうまくいきませんでした。何かやり方がまずかったのかもしれませんが。<br />
いずれにしても、<code>stack build</code>コマンドなどを実行したときに問題のエラーに遭遇した場合、ビルドしたいもののパスをなんとかして短くする以上の方法はありません。<br />
<code>C:\</code>直下をホームディレクトリのように使う人が今でもたくさんいるわけです。</p>
<p>一方、あなたが問題のエラーが発生するプログラムを<strong>修正する</strong>ことができる立場にある場合、次の方法で回避できるかもしれません。</p>
<h3 id="長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする">長いパスをより短くするために、カレントディレクトリーを変更して、相対パスを短くする。</h3>
<p>本件はあくまでも、<span class="ascii">Windows</span>の各種ファイル操作用<span class="ascii">API</span>の<span class="ascii">1</span>回の呼び出しで渡せる長さの制限ですので、制限を超えてしまうような場合はパスを分割すればよいのです。<br />
<a href="https://hackage.haskell.org/package/filepath-1.4.2/docs/System-FilePath-Posix.html#v:splitFileName"><span class="ascii">filepath</span>パッケージの<code>splitFileName</code>関数</a>や<a href="https://hackage.haskell.org/package/filepath-1.4.2/docs/System-FilePath-Posix.html#v:splitPath"><code>splitPath</code>関数</a>を駆使してパスを分割した上で、対象のファイルの親ディレクトリーまで<a href="https://hackage.haskell.org/package/directory-1.3.2.1/docs/System-Directory.html#v:setCurrentDirectory"><span class="ascii">directory</span>パッケージの<code>setCurrentDirectory</code>関数</a>で移動すれば、制限に引っかからないはずです<small>（時間の都合でこちらについては試すコードを用意しておりません。あしからず）</small>。</p>
<p>残念ながらカレントディレクトリーはプロセス全体で共有される情報ですので、マルチスレッドなプログラムでは頭の痛い問題が出てきてしまいますが、一番確実に回避できる方法のはずです。<br />
マルチスレッドである場合を考慮したくない場合は、次に紹介する方法を検討するとよいでしょう。</p>
<h3 id="win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す"><span class="ascii">Win32 API</span>のユニコード版の関数に、<code>\\?\</code>というプレフィックスを着けた絶対パスを渡す。</h3>
<p>ここまでに出てきた、「<span class="ascii">Windows</span>の各種ファイル操作用<span class="ascii">API</span>」は、すべて「<span class="ascii">Win32 API</span>」と呼ばれる<span class="ascii">Windows</span>固有の<span class="ascii">API</span>群の一部です。<br />
この「<span class="ascii">Win32 API</span>」に含まれる関数の多くは、「ユニコード版」とそうでないものに分かれます<small>（詳細は<a href="https://msdn.microsoft.com/ja-jp/library/windows/desktop/dd317766(v=vs.85).aspx"><span class="ascii">Conventions for Function Prototypes (Windows)</span></a>をご覧ください）</small>。</p>
<p>このうち、「ユニコード版」の<span class="ascii">API</span>には、この制限を緩和する専用の機能が含まれています。<br />
先ほども触れた<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%20(v=vs.85)#maxpath"><span class="ascii">MSDN</span>のページ</a>曰く、なんと<code>\\?\</code>という変な文字列を絶対パスの頭に着けると、最大約<span class="ascii">32,767</span>文字のパスまで受け付けるようになるというのです！<br />
なんともアドホックな感じのする解決方法ですが、<span class="ascii">Microsoft</span>が言うんだから間違いありません。<br />
いずれにしても<span class="ascii">32,767</span>文字という微妙な最大文字数ができてしまいますが、<span class="ascii">UTF-16</span>での<span class="ascii">32,767</span>文字なので、そう簡単に超えることはないでしょう。<br />
いちいち絶対パスに変えて変なプレフィックスを加えないといけないという面倒くささはありますが、いちいち分割して相対パスに変換するよりは簡単なはずですので、検討する価値があります。</p>
<p>この、<code>\\?\</code>機能を試す場合、下記のコードを適当なファイルに貼り付けて保存し、<code>stack runghc file.hs</code>などと実行してみてください <span class="ascii">(Thanks,</span> <span class="citation" data-cites="matsubara0507"><span class="ascii">@matsubara0507</span></span><span class="ascii">!)</span>。<br />
<code>catch</code>関数を使って例外を捕捉している箇所では、実際にパスが長すぎるためにエラーが発生し、<code>catch</code>されているはずです。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">import</span>           <span class="dt">Control.Exception</span> (catch, <span class="dt">IOException</span>)</a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="kw">import</span>           <span class="dt">Data.List</span>        (replicate)</a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="kw">import</span>           <span class="dt">System.Directory</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb2-6" data-line-number="6">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7">  crDir <span class="ot">&lt;-</span> getCurrentDirectory</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">  <span class="kw">let</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">    path1 <span class="fu">=</span> mconcat <span class="fu">$</span> replicate <span class="dv">20</span> <span class="st">&quot;abcdefgh/&quot;</span> <span class="co">-- ok</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">    path2 <span class="fu">=</span> mconcat <span class="fu">$</span> replicate <span class="dv">30</span> <span class="st">&quot;abcdefgh/&quot;</span> <span class="co">-- error</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11">    path3 <span class="fu">=</span> crDir <span class="fu">++</span> <span class="st">&quot;/&quot;</span> <span class="fu">++</span> path2 <span class="co">-- error</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12">    path4 <span class="fu">=</span> <span class="st">&quot;\\\\?\\&quot;</span> <span class="fu">++</span> path3 <span class="co">-- ok</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13"></a>
<a class="sourceLine" id="cb2-14" data-line-number="14">  putStrLn <span class="fu">$</span> <span class="st">&quot;path1: &quot;</span> <span class="fu">++</span> show path1</a>
<a class="sourceLine" id="cb2-15" data-line-number="15">  createDirectoryIfMissing <span class="dt">True</span> path1</a>
<a class="sourceLine" id="cb2-16" data-line-number="16"></a>
<a class="sourceLine" id="cb2-17" data-line-number="17">  putStrLn <span class="fu">$</span> <span class="st">&quot;path2: &quot;</span> <span class="fu">++</span> show path2</a>
<a class="sourceLine" id="cb2-18" data-line-number="18">  createDirectoryIfMissing <span class="dt">True</span> path2 <span class="ot">`catch`</span> (\e <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;  &quot;</span> <span class="fu">++</span> show (<span class="ot">e ::</span> <span class="dt">IOException</span>))</a>
<a class="sourceLine" id="cb2-19" data-line-number="19"></a>
<a class="sourceLine" id="cb2-20" data-line-number="20">  putStrLn <span class="fu">$</span> <span class="st">&quot;path3: &quot;</span> <span class="fu">++</span> show path3</a>
<a class="sourceLine" id="cb2-21" data-line-number="21">  createDirectoryIfMissing <span class="dt">True</span> path3 <span class="ot">`catch`</span> (\e <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;  &quot;</span> <span class="fu">++</span> show (<span class="ot">e ::</span> <span class="dt">IOException</span>))</a>
<a class="sourceLine" id="cb2-22" data-line-number="22"></a>
<a class="sourceLine" id="cb2-23" data-line-number="23">  putStrLn <span class="fu">$</span> <span class="st">&quot;path4: &quot;</span> <span class="fu">++</span> show path4</a>
<a class="sourceLine" id="cb2-24" data-line-number="24">  createDirectoryIfMissing <span class="dt">True</span> path4</a></code></pre></div>
<h1 id="おわりに">おわりに</h1>
<p>さて、またしても<span class="ascii">Windows</span>固有の面倒な問題を紹介することとなってしまいましたが、俗世の喜び（主にゲーム）と簡単にインストールできる<span class="ascii">GUI</span>に慣らされてしまった私は、今後も<span class="ascii">Windows</span>を使い続けるつもりです。<br />
いろいろ困難は尽きませんがこれからも<span class="ascii">Windows</span>で<span class="ascii">Happy Haskell Life</span>を！🏁🏁🏁</p>
<h1 id="参考url">参考<span class="ascii">URL</span></h1>
<p>※本文中で言及していないもののみ</p>
<ul>
<li><a href="http://kkamegawa.hatenablog.jp/entry/2016/07/27/220014">プログラマ的に<span class="ascii">Windows 10 Anniversary Update</span>のうれしいところ <span class="ascii">- kkamegawa</span>’<span class="ascii">s weblog</span></a></li>
<li><a href="https://superuser.com/questions/1119883/windows-10-enable-ntfs-long-paths-policy-option-missing"><span class="ascii">Windows 10</span> “<span class="ascii">Enable NTFS long paths policy</span>” <span class="ascii">option missing - Super User</span></a></li>
</ul>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2018/topic-request.html" style="margin-left: auto;">Haskell-jp Blogで書いてほしいネタを募集します！</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>Haskell-jp Blogで書いてほしいネタを募集します！</title>
    <link href="https://haskell.jp/blog/posts/2018/topic-request.html" />
    <id>https://haskell.jp/blog/posts/2018/topic-request.html</id>
    <published>2018-02-18T00:00:00Z</published>
    <updated>2018-02-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p><span class="ascii">Haskell-jp Blog</span>では、設立当初より<span class="ascii">Haskell</span>に関する記事を幅広く募集してきました。<br />
このたびはそれに加え、この<span class="ascii">Haskell-jp Blog</span>で「書いて欲しい！」「読んでみたい！」<span class="ascii">Haskell</span>に関する話題も募集することにしました！ 例えば、下記のような話題が考えられるでしょう。</p>
<ul>
<li>○○パッケージの解説記事が欲しい</li>
<li>数学用語と<span class="ascii">Haskell</span>用語の対応関係が知りたい</li>
<li><span class="ascii">Real World Haskell</span>を今読むならの注意点</li>
<li>そのほか、<span class="ascii">Haskell</span>に関する話題であれば何でも！</li>
</ul>
<p><strong>ただし、提案していただいたネタに関する知見の持ち主が居ないかもしれませんし、誰かの負担になるものなので必ず記事になるとは限りません。</strong> また、場合によっては既に記事があるため、既存の記事を薦められるかもしれません。</p>
<h2 id="ネタを提案してくれる場合">ネタを提案してくれる場合</h2>
<p><a href="https://github.com/haskell-jp/blog/issues/new?template=topic-request.md&amp;labels=Topic+Request">この<span class="ascii">Blog</span>のリポジトリの<span class="ascii">Issue</span></a>からお願いします。 既に提案されていたら、その<span class="ascii">Issue</span>に対して 👍 するといいと思います。</p>
<h2 id="書いてもいいよって場合">書いてもいいよって場合</h2>
<p><code>TopicRequest</code> というラベルを作ったので、<a href="https://github.com/haskell-jp/blog/issues?q=is:issue+is:Aopen+label:%22Topic+Request%22"><span class="ascii">Issue</span>をそのラベルで検索</a>してください。 書いてもいいという提案があった場合は、<span class="ascii">Issue</span>に「書いてもいいよ」という旨をコメントしていただけるとバッティングが無くて助かります。</p>
<p>それでは、今後は<span class="ascii">Haskell</span>に関するあなたの記事だけでなく、あなたが<span class="ascii">Haskell</span>について読みたい記事も募集していきますので、どしどし応募してください！ 🙏</p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2018/windows-long-path.html">WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2018/ghc-proposal-and-patch.html" style="margin-left: auto;">GHCへの変更提案とパッチ送付の手順例</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>GHCへの変更提案とパッチ送付の手順例</title>
    <link href="https://haskell.jp/blog/posts/2018/ghc-proposal-and-patch.html" />
    <id>https://haskell.jp/blog/posts/2018/ghc-proposal-and-patch.html</id>
    <published>2018-02-11T00:00:00Z</published>
    <updated>2018-02-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<h2 id="はじめに">はじめに</h2>
<p><span class="ascii">Haskell</span>のコンパイラの１つである<span class="ascii">GHC</span>は、オープンソースソフトウェア<span class="ascii">(OSS)</span>のプロジェクトとして今も活発に開発が進められています。 個人の経験や経歴や肩書きや権限などに関わらず、誰でも<span class="ascii">GHC</span>の開発にすぐに参加することができます。</p>
<p>ここでは、<span class="ascii">GHC</span>に新しい変更を提案し実装するための、以下の手順例を紹介します。</p>
<ol type="1">
<li><a href="#ch1">変更提案</a> <span class="ascii">(GitHub</span>の<span class="ascii">ghc-proposals</span> リポジトリ上にて実施<span class="ascii">)</span></li>
<li><a href="#ch2">パッチ送付</a> <span class="ascii">(Phabricator</span>の<span class="ascii">Haskell.org</span> インスタンス上にて実施<span class="ascii">)</span></li>
</ol>
<p><span class="ascii">GHC</span>に改善したい点があれば、誰でも変更提案が可能です。 提案のハードルは案外高いものではありません。<span class="ascii">GHC</span>開発では、新たな<span class="ascii">contribution</span>が歓迎されています。<br />
仮に提案やパッチが<span class="ascii">reject</span>判断されるとしても、<span class="ascii">GHC</span>の開発者と直接やり取りする良い機会が得られます。</p>
<p>以下では、数値リテラルの構文を変更する単純な例をもとに、変更提案やパッチ送付の手順例を紹介します。<span class="ascii">(</span>文章だらけになってしまいましたがご容赦を 😊 <span class="ascii">)</span></p>
<hr />
<h2 id="ch1"><span class="ascii">1.</span> 変更提案<span class="ascii">(proposal)</span></h2>
<h3 id="概要">概要</h3>
<p><span class="ascii">GHC</span>は、コンパイラ本体やライブラリやツールチェーンなど多くの要素で構成されていますが、ここではコンパイラ本体への変更提案の手順について紹介します。</p>
<p><span class="ascii">GHC</span>のコンパイラ本体の開発では、<a href="https://github.com/ghc-proposals/ghc-proposals#what-is-a-proposal">ユーザーに見える<span class="ascii">(user-visible)</span>振る舞い</a>等を変更<span class="ascii">(</span>追加・修正・削除など<span class="ascii">)</span>するための提案<span class="ascii">(proposal)</span>手順が定められています。 事前の調整や権限などを必要とせず、<span class="ascii">GitHub</span>への<span class="ascii">pull request</span>を通じて誰もが提案できます。</p>
<p>なお、変更提案<span class="ascii">(</span>仕様<span class="ascii">)</span>のプロセスと、修正パッチ送付<span class="ascii">(</span>実装<span class="ascii">)</span>のプロセスは、分離されています。必ずしも、変更提案者が実装まで行う必要はありません。</p>
<h3 id="変更提案の正確な手続き">変更提案の正確な手続き</h3>
<p>提案の具体的な手続きについては、以下に記載されています。よく読んでおきましょう。</p>
<ul>
<li><a href="https://github.com/ghc-proposals/ghc-proposals#ghc-proposals"><span class="ascii">https://github.com/ghc-proposals/ghc-proposals#ghc-proposals</span></a></li>
</ul>
<p>変更提案は、提案書を書いて以下の場所<span class="ascii">(</span>リポジトリ<span class="ascii">)</span>に、<span class="ascii">pull request</span>を送ることで行えます。</p>
<ul>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/pulls"><span class="ascii">https://github.com/ghc-proposals/ghc-proposals/pulls</span></a></li>
</ul>
<h3 id="変更提案のおおまかな流れ">変更提案のおおまかな流れ</h3>
<p><a href="https://github.com/ghc-proposals/ghc-proposals#what-is-the-timeline-of-a-proposal">提案の流れ</a>は、ざくっと以下の通りです。</p>
<ul>
<li>提案の作成
<ul>
<li><span class="ascii">GitHub</span>上で、<a href="https://github.com/ghc-proposals/ghc-proposals"><span class="ascii">ghc-proposals</span></a>のリポジトリを<span class="ascii">fork</span>する <a href="https://github.com/takenobu-hs/ghc-proposals"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">fork</span>してきた自分のリポジトリで作業用のブランチを作る <a href="https://github.com/takenobu-hs/ghc-proposals/tree/numeric-underscores"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">proposals</span>ディレクトリの下に、“<span class="ascii">0000-</span>プロポーザル名<span class="ascii">.rst</span>”のファイル名で<a href="https://github.com/ghc-proposals/ghc-proposals#how-to-start-a-new-proposal">提案用のファイルを作る</a> <a href="https://github.com/takenobu-hs/ghc-proposals/blob/numeric-underscores/proposals/0000-numeric-underscores.rst"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>“<span class="ascii">Motivation</span>”などの<a href="https://github.com/ghc-proposals/ghc-proposals#what-should-a-proposal-look-like">必要な項目</a>を、<a href="http://docs.sphinx-users.jp/rest.html"><span class="ascii">reStructuredText</span></a>の書式に従い記述する <a href="https://github.com/takenobu-hs/ghc-proposals/blob/numeric-underscores/proposals/0000-numeric-underscores.rst"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
</ul></li>
<li>提案の送付
<ul>
<li><span class="ascii">GitHub</span>上で、<span class="ascii">ghc-proposals</span>のリポジトリに、<span class="ascii">pull request</span>を送る <a href="https://github.com/ghc-proposals/ghc-proposals/pull/76"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>確定した<span class="ascii">pull request</span>の<span class="ascii">URL</span>を、提案用のファイルの“<span class="ascii">This proposal is discussed at this pull request.</span>”の箇所に記載してから、再度<span class="ascii">commit</span>し直す <a href="https://github.com/takenobu-hs/ghc-proposals/commit/61149ee277aadc6bd46e0ad35aeb529f02da1182#diff-1128b179eb6630a402469b59a8a7dce6"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">pull request</span>の <span class="ascii">Conversation</span>のところに、“<span class="ascii">Rendered</span>”という文字で提案ファイルへのリンクを貼っておく <a href="https://github.com/ghc-proposals/ghc-proposals/pull/76#issue-261822915"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
</ul></li>
<li>提案についての議論
<ul>
<li><span class="ascii">pull request</span>上で、<a href="https://github.com/ghc-proposals/ghc-proposals#discussion-goals">議論する</a> <a href="https://github.com/ghc-proposals/ghc-proposals/pull/76"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>フィードバックがあれば、提案ファイルを修正する</li>
<li>議論期間を充分に<span class="ascii">(</span>一ヶ月くらいは<span class="ascii">)</span>設ける</li>
</ul></li>
<li>提案の判断
<ul>
<li>議論が収束したら、<a href="https://github.com/ghc-proposals/ghc-proposals#who-is-the-committee"><span class="ascii">GHC Steering Committee</span></a> へ、<a href="https://github.com/ghc-proposals/ghc-proposals#how-to-bring-a-proposal-before-the-committee">判断依頼</a>をかける <a href="https://github.com/ghc-proposals/ghc-proposals/pull/76#issuecomment-339952996"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">GHC Steering Committee</span>が<span class="ascii">Accepted/Rejected</span>を判断する <a href="https://github.com/ghc-proposals/ghc-proposals/pull/76#event-1341434473"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">Accepted</span>なら、<span class="ascii">Trac</span>で<a href="https://ghc.haskell.org/trac/ghc/newticket?type=task"><span class="ascii">ticket</span>を登録</a>する <a href="https://ghc.haskell.org/trac/ghc/ticket/14473"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>次は、コード修正パッチの作成・送付フェーズへ</li>
</ul></li>
</ul>
<h3 id="変更提案の例">変更提案の例</h3>
<p>数値リテラルの構文を変更する場合の、具体的な変更提案の例を紹介します。</p>
<ul>
<li><a href="https://github.com/takenobu-hs/ghc-proposals/blob/0a694636560ca37d9b76e56bddc43c6bf1c9348a/proposals/0000-numeric-underscores.rst">変更提案の初版</a> <span class="ascii">|</span> <a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0009-numeric-underscores.rst">最終的な変更提案</a></li>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/pull/76">議論フェーズの例</a></li>
</ul>
<p>その他の提案の例は以下にたくさんあります。</p>
<ul>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/pulls?q=is%3Aopen+is%3Apr"><span class="ascii">Open</span>中の提案</a></li>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/pulls?q=is%3Apr+is%3Aclosed"><span class="ascii">Close</span>済みの提案</a></li>
</ul>
<h3 id="いくつかのポイントなど">いくつかのポイントなど</h3>
<ul>
<li>他の良い提案が参考になります <span class="ascii">(</span>同じ種類の提案や議論がうまく進んでいる提案などから、色々な観点を学べます。<span class="ascii">)</span></li>
<li>数カ月単位で気長に根気よくやる<span class="ascii">(</span>開発者は全員がボランティアで忙しい。<span class="ascii">)</span></li>
<li>提案してよいか迷う場合は、事前に<a href="https://mail.haskell.org/cgi-bin/mailman/listinfo/ghc-devs"><span class="ascii">ghc-devs</span>の<span class="ascii">ML(</span>メーリングリスト<span class="ascii">)</span></a>などで相談してもよい</li>
<li>英語の精度を必要以上に気にする必要はない。日本語でしっかり考える。あとは短い文に区切って、<span class="ascii">Google</span>翻訳にでも。</li>
</ul>
<p>提案プロセスは<span class="ascii">GitHub</span>上で行うものです。操作ミスがあったところでやり直しは何度でも行えます。失敗やミスを不必要に怖れる必要はありません。<br />
また、多くの提案は<span class="ascii">Accepted</span>に至らないこともあるので、結果を恥ずかしがる必要もありません。提案の結果に関わらず、提案とその議論自体が、他の開発者に新たな観点や気づき・刺激を提供できます。</p>
<p>それでは、提案プロセスをお楽しみ！</p>
<hr />
<h2 id="ch2"><span class="ascii">2.</span> パッチ送付<span class="ascii">(patch)</span></h2>
<h3 id="概要-1">概要</h3>
<p><span class="ascii">GHC</span>への変更提案に対するコード修正は、パッチを作成して送付することにより行われます。 ここでは、コード開発ツールである<span class="ascii">Phabricator</span>の<span class="ascii">differential</span>機能を用いる、標準的なパッチ送付の手順について紹介します。</p>
<p>なお、修正パッチは<span class="ascii">GitHub</span>の<span class="ascii">pull request</span>を通じても送付できますが、後のコードレビューのフェーズを考慮すると、<span class="ascii">Phabricator</span>を用いるこの手順が効率的です。</p>
<h3 id="パッチ送付の正確な手続き">パッチ送付の正確な手続き</h3>
<p>パッチ作成から送付についての具体的な手続きについては以下に記載されています。</p>
<ul>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/WorkingConventions/FixingBugs"><span class="ascii">How to contribute a patch to GHC</span></a></li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Phabricator"><span class="ascii">Using Phabricator for GHC development</span></a></li>
</ul>
<p>また、<span class="ascii">Phabricator</span>の詳細な操作手順については、以下に解説記事があります。</p>
<ul>
<li><a href="https://medium.com/@zw3rk/contributing-to-ghc-290653b63147"><span class="ascii">Contributing to GHC via Phabricator</span></a></li>
</ul>
<h3 id="パッチ送付のおおまかな流れ">パッチ送付のおおまかな流れ</h3>
<p>パッチ送付の流れは、ざくっと以下の通りです。</p>
<ul>
<li>パッチの作成
<ul>
<li><span class="ascii">GHC</span>の<span class="ascii">build/validate</span>用環境を<a href="https://ghc.haskell.org/trac/ghc/wiki/Building/Preparation">整えておく</a></li>
<li><span class="ascii">GHC</span>のリポジトリを<a href="https://ghc.haskell.org/trac/ghc/wiki/Building/GettingTheSources#CloningHEAD"><span class="ascii">clone</span>する</a></li>
<li>事前に<span class="ascii">master</span>ブランチ上で、<a href="https://ghc.haskell.org/trac/ghc/wiki/Building/QuickStart"><span class="ascii">build</span>できることを確認しておく</a> <span class="ascii">(master</span>自体が<span class="ascii">fail</span>していることがあるため。<span class="ascii">)</span></li>
<li>事前に<span class="ascii">master</span>ブランチ上で、<a href="https://ghc.haskell.org/trac/ghc/wiki/TestingPatches#Locally"><span class="ascii">validate</span>が正常終了することを確認しておく</a> <span class="ascii">(master</span>自体が<span class="ascii">fail</span>していることがあるため。<span class="ascii">)</span></li>
<li>作業用のブランチを作り、コードを修正する
<ul>
<li>修正が１つの<span class="ascii">commit</span>にまとまっていると、後の<span class="ascii">arc</span>コマンドでのパッチ送付がラクです。“<span class="ascii">git merge</span> –<span class="ascii">squash</span>”でまとめられます。</li>
</ul></li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Building/RunningTests/Adding">テストケースを追加する</a> <a href="https://phabricator.haskell.org/D4235#change-AHneoV84zpis"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>必要に応じて<a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/UserManual">ユーザーガイド</a>に変更機能についての説明を追加する <a href="https://phabricator.haskell.org/D4235#change-0p_6dVtsoCP3"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>修正コードにて<span class="ascii">build</span>できることを確認しておく<span class="ascii">(</span>必ず行う<span class="ascii">)</span></li>
<li>修正コードにて<span class="ascii">validate</span>が正常終了することを確認しておく<span class="ascii">(</span>必ず行う<span class="ascii">)</span></li>
</ul></li>
<li>パッチの送付
<ul>
<li><span class="ascii">Phabricator</span>用のコマンドラインツール<a href="https://ghc.haskell.org/trac/ghc/wiki/Phabricator#TheCLI:Arcanist"><span class="ascii">Arcanist</span>をインストールする</a> <span class="ascii">(</span><a href="https://secure.phabricator.com/book/phabricator/article/arcanist/"><span class="ascii">arcanist</span>ツールの説明</a><span class="ascii">)</span></li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Phabricator#Startingoff:Fixingabugsubmittingareview"><span class="ascii">Phabricator</span>にパッチを送付する</a> <a href="https://phabricator.haskell.org/D4235"><span class="ascii">(</span>例<span class="ascii">)</span></a>
<ul>
<li>具体的なコマンドは“<span class="ascii">arc diff HEAD~</span>”。 最後の<span class="ascii">commit</span>が送信される。</li>
</ul></li>
<li><span class="ascii">Trac</span>の<span class="ascii">ticket</span>の、“<span class="ascii">Differential Rev</span>”の箇所に<span class="ascii">Phab</span>の管理番号を書いておく <a href="https://ghc.haskell.org/trac/ghc/ticket/14473"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">Phabricator</span>上で、コードレビューしてもらう（待つ、議論する）</li>
<li>必要に応じてコードを修正する
<ul>
<li>コード修正後に、修正パッチを送り直すコマンドは“<span class="ascii">arc diff</span>”。</li>
<li>レビュー待ちの間に、<span class="ascii">master</span>と<span class="ascii">conflict</span>を起こした場合は、パッチを送り直すと親切。</li>
<li>レビュー待ちの間に、<span class="ascii">master</span>との差分が大きくなった場合は、“<span class="ascii">git rebase</span>”してから送り直すのも親切。<span class="ascii">rebase</span>については<a href="https://ghc.haskell.org/trac/ghc/wiki/Phabricator#Workingwithmultipledependentdiffs">ここを参照</a></li>
</ul></li>
<li>レビューが完了して<span class="ascii">master</span>ブランチに取り込まれたら、<span class="ascii">proposals</span>の“<span class="ascii">implemented</span>”のフィールドに、実装済みの<span class="ascii">GHC</span>のバージョン番号を記載しておく <a href="https://github.com/ghc-proposals/ghc-proposals/commit/1974c2a45a782461084ea596ec839638d4ff0743#diff-ffb9f607b8f1e69494a276ae9afa8268"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
</ul></li>
</ul>
<h3 id="パッチ送付の例">パッチ送付の例</h3>
<p>数値リテラルの構文を変更する場合の、具体的なパッチ送付の例を紹介します。</p>
<ul>
<li><a href="https://phabricator.haskell.org/D4235"><span class="ascii">https://phabricator.haskell.org/D4235</span></a></li>
</ul>
<p>その他のレビュー中パッチの例は以下にたくさんあります。</p>
<ul>
<li><a href="https://phabricator.haskell.org/differential/"><span class="ascii">https://phabricator.haskell.org/differential/</span></a></li>
</ul>
<h3 id="いくつかのポイントなど-1">いくつかのポイントなど</h3>
<ul>
<li>他の良いパッチが参考になります<span class="ascii">(</span>同じ種類の修正を探すと、修正方法や慣習や修正漏れなどを確認できます。<span class="ascii">)</span></li>
<li><span class="ascii">build</span>確認と<span class="ascii">validation</span>確認は絶対に行う<span class="ascii">(</span>つたないコードは問題視されませんが、本来行うべき手順を行わないことは、開発全体にダメージを与えるとともに、個人の信用度に影響します。<span class="ascii">)</span></li>
<li>数カ月単位で気長に根気よくやる<span class="ascii">(</span>パッチ作業は多数並走しており、<span class="ascii">GHC</span>のリリース時期は特に多忙です。全員がボランティアで行っている自発的な活動ですので、忘れられている状況への<span class="ascii">ping</span>は構いませんが、強い催促は控えるのが賢明です。<span class="ascii">)</span></li>
<li>わからない点は、<span class="ascii">ghc-devs ML</span>や<span class="ascii">Phabricator</span>上で相談するとよいでしょう。</li>
<li><span class="ascii">Phabricator(arc</span>コマンド<span class="ascii">)</span>には慣れが必要かと思います。最初は影響範囲の少ない、ドキュメント修正などで<span class="ascii">Phabricator</span>の作業手順に慣れていくのも良いです。</li>
</ul>
<p>パッチ送付は、<span class="ascii">Phabricator</span>や<span class="ascii">git</span>の機能を用いて行うものです。操作ミスがあったところで、<span class="ascii">GHC</span>のリポジトリ本体に直ちに反映されるわけではありません。やり直しは何度でも行えます。失敗やミスを不必要に怖れる必要はありません。<span class="ascii">community</span>のためになる<span class="ascii">contribution</span>は常に歓迎されています。</p>
<p>それでは、パッチ送付プロセスをお楽しみ！</p>
<hr />
<h2 id="補足">補足</h2>
<p>わからないことがあれば、<a href="https://mail.haskell.org/cgi-bin/mailman/listinfo/ghc-devs"><span class="ascii">ghc-devs</span>の<span class="ascii">ML</span></a>に問い合わせると親切に教えてもらえます。 もちろん、<a href="https://join-haskell-jp-slack.herokuapp.com/"><span class="ascii">Haskell-jp</span>の<span class="ascii">slack</span></a>の<span class="ascii">#questions</span>チャネルなどで尋ねるのも良いでしょう。</p>
<p>なお、<span class="ascii">GHC</span>での開発作業については、<a href="https://ghc.haskell.org/trac/ghc/wiki/WorkingConventions"><span class="ascii">Working on GHC</span></a>も参考にどうぞ。<br />
また、<span class="ascii">GHC</span>の開発フロー全体については、<a href="https://takenobu-hs.github.io/downloads/ghc_development_flow.pdf">こちら</a>も参考にどうぞ。<span class="ascii">GHC</span>関連のサイトの情報を力づくで検索するには、<a href="https://takenobu-hs.github.io/haskell-wiki-search/">こちら</a>もどうぞ。</p>
<p><span class="ascii">Happy Hacking!</span></p>
<p>以上です。</p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2018/topic-request.html">Haskell-jp Blogで書いてほしいネタを募集します！</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2018/unordered-containers-hash-dos.html" style="margin-left: auto;">hashdos脆弱性とunordered-containers</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>hashdos脆弱性とunordered-containers</title>
    <link href="https://haskell.jp/blog/posts/2018/unordered-containers-hash-dos.html" />
    <id>https://haskell.jp/blog/posts/2018/unordered-containers-hash-dos.html</id>
    <published>2018-01-21T00:00:00Z</published>
    <updated>2018-01-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>あらゆるソフトウェアに脆弱性は存在し得ます。<br />
<span class="ascii">Haskell</span>は高度な型システムを駆使することで、脆弱性を根本的に回避したプログラムを作ることを可能にします<small>（脆弱性を防ぐためだけのものではないですが、興味のある人は<a href="http://www.kotha.net/ghcguide_ja/7.6.2/safe-haskell.html"><span class="ascii">Safe Haskell</span></a>についても調べてみるといいでしょう）</small>。<br />
しかし、だからといって、型を設計する段階で脆弱性を回避できるよう気をつけなければいけないことには変わりませんし、<span class="ascii">GHC</span>が生成した実行ファイル、使用するライブラリーに絶対に脆弱性がないとは言えません。<br />
現状、<span class="ascii">Haskell</span>はほかの著名なプログラミング言語ほど使用されていないためか、あまり脆弱性が報告されることはありません<small>（<span class="ascii">libc</span>など、ほかの言語の処理系も依存しているようなライブラリーの脆弱性は別として）</small>。<br />
今回は、そんな中でも<a href="https://hackage.haskell.org/package/unordered-containers"><span class="ascii">unordered-containers</span>というパッケージ</a>について、<a href="https://github.com/tibbe/unordered-containers/blob/60ced060304840ed0bf368249ed6eb4e43d4cefc/docs/developer-guide.md#security">ドキュメントにも書かれている</a>ため<strong>おそらく直ることがないであろう脆弱性</strong>と、その回避方法について紹介します。<br />
<span class="ascii">hashdos</span>脆弱性自体は結構有名ですし、ドキュメントに書いてあることなので、ご存知の方には何を今更感があるかと思いますが、検索した限りこの問題について日本語で説明した記事は見当たらなかったので、ここで紹介します。</p>
<h1 id="そもそもunordered-containersって">そもそも<span class="ascii">unordered-containers</span>って？</h1>
<p>脆弱性の前に<span class="ascii">unordered-containers</span>パッケージについて簡単に紹介しましょう。<br />
<a href="https://hackage.haskell.org/package/unordered-containers"><span class="ascii">unordered-containers</span>パッケージ</a>は、<span class="ascii">GHC</span>に標準で付いている<a href="https://hackage.haskell.org/package/containers"><span class="ascii">containers</span>パッケージ</a>よりも高速な連想配列（<a href="https://hackage.haskell.org/package/unordered-containers-0.2.8.0/docs/Data-HashMap-Lazy.html"><code>HashMap</code>型</a>）や集合（<a href="https://hackage.haskell.org/package/unordered-containers-0.2.8.0/docs/Data-HashSet.html"><code>HashSet</code>型</a>）を提供してくれます。<br />
<a href="https://www.stackage.org/lts-10.3/package/unordered-containers-0.2.8.0"><span class="ascii">Stackage</span>の<span class="ascii">LTS Haskell 10.3</span>ではなんと<span class="ascii">970</span>ものパッケージに依存されている</a>、超大人気汎用パッケージです。</p>
<h2 id="どうやって高速化しているの">どうやって高速化しているの？</h2>
<p><code>HashMap</code>という名前が示しているとおり、キーとなる値のハッシュ値を計算・利用することで高速化しています。<br />
しかし、<span class="ascii">Java</span>言語などほかの言語によくある<code>HashMap</code>とは大きく異なり、内部ではハッシュテーブルを使用していません。<br />
<a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20091104/340002/?rt=nocnt">本物のプログラマは<span class="ascii">Haskell</span>を使う <span class="ascii">-</span> 第<span class="ascii">35</span>回　キーを使って値を参照する<span class="ascii">Map</span>型：<span class="ascii">ITpro</span></a>でも説明しているとおり、ハッシュテーブルはミュータブルな配列を内部で使用していることから、イミュータブルなデータ構造を使用して行う関数型プログラミングとは、相性が悪いのです<small>（<code>ST</code>モナドや<code>IO</code>モナドを利用した<a href="https://hackage.haskell.org/package/hashtables"><span class="ascii">hashtables</span>パッケージ</a>などを使えば、限られた範囲内でハッシュテーブルを使うこともできます）</small>。</p>
<p>ハッシュテーブルを使用しない代わりに、<span class="ascii">unordered-containers</span>では内部で<a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie"><span class="ascii">Hash array mapped trie</span></a>という特殊な木を使っています。<br />
どのような構造かは、<a href="http://keens.github.io/slide/HAMT/"><span class="ascii">HAMT ~</span> イミュータブルで高速なハッシュマップ <span class="ascii">~ |</span> κ<span class="ascii">een</span>の<span class="ascii">Happy Hac</span>κ<span class="ascii">ing Blog</span></a>に詳しく書かれています。<br />
こちらのスライドは<span class="ascii">Scala</span>での実装の話ですが、基本的には<span class="ascii">unordered-containers</span>パッケージの<code>HashMap</code>も同じはずです。</p>
<p>大雑把に言うと、<span class="ascii">Hash array mapped trie</span>を使った<code>HashMap</code>では、ハッシュテーブルと同様に、キーとなる値を<strong>ハッシュ関数で一旦固定長の整数に変換する</strong>ことで、キーが存在しているかどうかの確認を高速化しています。そのため、<span class="ascii">containers</span>パッケージよりも高速な処理ができるのです。<br />
<span class="ascii">containers</span>パッケージの<code>Map</code>ではキーの存在を確認する際、キー全体を既存のキーと比較する必要があるため、特に長い文字列をキーとする場合は、処理が遅くなりがちだったのです。</p>
<h1 id="hashdos脆弱性とは"><span class="ascii">hashdos</span>脆弱性とは？</h1>
<p><span class="ascii">hashdos</span>脆弱性は<a href="https://blog.tokumaru.org/2011/12/webdoshashdos.html"><span class="ascii">2011</span>年頃<span class="ascii">Ruby</span>や<span class="ascii">PHP</span>、<span class="ascii">Perl</span>など多くのプログラミング言語が影響を受けるとされた</a>、著名な脆弱性です。<br />
ここでも簡単に仕組みを説明しましょう。</p>
<p>前節で説明したとおり、<span class="ascii">Hash array mapped trie</span>もハッシュテーブルも、必ずキーを一旦固定長の整数に変換します。<br />
文字列など、ハッシュ関数を適用されるキーとなる値は、当然固定長の整数よりも幅広い値を取り得るので、違う文字列同士でも、同じハッシュ値をとることがあります。<br />
この、違う値であるはずのキーが同じハッシュ値をとってしまった状態を「ハッシュ値の衝突」と呼びます。<br />
ハッシュ値の衝突が発生した場合、ハッシュテーブルや<span class="ascii">Hash array mapped trie</span>といったハッシュ値を利用した連想配列は、（単純な）配列やリストなど、やむを得ず逐次探索が必要なデータ構造を内部で使用しなければならなくなります。</p>
<p><span class="ascii">hashdos</span>脆弱性はこの性質を利用した<span class="ascii">DoS</span>攻撃です。<br />
攻撃者は、あらかじめ対象のプログラムで使っているハッシュ関数が、「必ず同じハッシュ値」を返すキー<span class="ascii">(</span>大抵文字列でしょう）を大量に用意して、それを対象のプログラムに入力として与えることで、簡単に<span class="ascii">DoS</span>攻撃を仕掛けることができるのです。<br />
<a href="https://blog.tokumaru.org/2011/12/webdoshashdos.html">先ほど触れた徳丸先生の記事</a>では、<span class="ascii">PHP</span>のアプリケーションに対してわずか<span class="ascii">500KB</span>の<span class="ascii">form-data</span>を送るだけで<span class="ascii">CPU</span>時間を<span class="ascii">1</span>分も消費させることができたそうですから、その威力はすさまじいものと言えるでしょう。</p>
<h1 id="なぜ直さないのか">なぜ直さないのか？</h1>
<p><a href="https://github.com/tibbe/unordered-containers/blob/60ced060304840ed0bf368249ed6eb4e43d4cefc/docs/developer-guide.md#security"><span class="ascii">unordered-containers</span>の<span class="ascii">Developer Guide</span></a>には、次のように書かれています。</p>
<blockquote>
<p><span class="ascii">There</span>’<span class="ascii">s an uncomfortable trade-off with regards to security threats posed by e.g. denial of service attacks. Always using more secure hash function, like SipHash, would provide security by default. However, those functions would make the performance of the data structures no better than that of ordered containers, which defeats the purpose of this package.</span></p>
</blockquote>
<p>要するに、「セキュリティー上問題はあるけど、<span class="ascii">SipHash</span>のような安全なハッシュ関数を使ったら<span class="ascii">containers</span>パッケージよりも速度が出なかった。それではこのパッケージの意味がない」ということです。<br />
<span class="ascii">containers</span>パッケージよりも高速な連想配列を作るために<span class="ascii">unordered-containers</span>パッケージを作ったのだから、それより遅くなっては存在価値がなくなってしまうのです。<br />
従って、ユーザーが任意にキーを入力できるようなプログラムでは、<span class="ascii">unordered-containers</span>ではなく、<span class="ascii">containers</span>を使え、ということです。<br />
このことは<span class="ascii">unordered-containers</span>が使用している<a href="https://hackage.haskell.org/package/hashable-1.2.6.1/docs/Data-Hashable.html#g:1"><span class="ascii">hashable</span>のドキュメント</a>にも書かれています。ある意味ノーガード戦法ですね。</p>
<h1 id="回避方法">回避方法</h1>
<p>前節で触れたとおりですが、<strong>ユーザーが任意にキーを入力できるようなプログラム</strong>では、<span class="ascii">unordered-containers</span>パッケージの<code>HashMap</code>や<code>HashSet</code>ではなく、<span class="ascii">containers</span>パッケージの<code>Map</code>や<code>Set</code>を使いましょう。<br />
<span class="ascii">containers</span>パッケージにある<code>Map</code>や<code>Set</code>はハッシュ関数を一切使っていないので、ハッシュ値の衝突も起こらず、内部で逐次探索が必要なデータ構造を使ってもいません。<br />
なので<span class="ascii">hashdos</span>攻撃に遭うことはないのです。</p>
<p>ただし、実際のところ、<a href="https://www.stackage.org/lts-10.3/package/unordered-containers-0.2.8.0"><span class="ascii">Stackage</span>の<span class="ascii">LTS Haskell 10.3</span>で<span class="ascii">970</span>ものパッケージに依存されている</a><span class="ascii">unordered-containers</span>です。<br />
その中には<span class="ascii">JSON</span>のパーサーである<span class="ascii">aeson</span>も含まれているので、もしかしたら現状回避するのは非常に困難なのかもしれません。😱<br />
次回は、この問題について試しに攻撃用のコードを書いて速度の低下をチェックして報告する話を書くかもしれません…。😰</p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2018/ghc-proposal-and-patch.html">GHCへの変更提案とパッチ送付の手順例</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/advent-calendar-2017.html" style="margin-left: auto;">Haskell Advent Calendar 2017 まとめ</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>Haskell Advent Calendar 2017 まとめ</title>
    <link href="https://haskell.jp/blog/posts/2017/advent-calendar-2017.html" />
    <id>https://haskell.jp/blog/posts/2017/advent-calendar-2017.html</id>
    <published>2017-12-31T00:00:00Z</published>
    <updated>2017-12-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>これは <a href="https://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell Advent Calendar</span> その<span class="ascii">4</span></a> の<span class="ascii">12</span>日目の記事です。</p>
<p>なんで<span class="ascii">12</span>日目の記事で「まとめ」をやっているのかって？ <span class="ascii">25</span>日を過ぎてから余ってた日付に登録しただけですよ。</p>
<p><a href="https://qiita.com/advent-calendar/2017/calendars"><span class="ascii">Qiita</span></a>と<a href="https://adventar.org/calendars?year=2017"><span class="ascii">ADVENTAR</span></a>のアドベントカレンダーで投稿された、<span class="ascii">Haskell</span>に関する記事を集めてみました。 いちおう機械的に集めたので、それなりに拾えてると思いますが、もし「この記事が無いよ」とか、逆に「<span class="ascii">Haskell</span>ちゃうやんこの記事」ってのがあったら、<a href="https://github.com/haskell-jp/blog/edit/master/preprocessed-site/posts/2017/advent-calendar-2017.md">ここから編集して</a><span class="ascii">PR</span>でも送ってください。</p>
<p>ちなみに「<a href="https://scrapbox.io/miyamoen/Elm_Advent_Calendar_2017_%E3%81%BE%E3%81%A8%E3%82%81"><span class="ascii">Elm Advent Calendar 2017</span> まとめ</a>」という記事が面白かったので、その<span class="ascii">Haskell</span>版オマージュ<span class="ascii">(</span>パクリ<span class="ascii">)</span>です。</p>
<h2 id="haskell-advent-calendar"><span class="ascii">Haskell Advent Calendar</span></h2>
<p><span class="ascii">Qiita</span>の方では<span class="ascii">4</span>つもできましたね。</p>
<ul>
<li><a href="https://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a></li>
<li><a href="https://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a></li>
<li><a href="https://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a></li>
<li><a href="https://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a></li>
</ul>
<p>まぁしかし、残念ながらどのカレンダーも埋まってないため<a href="https://qiita.com/advent-calendar/2017/ranking/subscriptions">ランキング</a>圏外となってしまいましたが<span class="ascii">(</span>笑<span class="ascii">)</span></p>
<p>加えて何故か、<span class="ascii">25</span>日が過ぎてからその<span class="ascii">5</span>のカレンダーができるという、なかなか面白い事案が発生しました。</p>
<ul>
<li><a href="https://qiita.com/advent-calendar/2017/haskell5"><span class="ascii">Haskell (</span>その<span class="ascii">5) Advent Calendar 2017 - Qiita</span></a></li>
</ul>
<p>上記のカレンダーの記事以外も含めて、全部で<span class="ascii">104</span>記事もありました。 みんなすごいですね。</p>
<h2 id="記事を集めた">記事を集めた</h2>
<p>超雑にスクレイパーを書いて<span class="ascii">Qiita</span>と<span class="ascii">ADVENTAR</span>のカレンダーをスクレイピングしてきました。 プログラムは以下のリポジトリにあります<span class="ascii">(</span>もちろん<span class="ascii">Haskell</span>で作ったよ<span class="ascii">)</span>。</p>
<ul>
<li><a href="https://github.com/matsubara0507/haskell-advent-calendar"><span class="ascii">matsubara0507/advent-calendar - GitHub</span></a></li>
</ul>
<p>カレンダーのタイトルか、記事のタイトルに「<span class="ascii">Haskell</span>」って単語が入っているやつだけ集めてます。 このプログラムの解説っぽい記事はそのうち自分のとこの記事として挙げる気がする<span class="ascii">(</span>たぶん<span class="ascii">)</span>。</p>
<h2 id="記事たち">記事たち</h2>
<p>分類は温もりのある手作業でやってます。 自然言語処理系が出来れば機械的に分類できたかもしれませんが…</p>
<p>分類違くね？というモノがあれば、<a href="https://github.com/haskell-jp/blog/edit/master/preprocessed-site/posts/2017/advent-calendar-2017.md">ここから編集して</a><span class="ascii">PR</span>でも送ってください。</p>
<p>それでは良いお年を。</p>
<h3 id="ポエム">ポエム</h3>
<p><strong><a href="http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B">なぜ <span class="ascii">Haskell</span> が好きなのか <span class="ascii">-</span> 趣味はデバッグ……</a></strong><br />
<span class="ascii">by kakkun61 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/06</span></p>
<p><strong><a href="https://qiita.com/Mizunashi_Mana/items/e82214dfae2765c6839a"><span class="ascii">Haskell</span>副作用ポエム <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by Mizunashi_Mana on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/21</span></p>
<p><strong><a href="https://qiita.com/ababup1192/items/b15cdace30b7fef3338c"><span class="ascii">Haskell</span>を勉強して感動したこと・難しいと思ってること <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ababup1192 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/04</span></p>
<h3 id="入門してみた">入門してみた</h3>
<p><strong><a href="https://gist.github.com/sys9kdr/2484ed09f5cb7ea86beae8f5222d9a3c"><span class="ascii">Haskell</span>入門しようとして環境構築で失敗。 <span class="ascii">· GitHub</span></a></strong><br />
<span class="ascii">by sys9kdr on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/05</span></p>
<p><strong><a href="https://qiita.com/lagenorhynque/items/f8b14ff70a26cfd27976"><span class="ascii">Clojurian</span>が<span class="ascii">Haskell</span>で<span class="ascii">Web API</span>開発に入門してみた <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by lagenorhynque on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/19</span></p>
<p><strong><a href="https://qiita.com/hitsujisanmeme/items/e14972cfd349c1149d58">美術の人が考える <span class="ascii">Haskell - Qiita</span></a></strong><br />
<span class="ascii">by hitsujisanmeme on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/14</span></p>
<p><strong><a href="https://qiita.com/brackss1/items/9f9466f160391dc53bba"><span class="ascii">Haskell</span>入門者がライブラリを触っちゃう<span class="ascii">!? - Qiita</span></a></strong><br />
<span class="ascii">by brackss1 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/22</span></p>
<p><strong><a href="https://qiita.com/ryosukue/items/cf14d817a7067dfd2094"><span class="ascii">Ubuntu</span>、<span class="ascii">Haskell</span>で<span class="ascii">web</span>アプリ手始め <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ryosukue on</span> <a href="http://qiita.com/advent-calendar/2017/nuco"><span class="ascii">Nuco Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/23</span></p>
<p><strong><a href="https://qiita.com/3nan/items/b89b7383ddb2bac5dda1"><span class="ascii">Haskell</span>をちょこっと紹介（フィボナッチ数列を書いてみる） <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by 3nan on</span> <a href="http://qiita.com/advent-calendar/2017/tecotec"><span class="ascii">TECOTEC Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/23</span></p>
<h3 id="ノウハウ">ノウハウ</h3>
<p><strong><a href="https://www.ncaq.net/2017/12/02/00/00/00/">私の<span class="ascii">Haskell</span>コーディングスタイルガイド<span class="ascii">,</span>改行出来るポイントを紹介 <span class="ascii">- ncaq</span></a></strong><br />
<span class="ascii">by ncaq on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/02</span></p>
<p><strong><a href="https://www.ncaq.net/2017/12/03/00/00/00/">ゲーム販売<span class="ascii">web</span>アプリケーション<span class="ascii">SYAKERAKE</span>を支える技術<span class="ascii">,Haskell</span>と<span class="ascii">Yesod</span>で作られています <span class="ascii">- ncaq</span></a></strong><br />
<span class="ascii">by ncaq on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/03</span></p>
<p><strong><a href="https://www.ncaq.net/2017/12/04/00/00/00/"><span class="ascii">Stackage Server</span>のちょっとした便利な使い方<span class="ascii">,Hoogle</span>をブラウザのカスタム検索エンジンに追加しましょう<span class="ascii">,</span>よく使うパッケージをブックマークする時は<span class="ascii">PackageR</span>の<span class="ascii">URL</span>にしましょう <span class="ascii">- ncaq</span></a></strong><br />
<span class="ascii">by ncaq on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/04</span></p>
<p><strong><a href="http://d.hatena.ne.jp/kazu-yamamoto/20171212/1513050147"><span class="ascii">go</span>な関数</a></strong><br />
<span class="ascii">by kazu_yamamoto on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/01</span></p>
<p><strong><a href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"><span class="ascii">Haskell</span>の<span class="ascii">ABC(Haskell Advent Calendar 6th) -</span> モナドとわたしとコモナド</a></strong><br />
<span class="ascii">by fumieval on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/06</span></p>
<p><strong><a href="https://haskell.jp/blog/posts/2017/windows-gotchas.html"><span class="ascii">Windows</span>で<span class="ascii">Haskell</span>を扱う時によく遭遇するエラーと対処法 <span class="ascii">- Haskell-jp</span></a></strong><br />
<span class="ascii">by igrep on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/14</span></p>
<h3 id="解説">解説</h3>
<p><strong><a href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"><span class="ascii">A Tour of Go in Haskell</span>を作ったのと、<span class="ascii">Go</span>と<span class="ascii">Haskell</span>の比較 <span class="ascii">- syocy</span>’<span class="ascii">s diary</span></a></strong><br />
<span class="ascii">by syocy on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/03</span></p>
<p><strong><a href="https://qiita.com/cyclone_t/items/8443ed5d4a77f87b1f1b"><span class="ascii">Servant</span>のハンドラに<span class="ascii">ReaderT</span>を適用する <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by cyclone_t on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/15</span></p>
<p><strong><a href="https://qiita.com/wgag/items/11a6e667011d530832e8">スーパーモナドについて <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by wgag on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/10</span></p>
<p><strong><a href="https://tech.recruit-mp.co.jp/dev-tools/post-13981/"><span class="ascii">CircleCI2.0</span>で<span class="ascii">Haskell</span>のテストを実行する – <span class="ascii">PSYENCE:MEDIA</span></a></strong><br />
<span class="ascii">by yukiasai on</span> <a href="http://adventar.org/calendars/2360"><span class="ascii">RECRUIT MARKETING PARTNERS Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/13</span></p>
<p><strong><a href="https://qiita.com/yukiasai/items/248294a871d40c0dcef6"><span class="ascii">Dokku</span>環境を構築して<span class="ascii">Haskell</span>のアプリケーションをデプロイする <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by yukiasai on</span> <a href="http://adventar.org/calendars/2324"><span class="ascii">Recruit Engineers Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/07</span></p>
<h3 id="周辺ツールについて">周辺ツールについて</h3>
<p><strong><a href="https://qiita.com/usamik26/items/672ed3c4451402bfc275"><span class="ascii">Haskell Stack</span> とは何をするツールなのか <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by usamik26 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/12</span></p>
<p><strong><a href="https://haskell.e-bigmoon.com/posts/2017-12-20-stack-ls-command.html"><span class="ascii">stack ls</span> コマンドが追加されます</a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/08</span></p>
<p><strong><a href="https://haskell.e-bigmoon.com/posts/2017-12-24-stack163.html"><span class="ascii">stack v1.6.3</span> がリリースされました。</a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/09</span></p>
<p><strong><a href="https://qiita.com/ogata-k/items/23d70250ec42359b6bb5"><span class="ascii">Haskell</span>や周辺ツールについてのリンク集 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ogata-k on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/15</span></p>
<p><strong><a href="https://qiita.com/ogata-k/items/2b21326b2b7351bfc28c"><span class="ascii">Haskell</span>の<span class="ascii">stack</span>によるプロジェクトについて <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ogata-k on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/16</span></p>
<p><strong><a href="https://haskell.e-bigmoon.com/posts/2017-12-27-haddock-grid-table.html"><span class="ascii">haddock</span> に <span class="ascii">Grid Table</span> 記法が追加されました</a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell5"><span class="ascii">Haskell (</span>その<span class="ascii">5) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/02</span></p>
<p><strong><a href="https://haskell.e-bigmoon.com/posts/2017-12-23-stack161.html">カスタムスナップショットの紹介</a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/14</span></p>
<p><strong><a href="https://myuon.github.io/posts/haskell-project-setup/"><span class="ascii">Haskell</span>プロジェクトを始めるにあたって <span class="ascii">- The curse of</span> λ</a></strong><br />
<span class="ascii">by myuon_myon on</span> <a href="http://qiita.com/advent-calendar/2017/myuon_myon_cs">一人<span class="ascii">Computer Science Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/15</span></p>
<h3 id="ライブラリ紹介">ライブラリ紹介</h3>
<p><strong><a href="https://qiita.com/jabaraster/items/e8ebbe6d25b535947aba"><span class="ascii">servant+persistent</span>を利用する <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by jabaraster on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/07</span></p>
<p><strong><a href="https://qiita.com/makoraru/items/596729de09d6aeb81e5a"><span class="ascii">Yampa</span>で<span class="ascii">Functional Reactive</span>な認知行動療法ボット <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by makoraru on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/13</span></p>
<p><strong><a href="https://nnwww.github.io/blog/post/haskell_ml/"><span class="ascii">Haskell</span>で機械学習を実装しようと思った過去の自分へ</a></strong><br />
<span class="ascii">by _Nnwww on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/23</span></p>
<p><strong><a href="https://qiita.com/cyclone_t/items/52ad44cfbb4603e123f3"><span class="ascii">Haskell</span>・<span class="ascii">Servant+Persistent/Esqueleto</span>で作る実用<span class="ascii">WebAPI (1) Servant</span>の基本 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by cyclone_t on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/11</span></p>
<p><strong><a href="https://matsubara0507.github.io/posts/2017-12-09-extensible-effects-step-by-step.html"><span class="ascii">Extensible Effects</span> ステップ・バイ・ステップ</a></strong><br />
<span class="ascii">by matsubara0507 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/09</span></p>
<p><strong><a href="https://qiita.com/Mizunashi_Mana/items/115855bf2af9b9970198"><span class="ascii">Haskell</span>のパーサライブラリまとめ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by Mizunashi_Mana on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/11</span></p>
<p><strong><a href="https://www.zaneli.com/blog/20171213"><span class="ascii">Haskell</span>入門者<span class="ascii">LT</span>会で自作ライブラリ<span class="ascii">network-voicetext</span>の話をしてきた <span class="ascii">|</span> ザネリは列車を見送った</a></strong><br />
<span class="ascii">by zaneli@github on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/13</span></p>
<p><strong><a href="https://qiita.com/satosystems/items/32bf104a041c8cc13809"><span class="ascii">Haskell</span> と <span class="ascii">SQLite - Qiita</span></a></strong><br />
<span class="ascii">by satosystems on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/16</span></p>
<p><strong><a href="https://qiita.com/masahiro_sakai/items/6a989d5b898a08f17821">部分構造の共有を観測する<span class="ascii">data-reify - Qiita</span></a></strong><br />
<span class="ascii">by masahiro_sakai on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/21</span></p>
<h3 id="作ってみた">作ってみた</h3>
<p><strong><a href="https://matsubara0507.github.io/posts/2017-12-13-elm-and-haskell-for-elmer.html"><span class="ascii">Elm</span> と <span class="ascii">Haskell</span> で作る <span class="ascii">ToDo</span> アプリ</a></strong><br />
<span class="ascii">by matsubara0507 on</span> <a href="http://qiita.com/advent-calendar/2017/elm"><span class="ascii">Elm Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/13</span></p>
<p><strong><a href="http://abc10946.hatenablog.com/entry/2017/12/18/014203"><span class="ascii">Haskell</span>に入門して<span class="ascii">1</span>年位経ったのでライフゲームを作ってみた話 <span class="ascii">- abc10946</span>の日記</a></strong><br />
<span class="ascii">by ABC10946 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/18</span></p>
<p><strong><a href="http://d.hatena.ne.jp/wvogel00/20171222/1513924995">仕事で<span class="ascii">Haskell</span>を使いたいなら外堀から</a></strong><br />
<span class="ascii">by hxf_vogel on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/22</span></p>
<p><strong><a href="http://blog.nakaji.me/slack-api-bloodhound-servant/"><span class="ascii">slack-api + bloodhound + servant</span> で<span class="ascii">bot+</span>αを作る</a></strong><br />
<span class="ascii">by nakaji-dayo on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/07</span></p>
<p><strong><a href="http://secret-garden.hatenablog.com/entry/2017/12/16/000000">【<span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017</span>】<span class="ascii">Vim</span> から <span class="ascii">Hoogle</span> の検索が出来るプラグインをつくった【<span class="ascii">16</span>日目】 <span class="ascii">- Secret Garden(Instrumental)</span></a></strong><br />
<span class="ascii">by pink_bangbi on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/16</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/807866bdaa81c3057ac0">お天気<span class="ascii">Bot</span> で理解する <span class="ascii">Haskell</span> の便利パッケージ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/25</span></p>
<p><strong><a href="https://qiita.com/arowM/items/e59442120ad3c1071c57"><span class="ascii">Haskell ochintin-daicho</span> で年末調整プログラミング <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by arowM on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/12</span></p>
<p><strong><a href="https://qiita.com/lotz/items/1aa6cf18aa193f40c647">作って学ぶ<span class="ascii">Bitcoin</span>！ゼロから作る<span class="ascii">SPV</span>ウォレット <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by lotz on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/18</span></p>
<p><strong><a href="http://tune.hateblo.jp/entry/2017/12/27/031803">優秀な秘書を雇いました<span class="ascii">!!! - Creatable a =&gt; a -&gt; IO b</span></a></strong><br />
<span class="ascii">by tokiwoousaka@github on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/20</span></p>
<p><strong><a href="https://qiita.com/satosystems/items/c1c0feef87345a9df69d"><span class="ascii">Haskell</span> における遅延ファイル読み込みとリソースリーク <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by satosystems on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/23</span></p>
<p><strong><a href="https://haskell.jp/blog/posts/2017/typesafe-precure2.html">タイプセーフプリキュア！を支える技術 その<span class="ascii">2 - Haskell-jp</span></a></strong><br />
<span class="ascii">by igrep on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/24</span></p>
<p><strong><a href="https://www.ncaq.net/2017/12/19/00/00/00/"><span class="ascii">Haskell</span>による<span class="ascii">web</span>スクレイピングの方法を<span class="ascii">dic-nico-intersection-pixiv</span>を例に書く <span class="ascii">- ncaq</span></a></strong><br />
<span class="ascii">by</span> エヌユル <span class="ascii">on</span> <a href="http://adventar.org/calendars/2105"><span class="ascii">Web</span>スクレイピング <span class="ascii">Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/19</span></p>
<p><strong><a href="https://matsubara0507.github.io/posts/2017-12-02-re-adventar-slack-bot-part1.html"><span class="ascii">Re:</span> ゼロから作る <span class="ascii">ADVENTAR</span> の <span class="ascii">Slack Bot (Haskell</span> 編<span class="ascii">)</span></a></strong><br />
<span class="ascii">by</span> ひげ <span class="ascii">on</span> <a href="http://adventar.org/calendars/2300">群馬大学電子計算機研究会 <span class="ascii">IGGG Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/02</span></p>
<h3 id="処理系">処理系</h3>
<p><strong><a href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"><span class="ascii">GHC</span>の中間言語<span class="ascii">Core</span>への脱糖を覗き見る <span class="ascii">- Hash</span> λ <span class="ascii">Bye</span></a></strong><br />
<span class="ascii">by ilyaletre on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/11</span></p>
<p><strong><a href="http://fujiy.hatenablog.com/entry/type-inference-1"><span class="ascii">Haskell</span>の型システムを書く<span class="ascii">(1) -</span> 純粋技術メモ</a></strong><br />
<span class="ascii">by fujiy on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/03</span></p>
<p><strong><a href="https://qiita.com/takoeight0821/items/9a1c3eb5b0f292026596"><span class="ascii">GHC</span>での中置演算子のパース <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by takoeight0821 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/06</span></p>
<p><strong><a href="https://uhideyuki.sakura.ne.jp/studs/index.cgi/ja/HindleyMilnerInHaskell">型システムを学ぼう！</a></strong><br />
<span class="ascii">by unnohideyuki on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/15</span></p>
<h3 id="言語機能">言語機能</h3>
<p><strong><a href="https://matsubara0507.github.io/posts/2017-12-12-backpack-memo.html"><span class="ascii">Haskell Backpack</span> 覚え書き</a></strong><br />
<span class="ascii">by matsubara0507 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/12</span></p>
<p><strong><a href="https://qiita.com/aiya000/items/b802531c58c161cd245f">にこ、希と一緒に学ぶ<span class="ascii">Haskell</span>（番外）「あまり知られていない<span class="ascii">GHC</span>拡張の紹介」 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by aiya000 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/21</span></p>
<p><strong><a href="https://qiita.com/ruicc/items/e2879c44eba77b1e7170"><span class="ascii">Levity polymorphism</span>について軽く <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ruicc on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/02</span></p>
<p><strong><a href="https://qiita.com/ryoppy/items/7156d587da2e6ae7e605"><span class="ascii">Kind</span>について <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ryoppy on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/11</span></p>
<p><strong><a href="http://khibino.hatenadiary.jp/entry/2017/12/18/081814"><span class="ascii">OverloadedLabels</span> と <span class="ascii">Haskell Relational Record - khibino blog</span></a></strong><br />
<span class="ascii">by khibino on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/18</span></p>
<p><strong><a href="https://qiita.com/thimura/items/0d289c231f9aceac61dc"><span class="ascii">GHC 8.2</span> 以前で <span class="ascii">FFI</span> を使う際に注意すること <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by thimura on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/19</span></p>
<h3 id="型">型</h3>
<p><strong><a href="https://qiita.com/junjihashimoto@github/items/31f245f5e0138e5fac7e">依存型の紹介と応用としての<span class="ascii">Clash</span>の紹介 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by junjihashimoto@github on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/19</span></p>
<p><strong><a href="https://qiita.com/aiya000/items/81e8424c8a3ee23586a6">ことり、穂乃果と一緒に学ぶ<span class="ascii">Haskell</span>（入門）その<span class="ascii">6</span>「高階データ型」 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by aiya000 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/24</span></p>
<p><strong><a href="https://qiita.com/mod_poppo/items/50ad2c0ee66171cc1ee9">型を実行時に作る：怖くないリフレクション <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by mod_poppo on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/19</span></p>
<p><strong><a href="https://qiita.com/HirotoShioi/items/5474119ba3682448c109"><span class="ascii">Haskell</span>における型クラス制約の役割 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by HirotoShioi on</span> <a href="http://qiita.com/advent-calendar/2017/haskell5"><span class="ascii">Haskell (</span>その<span class="ascii">5) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/04</span></p>
<h3 id="base"><span class="ascii">Base</span></h3>
<p><strong><a href="https://www.ncaq.net/2017/12/01/00/00/01/"><span class="ascii">Haskell</span>の<span class="ascii">State</span>の必要性が<span class="ascii">,</span>プログラミング言語の処理系を書いた時にわかったので<span class="ascii">,State</span>の良さを語ります <span class="ascii">- ncaq</span></a></strong><br />
<span class="ascii">by ncaq on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/01</span></p>
<p><strong><a href="https://qiita.com/grainrigi/items/f45b586b4013ffc3814e"><span class="ascii">Haskell - $</span>の仕組みを覗いてみよう <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by grainrigi on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/08</span></p>
<p><strong><a href="https://blog.b123400.net/functor/"><span class="ascii">Mapping things</span></a></strong><br />
<span class="ascii">by b123400 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/10</span></p>
<p><strong><a href="https://qiita.com/elipmoc101/items/4590210c9946ee2fd4c5"><span class="ascii">Maybe</span>自作から学ぶ<span class="ascii">Haskell</span>！ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by elipmoc101 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/16</span></p>
<p><strong><a href="https://keiorogiken.wordpress.com/2017/12/24/list%E3%81%A7%E9%81%8A%E3%81%B6/"><span class="ascii">List</span>で遊ぶ <span class="ascii">|</span> 慶應義塾大学ロボット技術研究会</a></strong><br />
<span class="ascii">by mt_caret on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/20</span></p>
<p><strong><a href="https://qiita.com/Lugendre/items/6b4a8c8a9c85fcdcb292"><span class="ascii">Arrow</span>を理解する <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by Lugendre on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/08</span></p>
<h3 id="アルゴリズムとデータ構造">アルゴリズムとデータ構造</h3>
<p><strong><a href="https://qiita.com/ryohji/items/d8bdba1648978c308cdd">探索問題を <span class="ascii">Haskell</span> で解く <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ryohji on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/09</span></p>
<p><strong><a href="https://qiita.com/v97ug/items/d6dd50a2b6b84a9e4d41">巡回セールスマン問題を遺伝的アルゴリズムとデータ構造を使って<span class="ascii">Haskell</span>で解く！ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by v97ug on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/15</span></p>
<p><strong><a href="https://qiita.com/as_capabl/items/39e55e7a035dea4dc93a">いつから<span class="ascii">Haskell</span>の<span class="ascii">5</span>行クイックソートが遅いと錯覚していた？ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by as_capabl on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/20</span></p>
<p><strong><a href="https://qiita.com/rst76/items/a7dd81b522a09d1b9986">キューの効率的な実装 または私は如何にして<span class="ascii">Haskell</span>を止めて<span class="ascii">F#</span>を愛するようになったか <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by rst76 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/21</span></p>
<p><strong><a href="http://autotaker.hatenablog.com/entry/2017/12/21/125153">永続リアルタイムキューの<span class="ascii">Haskell</span>実装と計算量解析 <span class="ascii">- autotaker</span>’<span class="ascii">s blog</span></a></strong><br />
<span class="ascii">by autotaker1984 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/22</span></p>
<p><strong><a href="https://qiita.com/Aruneko/items/dee20161358e7c39e27a"><span class="ascii">Zipper</span>に挑む <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by Aruneko on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/02</span></p>
<p><strong><a href="https://qiita.com/nobsun/items/27fe53516cbb90ba02e2"><span class="ascii">Tree:</span> 親子関係の付け替え <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by nobsun on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/07</span></p>
<p><strong><a href="http://zodi-g12.hatenablog.com/entry/2017/12/06/133951">コラッツの問題を<span class="ascii">Haskell</span>で書いてみた <span class="ascii">- Zodiac</span>の黙示録</a></strong><br />
<span class="ascii">by zodi_G12 on</span> <a href="http://adventar.org/calendars/2377"><span class="ascii">IQ</span>が<span class="ascii">1 Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/06</span></p>
<h3 id="数学科学">数学・科学</h3>
<p><strong><a href="https://qiita.com/tezca686/items/855236ccdda584ee8ebb"><span class="ascii">[Haskell]</span> とびだせ！<span class="ascii">Hask</span>圏 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by tezca686 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/14</span></p>
<p><strong><a href="https://qiita.com/makoraru/items/768089b2aab1dde47593">区間代数と無限小と無限大 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by makoraru on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/17</span></p>
<p><strong><a href="https://qiita.com/as_capabl/items/2031fe28e577e77dc269">しりとりの圏の回答、または定理証明<span class="ascii">Haskell</span>を少しだけ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by as_capabl on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/04</span></p>
<p><strong><a href="https://qiita.com/hiratara/items/6265b5d4791144bee33b">しりとりの圏の実装<span class="ascii">(</span>未完<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by hiratara on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/05</span></p>
<p><strong><a href="https://qiita.com/kyamaz/items/67ec5c7d39e62c1de91d">量子コンピューターにはモナドがよく似合う <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by kyamaz on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/17</span></p>
<p><strong><a href="https://qiita.com/makoraru/items/ab891a60d4dfe4bbf649"><span class="ascii">Haskell</span>と層 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by makoraru on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/20</span></p>
<p><strong><a href="https://qiita.com/NaOHaq/items/ba490cc1e1ab890cb399"><span class="ascii">Haskell</span>上で有限体を使って遊ぶ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by NaOHaq on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/22</span></p>
<p><strong><a href="https://qiita.com/cutsea110/items/69889a99d30b627bc04a"><span class="ascii">somehow-morphisms on fixed point written in Haskell - Qiita</span></a></strong><br />
<span class="ascii">by cutsea110 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/01</span></p>
<p><strong><a href="https://qiita.com/kyamaz/items/e49b07e05e871a22246c">量子プログラミングは<span class="ascii">Haskell</span>で <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by kyamaz on</span> <a href="http://qiita.com/advent-calendar/2017/quantum">量子コンピュータ <span class="ascii">Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/17</span></p>
<h3 id="docker"><span class="ascii">Docker</span></h3>
<p><strong><a href="https://qiita.com/t10471/items/4afa598e1be5d6c7cc1f"><span class="ascii">Haskell</span>でも<span class="ascii">Go</span>みたいにシングルバイナリでアプリケーションをデプロイしたい <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by t10471 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/09</span></p>
<p><strong><a href="https://qiita.com/algas/items/fde155abbc9d8ae3f8c9"><span class="ascii">Haskell on Docker</span> で <span class="ascii">Portable CLI</span> を作ろう <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by algas on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/05</span></p>
<h3 id="eta"><span class="ascii">Eta</span></h3>
<p><strong><a href="https://qiita.com/aiya000/items/881d5f7e04b1178e7764"><span class="ascii">Eta</span>で表現されるデータ型としての<span class="ascii">Java</span>クラスとその継承関係 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by aiya000 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/25</span></p>
<p><strong><a href="https://qiita.com/aiya000/items/7dc0cb8694de0675088e"><span class="ascii">Haskell (Eta)</span> で<span class="ascii">JavaFX</span>の<span class="ascii">EDSL</span>を作る雰囲気を醸し出す <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by aiya000 on</span> <a href="http://adventar.org/calendars/2546">プロ生ちゃん <span class="ascii">Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/25</span></p>
<h3 id="書籍紹介">書籍紹介</h3>
<p><strong><a href="https://qiita.com/waddlaw/items/dd926462d398c4cbd019">これから <span class="ascii">Haskell</span> を学ぶ人のための書籍紹介 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/01</span></p>
<p><strong><a href="https://qiita.com/Aruneko/items/e72f7c6ee49159751cba"><span class="ascii">2017</span>年に「すごい<span class="ascii">Haskell</span>たのしく学ぼう」を読む <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by Aruneko on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/13</span></p>
<p><strong><a href="https://qiita.com/YoshikuniJujo/items/0708f108bf53a216a61a">拙書「<span class="ascii">Haskell</span> 教養としての関数型プログラミング」の紹介 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by YoshikuniJujo on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/24</span></p>
<p><strong><a href="https://mt-caret.github.io/blog/posts/2017-12-01-book01.html"><span class="ascii">mt_caret.log -</span> 本<span class="ascii">1</span> “<span class="ascii">Haskell Programming from first principles</span>”</a></strong><br />
<span class="ascii">by mt_caret on</span> <a href="http://adventar.org/calendars/2433">本 <span class="ascii">Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/01</span></p>
<h3 id="翻訳記事">翻訳記事</h3>
<p><strong><a href="https://qiita.com/Pythonissam/items/ace180b1b78876f1c190"><span class="ascii">Haskell</span> で暗号学的ハッシュを扱う <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/02</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/d767f36d544427a9c60d"><span class="ascii">Haskell</span> のアプリケーション向けに軽量の <span class="ascii">Docker</span>イメージ を作る <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/03</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/8b7d2a200a932e761fa3"><span class="ascii">Haskell</span> 初心者へのアドバイス <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/04</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/31b835b493abf5be3549">将来も使えるテストスイート <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/05</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/27c12237d9ef1c5569ba"><span class="ascii">VS Code</span> で <span class="ascii">Ghcid</span> を使う <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/06</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/4584f5486c1061c93f0b"><span class="ascii">HLint</span> のルールを理解する <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/07</span></p>
<p><strong><a href="https://qiita.com/Pythonissam/items/41f8121795f5d8954802"><span class="ascii">SPJ</span> の憂鬱 <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/17</span></p>
<p><strong><a href="https://qiita.com/reotasosan/items/d9fdfab10e24eabfefda"><span class="ascii">SPJ</span>と<span class="ascii">Haskell</span>のエコシステム（和訳） <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by reotasosan on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/18</span></p>
<p><strong><a href="https://haskell.e-bigmoon.com/posts/2017-12-27-haskell-performance-debugging"><span class="ascii">Haskell</span> のパフォーマンスをデバッグする</a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell5"><span class="ascii">Haskell (</span>その<span class="ascii">5) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/01</span></p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2018/unordered-containers-hash-dos.html">hashdos脆弱性とunordered-containers</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/windows-gotchas.html" style="margin-left: auto;">WindowsでHaskellを扱う時によく遭遇するエラーと対処法</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>WindowsでHaskellを扱う時によく遭遇するエラーと対処法</title>
    <link href="https://haskell.jp/blog/posts/2017/windows-gotchas.html" />
    <id>https://haskell.jp/blog/posts/2017/windows-gotchas.html</id>
    <published>2017-12-25T00:00:00Z</published>
    <updated>2017-12-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>この記事は、<a href="https://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017</span></a><span class="ascii">14</span>日目の記事です。<br />
枠が空いていたので埋めるために登録しました。<br />
長くかかった割には実験自体は失敗気味な、<a href="https://haskell.jp/blog/posts/2017/typesafe-precure2.html">昨日のこちらの記事</a>よりは有用な情報じゃないかと思います。<br />
ほかの言語でもありそうな話ですしね。</p>
<p>すごく簡潔にまとめるとこの間の下記のツイートに収まるのですが、もう少し丁寧に補足するために書きます。</p>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
学んだことをまとめると<br><span class="ascii">- Invalid character</span>と言われたら<span class="ascii">chcp 65001</span>しよう<br><span class="ascii">- Permission Denied</span>と言われたらビルドし直そう<br><span class="ascii">-</span> 日本語のパスが混ざらないよう気をつけよう<br><span class="ascii">- C</span>のライブラリーはものによる<br>ですか。多分 <a href="https://twitter.com/hashtag/haskell?src=hash&amp;ref_src=twsrc%5Etfw"><span class="ascii">#haskell</span></a> 以外でも有益な話。
</p>
— <span class="ascii">Yuji Yamamoto:</span> 山本悠滋 <span class="ascii">(</span><span class="citation" data-cites="igrep"><span class="ascii">@igrep</span></span><span class="ascii">)</span> <a href="https://twitter.com/igrep/status/938056578934042626?ref_src=twsrc%5Etfw"><span class="ascii">2017</span>年<span class="ascii">12</span>月<span class="ascii">5</span>日</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h1 id="invalid-characterと言われたらchcp-65001しよう"><span class="ascii">Invalid character</span>と言われたら<span class="ascii">chcp 65001</span>しよう</h1>
<p>恐らく一番高確率で遭遇する <span class="ascii">&amp;</span> 知らないと回避できないのがこれ。<br />
あ、ほらまた<span class="ascii">hakyll</span>でビルドしたら起きた！</p>
<pre><code>&gt; stack exec -- site rebuild
...
  [ERROR] preprocessed-site\posts/2017/01-first.md: hGetContents: invalid argument (invalid byte sequence)</code></pre>
<p><span class="ascii">GHC</span>がファイルを読み書きする時に使う<a href="https://www.stackage.org/haddock/lts-10.0/base-4.10.1.0/System-IO.html#t:Handle"><code>Handle</code></a>というオブジェクトには、文字コードの情報が含まれています。</p>
<p>これは<span class="ascii">Ruby</span>の<a href="https://docs.ruby-lang.org/ja/latest/class/IO.html"><code>IO</code></a>や<span class="ascii">Perl</span>のファイルハンドラーにあるような仕組みと大体似ていて、<code>Handle</code>といったデータの「入り口」を表すオブジェクトに文字コードを紐付けることで、外から入ってくる文字列の文字コードを確実に内部の統一された文字コードに変換する変換できるようにしてくれます。<br />
<span class="ascii">Haskell</span>の<code>Char</code>型の場合は<span class="ascii">UTF-32</span>（この場合その言い方でよかったっけ？）のはずです。</p>
<p>この<code>Handle</code>に紐付ける文字コード、当然のごとくデフォルトでは<span class="ascii">OS</span>のロケール設定に従って設定されるようになってまして、日本語版の<span class="ascii">Windows</span>ではそう、<span class="ascii">Windows-31J</span>（またの名を<span class="ascii">CP932</span>）ですね。<br />
でも今はもうすぐ<span class="ascii">2018</span>年。あなたが「メモ帳」でプログラムを書く人でもない限り、新しく作るファイルの大半は<span class="ascii">UTF-8</span>でしょう。<br />
<span class="ascii">UTF-8</span>と<span class="ascii">Windows-31J</span>は全然違う体系の文字コードなので、<span class="ascii">UTF-8</span>なファイルを<span class="ascii">Windows-31J</span>のファイルとして読もうとしてもうまくいかないわけです。<br />
冒頭にあげた<code>invalid byte sequence</code>というエラーはまさにそうした場合に起こるエラーです。<br />
ファイルの読み書きだけでなく標準入出力でもしばしば発生するので覚えておいてください。</p>
<h2 id="対策">対策</h2>
<h3 id="ユーザーとして出くわした場合">ユーザーとして出くわした場合</h3>
<p>多くの場合、このエラーは以下のコマンドをあらかじめ実行しておけば回避できます。</p>
<pre><code>&gt; chcp 65001
&gt; stack exec -- site rebuild
... 動くはず！</code></pre>
<p>これは、現在開いているコマンドプロンプトで一時的に文字コードを切り替えるコマンドです。<br />
<code>65001</code>という数字が<span class="ascii">UTF-8</span>を指しているようです。<br />
もとに戻したい場合は<code>chcp 932</code>と実行しましょう。</p>
<pre><code>&gt; chcp 932</code></pre>
<p>どうやら「<span class="ascii">CP932</span>」の「<span class="ascii">932</span>」はここで出てくる「<span class="ascii">932</span>」と同じものを指しているようですね！</p>
<p>どういう仕様なのか分かりませんが、このコマンド、<span class="ascii">MSYS2</span>の<span class="ascii">bash</span>でも使用できます。<br />
ただし<code>chcp</code>コマンドは<code>C:\Windows\System32\</code>という、<span class="ascii">MSYS2</span>ユーザーにとってはあまり<code>PATH</code>に入れたくない場所に入っています。<br />
このディレクトリーには、<code>find.exe</code>など、<span class="ascii">Unix</span>な方が好んで使うコマンドと同じ名前の非互換なコマンドがゴロゴロ転がっているのです！</p>
<p>なので私は<span class="ascii">MSYS2</span>を使う時は<code>C:\Windows\System32\</code>は<code>PATH</code>から抜いています。<br />
私と同じような方は下記のようにフルパスで実行しましょう。</p>
<pre><code>/c/Windows/System32/chcp.com 932</code></pre>
<h3 id="それでもダメな場合あるいはライブラリーや開発者として出くわした場合">それでもダメな場合、あるいはライブラリーや開発者として出くわした場合</h3>
<p>残念ながら、<code>chcp 65001</code>してもこのエラーが消えないことはあります<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>。<br />
私の推測なんですが、どうも<code>chcp 65001</code>は<code>chcp 65001</code>したコマンドプロンプト（とか<span class="ascii">bash</span>）の孫プロセス（つまり、あなたが入力したコマンドの子プロセス）には届かないことがあるようです。</p>
<p>そんなときは、実際にエラーが起きているコマンドの開発元にバグ報告するか、自分で直してみましょう。<br />
バグ報告する場合は、「<code>chcp 932</code>してから実行してみて」とお願いすると、バグ報告を受けた開発者も再現しやすくて助かるかも知れません（残念ながら私はやったことがありません）。<br />
自分で直す場合、いろいろ方法はありますが、対象の<code>Handle</code>オブジェクトの文字コードを変えることで対処するのが、一番直接的で確実でしょう。</p>
<p>この問題は<code>Handle</code>に設定された文字コードと実際にやりとりされる文字列の文字コードに食い違いが発生しているため起こるものなのですから、適切な文字コードに変えてしまえばいいのです。<br />
状況にもよりますがエラーが起きた<code>Handle</code>が普通の<span class="ascii">UTF-8</span>なファイルを読み書きするものである場合、下記のようにすれば、問題は回避できるはずです。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="kw">import</span> <span class="dt">System.IO</span> (hSetEncoding)</a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="kw">import</span> <span class="dt">GHC.IO.Encoding</span> (utf8)</a>
<a class="sourceLine" id="cb5-3" data-line-number="3"></a>
<a class="sourceLine" id="cb5-4" data-line-number="4">hSetEncoding handle utf8</a></code></pre></div>
<p>それから、<a href="https://github.com/haskell/haddock/pull/566">実際に私が<span class="ascii">haddock</span>のバグを直した時</a>を例に標準出力（または標準エラー出力）でこのエラーが発生した時の対応も紹介しておきます。<br />
コードだけ貼り付けると、下記のようにすれば少なくともエラーが起こらないようにすることはできます（<a href="https://github.com/haskell/haddock/pull/566/commits/855118ee45e323fd9b2ee32103c7ba3eb1fbe4f2">このコミット</a>とほぼ同じ内容です）。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot">{-# LANGUAGE CPP #-}</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="kw">import</span> <span class="dt">System.IO</span> (hSetEncoding, stdout)</a>
<a class="sourceLine" id="cb6-4" data-line-number="4"></a>
<a class="sourceLine" id="cb6-5" data-line-number="5"><span class="ot">#if defined(mingw32_HOST_OS)</span></a>
<a class="sourceLine" id="cb6-6" data-line-number="6"><span class="kw">import</span> <span class="dt">GHC.IO.Encoding.CodePage</span> (mkLocaleEncoding)</a>
<a class="sourceLine" id="cb6-7" data-line-number="7"><span class="kw">import</span> <span class="dt">GHC.IO.Encoding.Failure</span> (<span class="dt">CodingFailureMode</span>(<span class="dt">TransliterateCodingFailure</span>))</a>
<a class="sourceLine" id="cb6-8" data-line-number="8"><span class="ot">#endif</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9"></a>
<a class="sourceLine" id="cb6-10" data-line-number="10"><span class="fu">...</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11"></a>
<a class="sourceLine" id="cb6-12" data-line-number="12"><span class="ot">#if defined(mingw32_HOST_OS)</span></a>
<a class="sourceLine" id="cb6-13" data-line-number="13">  liftIO <span class="fu">$</span> hSetEncoding stdout <span class="fu">$</span> mkLocaleEncoding <span class="dt">TransliterateCodingFailure</span></a>
<a class="sourceLine" id="cb6-14" data-line-number="14"><span class="ot">#endif</span></a></code></pre></div>
<p><span class="ascii">Windows</span>でしか使用できないモジュールを<code>import</code>している関係上、<span class="ascii">CPP</span>のマクロが混ざって読みにくいですが、重要な部分だけ切り出すと、</p>
<pre><code>hSetEncoding stdout $ mkLocaleEncoding TransliterateCodingFailure</code></pre>
<p>とすればよいのです。</p>
<p>一つ一つ解説しましょう。<br />
まず<code>hSetEncoding</code>は先ほども触れたとおり指定した<code>Handle</code>の文字コードを変更する関数です。<br />
そして<code>stdout</code>は名前の通り標準出力を表す<code>Handle</code>です。<br />
最後の<code>mkLocaleEncoding TransliterateCodingFailure</code>ですが、これは<span class="ascii">Windows</span>で設定された文字コード（この場合<code>chcp</code>された文字コードと同じ）に対して、「もし（<span class="ascii">Unicode</span>から、あるいは<span class="ascii">Unicode</span>に）変換できない文字があった場合、エラーにせず、それっぽい文字に変換する」という設定にすることができます。</p>
<p>結果、<code>chcp 932</code>な状態で<span class="ascii">GHC</span>のエラーメッセージにも使われる</p>
<pre><code>↓この文字
• No instance for (Transformation Nagisa CardCommune_Mepple)
↑</code></pre>
<p>が、</p>
<pre><code>? No instance for (Transformation Nagisa CardCommune_Mepple)</code></pre>
<p>のように、クエスチョンマークに変換されるようになります。そう、<span class="ascii">Windows</span>で<span class="ascii">GHC</span>をお使いの方は一度は目にした「<span class="ascii">?</span>」ではないでしょうか😅<br />
つまり<span class="ascii">GHC</span>はデフォルトで<code>mkLocaleEncoding TransliterateCodingFailure</code>しているものと推測されます。<br />
いずれにせよ、エラーが起きないだけマシですね。</p>
<p>更に補足すると、<span class="ascii">GHC</span>の文字コードについてより詳しい情報は、<a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/GHC-IO-Encoding.html"><span class="ascii">GHC.IO.Encoding</span>のドキュメント</a>をご覧ください。</p>
<h1 id="permission-deniedと言われたらビルドし直そう"><span class="ascii">Permission Denied</span>と言われたらビルドし直そう</h1>
<p>雑なまとめと言いつつ最初の一つ目が長くなってしまいましたが、ここからは簡単に言います。<br />
<span class="ascii">Windows</span>で<code>stack build</code>なり<code>ghc</code>なり<code>elm-make</code>なりとにかくいろいろ動かしていると、「<span class="ascii">Permission Denied</span>」と言ったエラー（あるいはこれと似たようなメッセージのエラー）に出遭います。<br />
正直に言って私は原因はサッパリ分かってないのですが、このエラーは大抵の場合何度も同じコマンドを実行すれば再現しませんでした。<br />
一度や二度ではめげず、繰り返すのがポイントです 😅<br />
問題が起きているディレクトリーをウィルス対策ソフトのスキャン対象から外してみるとか、<span class="ascii">Dropbox</span>の同期を一時的に止めてみる、といったこともやってみるといいかもしれません。</p>
<p>あ、あと、「<span class="ascii">Directory not empty</span>」みたいなのもあったかな。これは同類のはずです。</p>
<h1 id="cのライブラリーは-まぁ頑張れ"><span class="ascii">C</span>のライブラリーは… まぁ、頑張れ。</h1>
<p><span class="ascii">Pure Haskell</span>なライブラリーであれば大体<span class="ascii">OK</span>なんですが、残念ながら<span class="ascii">C</span>のライブラリー（<code>lib***</code>みたいな名前でよく<span class="ascii">OS</span>のパッケージマネージャーに登録されているやつですね）に依存したライブラリーは、<span class="ascii">Windows</span>でインストールするのは結構トラブることが多いです。<br />
まぁ、これは<span class="ascii">Haskell</span>に限った話ではないでしょう。</p>
<p>対応方法は私が知る限り完全にケースバイケースなので、ここでは知っている対応例をいくつか挙げておきましょう。</p>
<ul>
<li><span class="ascii">HDBC-sqlite3:</span>
<ul>
<li><a href="https://qiita.com/igrep/items/d947ab871eb5b20b57e4"><span class="ascii">Windows</span>版<span class="ascii">stack</span>でも<span class="ascii">HDBC-sqlite3</span>をビルドする <span class="ascii">- Qiita</span></a></li>
<li><a href="http://hiratara.hatenadiary.jp/entry/2017/01/29/110100"><span class="ascii">MSYS2</span>で<span class="ascii">HDBC-sqlite3</span>をコンパイル <span class="ascii">-</span> 北海道苫小牧市出身の初老<span class="ascii">PG</span>が書くブログ</a></li>
</ul></li>
<li><a href="https://teratail.com/questions/102462"><span class="ascii">Haskell - Haskell</span>にて<span class="ascii">stack</span>で<span class="ascii">iconv</span>パッケージを利用する方法【<span class="ascii">Windows</span>環境】<span class="ascii">(102462)</span>｜<span class="ascii">teratail</span></a></li>
</ul>
<p>以上です！<br />
それでは<span class="ascii">2018</span>年も<span class="ascii">Haskell on Windows 10</span>で<span class="ascii">Happy Hacking!! WSL</span>なんて知らないぜ！🏁🏁🏁</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>敢えて脚注に書きますが、<a href="http://eta-lang.org/"><span class="ascii">Eta</span></a>のコンパイラーをビルドしている時（のはず）、<code>chcp 65001</code>でもダメで<code>chcp 20127</code>ならうまくいったことがあります。<br />
<code>chcp 20127</code>は<span class="ascii">US-ASCII</span>に切り替えるためのコマンドですが、やっぱり<span class="ascii">Eta</span>の開発者の手元（？）ではそうなっているからなのでしょうか…？<a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2017/advent-calendar-2017.html">Haskell Advent Calendar 2017 まとめ</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/typesafe-precure2.html" style="margin-left: auto;">タイプセーフプリキュア！を支える技術 その2</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>タイプセーフプリキュア！を支える技術 その2</title>
    <link href="https://haskell.jp/blog/posts/2017/typesafe-precure2.html" />
    <id>https://haskell.jp/blog/posts/2017/typesafe-precure2.html</id>
    <published>2017-12-24T00:00:00Z</published>
    <updated>2017-12-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>このエントリーは<a href="https://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017</span></a> <span class="ascii">24</span>日目の記事兼<a href="https://adventar.org/calendars/2118">プリキュア <span class="ascii">Advent Calendar 2017</span></a> <span class="ascii">24</span>日目の記事です。<br />
毎度の手口ですが、二つの<span class="ascii">Advent Calendar</span>に同時に投稿しています。</p>
<p><span class="ascii">Haskell</span>とプリキュアの<span class="ascii">Advent Calendar</span>ということで、去年に引き続き「<a href="https://github.com/igrep/typesafe-precure/">タイプセーフプリキュア！</a>」について、開発する上で見つかった問題と、その解決方法について紹介します <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>。<br />
なお、「タイプセーフプリキュア！」そのものの日本語の紹介については、<a href="https://qiita.com/igrep/items/5496fa405fae00b5a737">私の去年の<span class="ascii">Haskell Advent Calendar</span>の記事</a>や<a href="http://the.igreque.info/posts/2016/06-type-safe-precure.html">同じく去年のプリキュア <span class="ascii">Advent Calendar</span>の記事</a>をご覧ください。</p>
<h1 id="問題提起">問題提起</h1>
<p>例えば、あなたはたくさんの仲間と、たくさんのサブコマンドがある<span class="ascii">CLI</span>アプリを作っていたとします。<br />
コードの規約上、サブコマンド一つにつき一つのモジュールで、決まった関数<small>（<span class="ascii">Haskell</span>であれば<code>[String] -&gt; IO ()</code>みたいな型の関数でしょうか）</small>を定義するものとします。<br />
そうした場合、必ずどこかのモジュールで、各モジュールで定義したサブコマンドを表す関数を列挙する必要があるでしょう。<br />
その場合、次のような問題が生じることがあります。</p>
<ul>
<li>サブコマンド（を表す関数）を追加したとき、サブコマンドを列挙しているモジュールに、追加し忘れる。</li>
<li>複数の開発者がそれぞれのブランチで、新たに作成したサブコマンドを列挙しているモジュールに追加すると、マージする際にコンフリクトがしばしば発生する。</li>
</ul>
<p>また、<span class="ascii">DRY</span>原則を徹底するならば「サブコマンドの名前を、サブコマンド自身の定義と列挙しているモジュールとで繰り返さない」というアイディアに基づき、こうした関数の列挙を避ける、という考え方もあるでしょう。<br />
そのように作ることで、<strong>モジュールに関わる情報<small>（どのような定義で、どのように使用されるのか）</small>をなるべくモジュールのファイルのみに集約</strong>させることができ、モジュールに関する情報が分散してしまうのを軽減することができます。</p>
<p>つまり、今回実現したいことは、複数のファイルに散らばった特定の関数やデータ型の定義を、自動で一カ所にまとめて再利用する、ということです。<br />
この記事で何度も使うことになるので「<strong>定義を自動でまとめる問題</strong>」と呼ぶことにします。<br />
これを<span class="ascii">GHC</span>の各種機能を利用して、<span class="ascii">Haskell</span>で実現させる方法を考えましょう。</p>
<h1 id="ほかの言語での例">ほかの言語での例</h1>
<p>こうした処理を<span class="ascii">Haskell</span>以外のプログラミング言語で行う場合、例えば下記のような機能を使うことになるでしょう。<br />
参考のために、私がこれまでに出会ったものを紹介します。</p>
<h2 id="typesafe-precure2_case-ruby"><span class="ascii">Ruby</span>での場合</h2>
<p>前職時代、私は実際にこの「定義を自動でまとめる問題」に出くわしたのですが、<span class="ascii">Ruby</span>を使っていたため、下記のように<a href="https://docs.ruby-lang.org/ja/2.4.0/method/Module/i/included.html"><span class="ascii">Module#included</span></a>という、対象のモジュールを<code>include</code><small>（モジュールが提供する機能の継承）</small>したときに呼ばれる、特別なメタプログラミング用のメソッドを使って解決しておりました。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">module</span> <span class="dt">ListedAsSubCommand</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">  <span class="ot">@listed</span> = []</a>
<a class="sourceLine" id="cb1-3" data-line-number="3"></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  <span class="co"># このモジュールを include するたびに呼ばれるメソッド。</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">  <span class="co"># 引数として、include した Class オブジェクト（または Module オブジェクト）を受け取る</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">  <span class="kw">def</span> included klass</a>
<a class="sourceLine" id="cb1-7" data-line-number="7">    <span class="co"># include した Class オブジェクトをリストに追加して記録する</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">    <span class="ot">@listed</span>.push klass</a>
<a class="sourceLine" id="cb1-9" data-line-number="9">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10"></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">  <span class="kw">class</span> &lt;&lt; <span class="dv">self</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">    <span class="ot">attr_reader</span> <span class="st">:listed</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14"><span class="kw">end</span></a>
<a class="sourceLine" id="cb1-15" data-line-number="15"></a>
<a class="sourceLine" id="cb1-16" data-line-number="16"></a>
<a class="sourceLine" id="cb1-17" data-line-number="17"><span class="co"># path/to/commands/foo/sub_command_a.rb</span></a>
<a class="sourceLine" id="cb1-18" data-line-number="18"><span class="kw">class</span> <span class="dt">SubCommandA</span></a>
<a class="sourceLine" id="cb1-19" data-line-number="19">  include <span class="dt">ListedAsSubCommand</span></a>
<a class="sourceLine" id="cb1-20" data-line-number="20"></a>
<a class="sourceLine" id="cb1-21" data-line-number="21">  <span class="co"># SubCommandA の定義 ...</span></a>
<a class="sourceLine" id="cb1-22" data-line-number="22"><span class="kw">end</span></a>
<a class="sourceLine" id="cb1-23" data-line-number="23"></a>
<a class="sourceLine" id="cb1-24" data-line-number="24"></a>
<a class="sourceLine" id="cb1-25" data-line-number="25"><span class="co"># path/to/commands/bar/sub_command_b.rb</span></a>
<a class="sourceLine" id="cb1-26" data-line-number="26"><span class="kw">class</span> <span class="dt">SubCommandB</span></a>
<a class="sourceLine" id="cb1-27" data-line-number="27">  include <span class="dt">ListedAsSubCommand</span></a>
<a class="sourceLine" id="cb1-28" data-line-number="28"></a>
<a class="sourceLine" id="cb1-29" data-line-number="29">  <span class="co"># SubCommandB の定義 ...</span></a>
<a class="sourceLine" id="cb1-30" data-line-number="30"><span class="kw">end</span></a></code></pre></div>
<p>このように書くことで、<code>ListedAsSubCommand.listed</code>というプロパティから、<code>ListedAsSubCommand</code>を<code>include</code>した<code>Class</code>オブジェクトのリストが取得できます。<br />
実際に使用するときは、下記のように、対象のクラスが定義されているファイルを含んだディレクトリーからまとめて<code>require</code>した上で、<code>ListedAsSubCommand.listed</code>にアクセスする事になるでしょう。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="co"># ListedAsSubCommand.includedが実行されるのは対象のクラスが</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="co"># 定義されたときなので、この時点では空のリスト。</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="dt">ListedAsSubCommand</span>.listed <span class="co">#=&gt; []</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="co"># Dir.glob メソッドで、指定したディレクトリーから</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="co"># 再帰的にファイルを取り出し、require で読み込む。</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="dt">Dir</span>.glob(<span class="st">&#39;path/to/commands/**/*.rb&#39;</span>) <span class="kw">do</span>|file|</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">  require file</a>
<a class="sourceLine" id="cb2-9" data-line-number="9"><span class="kw">end</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10"></a>
<a class="sourceLine" id="cb2-11" data-line-number="11"><span class="co"># require されたファイルの中でクラスの定義が実行されるので、</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12"><span class="co"># 定義したクラスがリストに追加される</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13"><span class="dt">ListedAsSubCommand</span>.listed <span class="co">#=&gt; [SubCommandA, SubCommandB, ...]</span></a></code></pre></div>
<h2 id="javaでの場合"><span class="ascii">Java</span>での場合</h2>
<p><span class="ascii">Java</span>で「定義を自動でまとめる問題」を解決する場合も、<span class="ascii">Ruby</span>と同様に、何らかの形でメタプログラミング用の仕組みを利用することになるかと思います。<br />
とりわけ、<span class="ascii">Java</span>においては、この問題の解決に特化しているライブラリーの機能が存在している点が興味深いでしょう。<span class="ascii">Spring</span>の「コンポーネントスキャン」です。</p>
<p><span class="ascii">Spring</span>をはじめとする<span class="ascii">DI</span>フレームワークでは、各クラスにおいて依存するオブジェクト<small>（正確にはそのインターフェース）</small>を宣言した際、必ず何らかの形で、「どのインターフェースにどのオブジェクトを紐付けるか」を宣言することになります。いわゆる<span class="ascii">Application Context</span>を書いた<span class="ascii">XML</span>であったり、<code>@Configuration</code>アノテーションが着いたクラスがそれに当たります。<br />
結果、モジュール<small>（実際には<span class="ascii">Java</span>なのでクラス）</small>に関する情報、すなわちどのクラスのどのフィールドに、どのオブジェクトを注入するか、といった情報はすべてモジュールのファイルとは独立して管理することになり、<span class="ascii">DRY</span>ではなくなってしまいます。 まさに「定義を自動でまとめる問題」の典型と言えますね。</p>
<p>それに対して<span class="ascii">Spring</span>の「コンポーネントスキャン」では、下記のように設定することで、「どのインターフェースにどのオブジェクトを紐付けるか」といった情報を、すべて自動で設定してしまうことができます。<br />
下記はコンポーネントスキャンを<code>@Configuration</code>アノテーションが着いた<span class="ascii">Java</span>のクラスで設定した場合のサンプルコードです。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="at">@Configuration</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="at">@ComponentScan</span>(<span class="st">&quot;example.base.package.containing.components&quot;</span>)</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">public</span> <span class="kw">class</span> AppConfig {</a>
<a class="sourceLine" id="cb3-4" data-line-number="4">}</a></code></pre></div>
<p><code>@Configuration</code>アノテーションを付与した<span class="ascii">Java</span>のクラスに、更に<code>@ComponentScan</code>というアノテーションを付与すると、<span class="ascii">Spring</span>は、<code>@ComponentScan</code>アノテーションの引数として渡した名前空間以下に存在する、すべての<code>@Component</code>というアノテーションが着いたクラスのオブジェクトを、自動的にほかの<code>@Component</code>が着いたクラスのフィールドとして設定できるようにします<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a>。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="at">@Component</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="kw">public</span> <span class="kw">class</span> SomeComponent {</a>
<a class="sourceLine" id="cb4-3" data-line-number="3">  <span class="co">// ...</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4">}</a></code></pre></div>
<p>このようにコンポーネントスキャンを使うことで、<code>@ComponentScan</code>されたクラスのオブジェクトは自動で依存するオブジェクトとして紐付けられるようになります。<br />
従来<code>foo-context.xml</code>みたいな名前のファイルに、どのオブジェクトのどのフィールドにどのオブジェクトを紐付けるか、といった情報を一つ一つ書いていたのを、ほとんど書かなくて済むようになりました。</p>
<h1 id="typesafe-precure2_requirement">解決に必要なもの</h1>
<p>さて、私が経験した二つの言語における「定義を自動でまとめる問題」の解決方法を見てきたところで、この問題を解決するのに共通して必要なことを列挙しましょう。</p>
<p><strong><span class="ascii">(1)</span> 対象となる「まとめたい定義（モジュールや関数、型など）」が書かれているファイルが、どのディレクトリー以下にあるか設定する</strong></p>
<p>「定義を自動でまとめる問題」に取り組むに当たり、最低限必要となるのが、この設定です。<br />
まさかファイルシステムにあるすべてのソースコードから「まとめたい定義」を探すわけにも行きませんし、プロジェクトのディレクトリーすべてを処理するのも、柔軟性に欠けた解決方法でしょう。そこで通例「定義を自動でまとめる問題」に対応する際は、「まとめたい定義（モジュールや関数、型など）」が書かれているファイルがどのディレクトリー以下にあるか、を何らかの形で書くことになります。</p>
<p>前述の<span class="ascii">Ruby</span>による例の場合、この情報は下記の<code>Dir.glob</code>メソッドに渡した引数に当たります。<br />
<code>'path/to/commands/**/*.rb'</code> という文字列のうち、 <code>path/to/commands/</code> の部分ですね。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="dt">Dir</span>.glob(<span class="st">&#39;path/to/commands/**/*.rb&#39;</span>) <span class="kw">do</span>|file|</a>
<a class="sourceLine" id="cb5-2" data-line-number="2">  require file</a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="kw">end</span></a></code></pre></div>
<p><span class="ascii">Java</span>における<span class="ascii">Spring</span>のコンポーネントスキャンの場合、<code>@ComponentScan</code>アノテーションに渡した引数が該当します。<br />
厳密には、<code>@ComponentScan</code>アノテーションに渡す引数はディレクトリーのパスではなく<code>Java</code>のパッケージの名前ですが、<span class="ascii">Java</span>ではパッケージはクラスパス以下のディレクトリーと一対一で対応するよう作る必要があるので、事実上ディレクトリーのパスを渡していると言えるでしょう。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="at">@Configuration</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="at">@ComponentScan</span>(<span class="st">&quot;example.base.package.containing.components&quot;</span>)</a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="kw">public</span> <span class="kw">class</span> AppConfig {</a>
<a class="sourceLine" id="cb6-4" data-line-number="4">}</a></code></pre></div>
<p><strong><span class="ascii">(2)</span> 「まとめたい定義（モジュールや関数、型など）」が書かれたファイルに、なんらかの印をつける</strong></p>
<p>「定義を自動でまとめる問題」では、「どの定義を自動でまとめるか」さえ指定できればよいので、理屈の上では前述の「<span class="ascii">(1)</span> 対象となる『まとめたい定義（モジュールや関数、型など）』が書かれているファイルが、どのディレクトリー以下にあるか設定する」さえできれば、後はディレクトリー以下のファイルをすべて自動でまとめられるはずです。 しかし、それだけでは次の問題が生じてしまう恐れがあります。</p>
<ol type="1">
<li>「自動でまとめられるファイル」がどのように使用されるか理解しにくくなる。
<ul>
<li>「自動でまとめられるファイル」に書かれた定義は、多くの場合、明確に使用される箇所で言及されなくなってしまいます。結果、そのファイルを読んだだけでは、書かれている定義がどこでどう使われているのか、そもそも本当に使われているのかどうかすら分からなくってしまいます。プロジェクトに新しく参加する人は、相応の学習が必要になってしまうでしょう。</li>
</ul></li>
<li>細かい例外を設定しにくい。
<ul>
<li>「まとめたい定義が書かれたファイル」を含むディレクトリーの中に、まとめる対象としたくないファイルを作る、ということがやりにくくなってしまいます。</li>
<li>例えばサブコマンドの例で言えば、<code>Commands</code>というディレクトリー以下に複数のサブコマンド（まとめられる対象）を置いたとき、各サブコマンドで共有されるユーティリティー関数も<code>Commands</code>ディレクトリー以下に置きたくなるかも知れません。もちろん状況に応じてほかのディレクトリーに置く手段も検討すべきですが、そうしたユーティリティー関数の入ったファイルは自動でまとめて欲しくないでしょう。</li>
</ul></li>
</ol>
<p>そうした問題を軽減するために、「定義を自動でまとめる問題」に対応する際は、必ず「『まとめたい定義（モジュールや関数、型など）』が書かれたファイルに、なんらかの印をつける」ことを検討した方がいいと思います。</p>
<p>前述の<span class="ascii">Ruby</span>による例で言えば、これは<code>include ListedAsSubCommand</code>という、<code>included</code>メソッドを実装した<code>ListedAsSubCommand</code>モジュールを<code>include</code>することが該当します。<br />
<span class="ascii">Java</span>の<span class="ascii">Spring</span>のコンポーネントスキャンの場合、まさしく<code>@Component</code>アノテーションがそれに当たるでしょう。</p>
<p>これらの印が着いたファイルを読む場合、この「印」を手がかりにして、コードベースを検索したり定義ジャンプしたり、<span class="ascii">Spring</span>の場合はインターネットを検索したりすることで、「印」の役割を知り、そのファイルがどう使われるのか調べることができるのです。</p>
<h1 id="typesafe-precure2_warnings">注意点</h1>
<p>いよいよ次の節で「定義を自動でまとめる問題」を<span class="ascii">Haskell</span>で解決した例を紹介いたしますが、その前にこの問題を解決することによって生じる、副作用について強調しておきましょう。 私の観測範囲内でですが、今までこの問題に対応した例を見たことがないのは、そうした副作用による悪影響が大きいと感じている人が多数派だからなのかも知れません。</p>
<p>それは、前節でも触れましたが、「『自動でまとめられるファイル』がどのように使用されるか理解しにくくなる」ということです。<br />
この問題は、確かに「『まとめたい定義（モジュールや関数、型など）』が書かれたファイルに、なんらかの印をつける」ことである程度緩和可能な問題ではありますが、それでも強く意識するべきでしょう。<br />
「自動でまとめられるファイル」を初めて読んだ人が、<code>include ListedAsSubCommand</code>や<code>@Component</code>という印に気づければよいのですが、そうでない場合、使用箇所を求めてコードベースをさまようことになってしまいます。<br />
事前に「印」の存在を知らせておくに越したことはありません。</p>
<p>それから、「『まとめたい定義（モジュールや関数、型など）』が書かれたファイルに、なんらかの印をつける」ことを選択した場合、「まとめたい定義が書かれたファイル」を新しく追加したいとき、ファイルにその「印」を書き忘れてしまうことがある点も、覚えておくべきでしょう。<br />
当初この「定義を自動でまとめる問題」を提起した際、自動でまとめなかった場合のデメリットしてあげた、</p>
<blockquote>
<ul>
<li>サブコマンド（を表す関数）を追加したとき、サブコマンドを列挙しているモジュールに、追加し忘れる。</li>
</ul>
</blockquote>
<p>という問題と本質的に同じです。<br />
自動でまとめずに手で定義を列挙した場合と比べて、編集するファイルが少ない分、忘れる可能性は低いかもしれません。<br />
ひな形に「印」を含めれば、さらに忘れる確率を下げることができるでしょう。手で一つのファイルに定義を列挙していた場合、そうした工夫はできません。<br />
ですが、いずれにしても忘れてしまうリスクがあることは変わらないでしょう。</p>
<p>以上の通り、結局のところ、「定義を自動でまとめる」よう設定するか、単純にまとめたい定義を手で列挙するかどうかは、そうしたトレードオフを考慮しつつ落ち着いて考えるのを推奨します。<br />
これから紹介する方法を採用する際も、ここであげた注意点については忘れないでください。</p>
<h1 id="haskellでの解決事例---タイプセーフプリキュアにおけるcure-index.jsonの実装"><span class="ascii">Haskell</span>での解決事例 <span class="ascii">-</span> 「タイプセーフプリキュア！」における<code>cure-index.json</code>の実装</h1>
<p>「<a href="https://github.com/igrep/typesafe-precure/">タイプセーフプリキュア！</a>」<small>（パッケージとしての名前は<a href="https://hackage.haskell.org/package/typesafe-precure"><span class="ascii">typesafe-precure</span></a>なので、以下「<span class="ascii">typesafe-precure</span>」と呼びます）</small>では、最近の更新により、コンパイル時に「<a href="https://github.com/igrep/typesafe-precure/blob/master/gen/cure-index.json"><span class="ascii">cure-index.json</span></a>」と、「<a href="https://github.com/igrep/typesafe-precure/blob/master/gen/pretty-cure-index.json"><span class="ascii">pretty-cure-index.json</span></a>」いうファイルを生成するようになりました。<br />
次のような内容のファイルです。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode json"><code class="sourceCode json"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="fu">{</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">    <span class="dt">&quot;specialItems&quot;</span><span class="fu">:</span> <span class="ot">[</span></a>
<a class="sourceLine" id="cb7-3" data-line-number="3">        <span class="fu">{</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">            <span class="dt">&quot;nameEn&quot;</span><span class="fu">:</span> <span class="st">&quot;Sweets Pact&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">            <span class="dt">&quot;attachments&quot;</span><span class="fu">:</span> <span class="ot">[</span></a>
<a class="sourceLine" id="cb7-6" data-line-number="6">                <span class="st">&quot;Animal Sweets&quot;</span></a>
<a class="sourceLine" id="cb7-7" data-line-number="7">            <span class="ot">]</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-8" data-line-number="8">            <span class="dt">&quot;nameJa&quot;</span><span class="fu">:</span> <span class="st">&quot;スイーツパクト&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-9" data-line-number="9">            <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;SweetsPact&quot;</span></a>
<a class="sourceLine" id="cb7-10" data-line-number="10">        <span class="fu">}</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb7-11" data-line-number="11">        <span class="er">...</span></a>
<a class="sourceLine" id="cb7-12" data-line-number="12">    <span class="ot">]</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-13" data-line-number="13">    <span class="dt">&quot;transformees&quot;</span><span class="fu">:</span> <span class="ot">[</span></a>
<a class="sourceLine" id="cb7-14" data-line-number="14">        <span class="fu">{</span></a>
<a class="sourceLine" id="cb7-15" data-line-number="15">            <span class="dt">&quot;nameEn&quot;</span><span class="fu">:</span> <span class="st">&quot;Cure Whip&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-16" data-line-number="16">            <span class="dt">&quot;variationEn&quot;</span><span class="fu">:</span> <span class="st">&quot;&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-17" data-line-number="17">            <span class="dt">&quot;nameJa&quot;</span><span class="fu">:</span> <span class="st">&quot;キュアホイップ&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-18" data-line-number="18">            <span class="dt">&quot;variationJa&quot;</span><span class="fu">:</span> <span class="st">&quot;&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-19" data-line-number="19">            <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;CureWhip&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-20" data-line-number="20">            <span class="dt">&quot;introducesHerselfAs&quot;</span><span class="fu">:</span> <span class="st">&quot;ショートケーキ！元気と笑顔を！レッツ・ラ・まぜまぜ！キュアホイップ！できあがり！&quot;</span></a>
<a class="sourceLine" id="cb7-21" data-line-number="21">        <span class="fu">}</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb7-22" data-line-number="22">        <span class="er">...</span></a>
<a class="sourceLine" id="cb7-23" data-line-number="23">    <span class="ot">]</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-24" data-line-number="24">    <span class="dt">&quot;girls&quot;</span><span class="fu">:</span> <span class="ot">[</span></a>
<a class="sourceLine" id="cb7-25" data-line-number="25">        <span class="fu">{</span></a>
<a class="sourceLine" id="cb7-26" data-line-number="26">            <span class="dt">&quot;nameEn&quot;</span><span class="fu">:</span> <span class="st">&quot;Ichika Usami&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-27" data-line-number="27">            <span class="dt">&quot;nameJa&quot;</span><span class="fu">:</span> <span class="st">&quot;宇佐美 いちか&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-28" data-line-number="28">            <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;Ichika&quot;</span></a>
<a class="sourceLine" id="cb7-29" data-line-number="29">        <span class="fu">}</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb7-30" data-line-number="30">        <span class="er">...</span></a>
<a class="sourceLine" id="cb7-31" data-line-number="31">    <span class="ot">]</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-32" data-line-number="32">    <span class="er">...</span></a>
<a class="sourceLine" id="cb7-33" data-line-number="33"><span class="fu">}</span></a></code></pre></div>
<p>これは、変身アイテムからプリキュア、プリキュアに変身する前の女の子、それから浄化技や変身時の台詞まで、<span class="ascii">typesafe-precure</span>で定義されているあらゆる情報をまとめた<span class="ascii">JSON</span>です。<br />
まさしく、プリキュアの定義を自動でまとめた「インデックス」となっております <a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a>。<br />
ただし、残念ながら現時点では「キラキラ☆プリキュアアラモード」に収録されたプリキュアの情報しか、<code>cure-index.json</code>には記録されていません<small>（理由は後で説明します）</small>。</p>
<p>名前の通り、<span class="ascii">pretty-</span><code>cure-index.json</code>には<code>cure-index.json</code>をプリティープリントした<span class="ascii">JSON</span>が記録されています。<br />
下記のように<code>curl</code>して確かめてみましょう。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb8-1" data-line-number="1">$ <span class="ex">curl</span> -sL https://github.com/igrep/typesafe-precure/raw/master/gen/cure-index.json</a>
<a class="sourceLine" id="cb8-2" data-line-number="2">{<span class="st">&quot;girls&quot;</span>:[{<span class="st">&quot;id&quot;</span>:<span class="st">&quot;Ichika&quot;</span>,<span class="st">&quot;nameEn&quot;</span>:<span class="st">&quot;Ichika Usami&quot;</span>,<span class="st">&quot;nameJa&quot;</span>:<span class="st">&quot;宇佐美 いちか&quot;</span>},{<span class="st">&quot;id&quot;</span>:<span class="st">&quot;Himari&quot;</span>,<span class="st">&quot;nameEn&quot;</span>:<span class="st">&quot;Himari Arisugawa&quot;</span>,<span class="st">&quot;nameJa&quot;</span>:<span class="st">&quot;有栖川 ひまり&quot;</span>}</a>
<a class="sourceLine" id="cb8-3" data-line-number="3"><span class="ex">...</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">$ <span class="ex">curl</span> -sL https://github.com/igrep/typesafe-precure/raw/master/gen/pretty-cure-index.json</a>
<a class="sourceLine" id="cb8-5" data-line-number="5"><span class="kw">{</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6">    <span class="st">&quot;specialItems&quot;</span>:<span class="bu"> [</span></a>
<a class="sourceLine" id="cb8-7" data-line-number="7">        {</a>
<a class="sourceLine" id="cb8-8" data-line-number="8">            <span class="st">&quot;nameEn&quot;</span>: <span class="st">&quot;Sweets Pact&quot;</span>,</a>
<a class="sourceLine" id="cb8-9" data-line-number="9">...</a></code></pre></div>
<p>さて、この<code>cure-index.json</code>、繰り返しになりますが、<span class="ascii">typesafe-precure</span>で定義されている、すべてのプリキュアの情報をまとめた<span class="ascii">JSON</span>となっております。<br />
ライブラリーとしての<span class="ascii">typesafe-precure</span>では、これらの情報は一つ一つが<span class="ascii">Haskell</span>の型として定義<span class="ascii">[^detail-typesafe-precure]</span>されており、<code>cure-index.json</code>は、それらの情報をコンパイル時に「自動でまとめる」ことで作成されます。決して、<span class="ascii">JSON</span>から<span class="ascii">Haskell</span>の型を作っているわけではありません。<br />
詳細は冒頭にも挙げましたが、<a href="https://qiita.com/igrep/items/5496fa405fae00b5a737">私の去年の<span class="ascii">Haskell Advent Calendar</span>の記事</a>や<a href="http://the.igreque.info/posts/2016/06-type-safe-precure.html">同年のプリキュア <span class="ascii">Advent Calendar</span>の記事</a>をご覧ください。<br />
ここではそれを実現するために使用した、<span class="ascii">Haskell</span>で「定義を自動でまとめる」方法を紹介しましょう。</p>
<h2 id="使用したghcについて">使用した<span class="ascii">GHC</span>について</h2>
<p>…と、その前に、今回<span class="ascii">typesafe-precure</span>のビルドに使用した<span class="ascii">GHC</span>のバージョンを述べておきましょう。</p>
<p><span class="ascii">typesafe-precure</span>は現在<span class="ascii">(ver. 0.5.0.1)</span>の時点において、通常<span class="ascii">GHC 8.0.2</span>でビルドされています。<br />
特に<span class="ascii">CI</span>での確認はしていませんが、<span class="ascii">GHC 7.10</span>でもビルドできるはずです。<br />
従って、使用している<span class="ascii">template-haskell</span>パッケージは<a href="https://hackage.haskell.org/package/template-haskell-2.10.0.0"><span class="ascii">2.10.0.0</span></a>から<a href="https://hackage.haskell.org/package/template-haskell-2.11.1.0"><span class="ascii">2.11.1.0</span></a>となっています。</p>
<p>この記事で紹介する機能は、<span class="ascii">GHC</span><small>（と、<span class="ascii">GHC</span>に標準添付される<span class="ascii">template-haskell</span>パッケージ）</small>のバージョンによって、大きく変わる場合があります。<br />
今回は「できない」としたことも、将来の<span class="ascii">GHC</span>ではできるようになっている（あるいは運悪くその逆もある）かもしれません。<br />
あらかじめご了承ください。</p>
<p>なお、各バージョンの<span class="ascii">GHC</span>に標準添付されているパッケージのバージョンについては、<a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/Libraries/VersionHistory"><span class="ascii">Commentary/Libraries/VersionHistory</span> – <span class="ascii">GHC</span></a>をご覧ください。</p>
<h2 id="annでまとめたい型が書かれたモジュールに印を着ける"><span class="ascii">ANN</span>で「まとめたい型」が書かれたモジュールに「印」を着ける</h2>
<p>まず、「『まとめたい定義（モジュールや関数、型など）』が書かれたファイルに、なんらかの印をつける」方法を考えましょう。<br />
実は<span class="ascii">Haskell(GHC)</span>にもアノテーションがあります<small>（<span class="ascii">Java</span>のアノテーションと使い勝手が異なりますが）</small>。<br />
<code>ANN</code>という<a href="https://www.haskell.org/onlinereport/haskell2010/haskellch12.html#x19-18800012"><span class="ascii">GHC</span>のプラグマ</a>（<code>{-# ... #-}</code> という形式で表される、特別なコメント）を使用すると、下記のように、モジュールや型、名前が付いた値に対して、アノテーションを加えることができます<small>（例は<a href="https://qiita.com/philopon/items/85210cc8f23ae04ba6ec">アンッ<span class="ascii">!!!</span>アンッ<span class="ascii">!!!! - Qiita</span></a>から拝借しました）</small>。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="kw">module</span> <span class="dt">Foo</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2"><span class="ot">{-# ANN module (&quot;annotation&quot; :: String) #-}</span> <span class="co">-- モジュールに対する注釈。importの前には書けないっぽい。不便……</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"></a>
<a class="sourceLine" id="cb9-4" data-line-number="4"><span class="kw">data</span> <span class="dt">Foo</span> <span class="fu">=</span> <span class="dt">Foo</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5"><span class="ot">{-# ANN type Foo (2 :: Int) #-}</span> <span class="co">-- 型に対する注釈</span></a>
<a class="sourceLine" id="cb9-6" data-line-number="6"><span class="ot">{-# ANN type Foo (5 :: Int) #-}</span> <span class="co">-- 注釈を同じ/違う型で複数個付ける事も出来る</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7"><span class="ot">{-# ANN type Foo (2.4 :: Double) #-}</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8"></a>
<a class="sourceLine" id="cb9-9" data-line-number="9"><span class="ot">foo ::</span> <span class="dt">Foo</span></a>
<a class="sourceLine" id="cb9-10" data-line-number="10">foo <span class="fu">=</span> <span class="dt">Foo</span></a>
<a class="sourceLine" id="cb9-11" data-line-number="11"><span class="ot">{-# ANN foo (3 + 2 * 6 :: Int) #-}</span> <span class="co">-- 値に対する注釈。注釈の中で計算する事も可能</span></a></code></pre></div>
<p>上記の通り、<span class="ascii">GHC</span>の<code>ANN</code>は、<span class="ascii">Java</span>のアノテーションと異なり、アノテーション専用のインターフェースを作って引数を補足情報として渡す、というような形式ではありません<small>（そもそも<span class="ascii">Haskell</span>にはインターフェースなんてありませんしね）</small>。<br />
<code>Data</code>型クラスのインスタンスである型の値であれば、なんでもアノテーションとして設定できます。</p>
<p>その<code>Data</code>型クラスのインスタンスですが、<code>base</code>パッケージに含まれている多くの型に加え、<code>DeriveDataTypeable</code>という<span class="ascii">GHC</span>の言語拡張を使えば、オリジナルの型も簡単にそのインスタンスにすることができます。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="ot">{-# LANGUAGE DeriveDataTypeable #-}</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Data.Data</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"></a>
<a class="sourceLine" id="cb10-5" data-line-number="5"><span class="kw">data</span> <span class="dt">SomeOriginalType</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">  <span class="dt">SomeOriginalValue</span> <span class="kw">deriving</span> <span class="dt">Data</span></a></code></pre></div>
<p>この、<code>Data</code>型クラスを使えば、実行時に型の構造を取得したりすることができます。<br />
とはいえ、ここでは単純に<code>{-# LANGUAGE DeriveDataTypeable #-}</code>と<code>deriving Data</code>を「おまじない」として使うだけで差し支えありません。<br />
詳しく知りたい方は<a href="https://github.com/shiatsumat/wiwinwlh-jp/wiki/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%82%AF%E3%82%B9">「<span class="ascii">What I Wish I Knew When Learning Haskell</span> 日本語訳」の「ジェネリクス」の章</a>をご覧ください。</p>
<p>さて<span class="ascii">typesafe-precure</span>では、この<code>Data</code>型クラスと<code>ANN</code>プラグマを利用した次のようなアプローチで、各モジュールに対し、プリキュアやプリキュアに関する情報を「印」として付与しました。</p>
<ol type="1">
<li><p><a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index/Types.hs"><code>ACME.PreCure.Index.Types</code></a>というモジュールに、型の名前やインスタンスの定義を自動生成したり、それを<span class="ascii">JSON</span>に変換したりするのに使う、中間データのための型を作る。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Girl</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">  <span class="dt">Girl</span> {<span class="ot"> girlId ::</span> <span class="dt">String</span>,<span class="ot"> girlNameEn ::</span> <span class="dt">String</span>,<span class="ot"> girlNameJa ::</span> <span class="dt">String</span> }</a>
<a class="sourceLine" id="cb11-3" data-line-number="3">    <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>, <span class="dt">Data</span>)</a></code></pre></div>
<ul>
<li>この、各種中間データ用の型を<code>Data</code>型クラスのインスタンスとすることで、「まとめたい定義」が含まれたモジュールに、その中間データ用の値を<code>ANN</code>プラグマで付与できるようにする。</li>
</ul></li>
<li><p>名前が<code>ACME.PreCure.Textbook.*.Profiles</code>という形式のモジュール<a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a><small>（<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Textbook/KirakiraALaMode/Profiles.hs">「キラキラ☆プリキュアアラモード」での例</a>）</small>で、中間データの値<small>（つまり各プリキュアや変身アイテムなどについての情報）</small>を定義する。</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="ot">girls ::</span> [<span class="dt">Girl</span>]</a>
<a class="sourceLine" id="cb12-2" data-line-number="2">girls <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3">  [ mkGirl <span class="st">&quot;Ichika Usami&quot;</span> <span class="st">&quot;宇佐美 いちか&quot;</span></a>
<a class="sourceLine" id="cb12-4" data-line-number="4">  , mkGirl <span class="st">&quot;Himari Arisugawa&quot;</span> <span class="st">&quot;有栖川 ひまり&quot;</span></a>
<a class="sourceLine" id="cb12-5" data-line-number="5">  , mkGirl <span class="st">&quot;Aoi Tategami&quot;</span> <span class="st">&quot;立神 あおい&quot;</span></a>
<a class="sourceLine" id="cb12-6" data-line-number="6">  , mkGirl <span class="st">&quot;Yukari Kotozume&quot;</span> <span class="st">&quot;琴爪 ゆかり&quot;</span></a>
<a class="sourceLine" id="cb12-7" data-line-number="7">  , mkGirl <span class="st">&quot;Akira Kenjo&quot;</span> <span class="st">&quot;剣城 あきら&quot;</span></a>
<a class="sourceLine" id="cb12-8" data-line-number="8">  , mkGirl <span class="st">&quot;Ciel Kirahoshi&quot;</span> <span class="st">&quot;キラ星 シエル&quot;</span></a>
<a class="sourceLine" id="cb12-9" data-line-number="9">  ]</a></code></pre></div>
<p><small><span class="ascii">1.</span> <code>ACME.PreCure.Textbook.*.Profiles</code>で定義した中間データを、<code>ACME.PreCure.Textbook.KirakiraALaMode.Types</code>という形式のモジュールに対して<code>ANN</code>プラグマで付与する（同じく<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Textbook/KirakiraALaMode/Types.hs">「キラキラ☆プリキュアアラモード」での例</a>）</small>。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode.Types</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2"></a>
<a class="sourceLine" id="cb13-3" data-line-number="3"><span class="kw">import</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode.Profiles</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4"></a>
<a class="sourceLine" id="cb13-5" data-line-number="5"><span class="ot">{-# ANN module girls #-}</span></a></code></pre></div></li>
</ol>
<h3 id="stage-restrictionを避けるためにモジュールを分ける"><span class="ascii">Stage Restriction</span>を避けるためにモジュールを分ける</h3>
<p>先の手順で引用したコードをご覧になった方は、こんなことを疑問に思ったかも知れません。<br />
中間データの値を定義するモジュールと、<code>ANN</code>で中間データの値を付与するモジュールとを分ける必要があるのか、と。<br />
上記の例で言えば、一つのモジュール<span class="ascii">(</span><code>ACME.PreCure.Textbook.KirakiraALaMode.Types</code><span class="ascii">)</span>で<code>girls</code>を定義しつつ<code>ANN</code>で付与すればよいのではないか、ということです。<br />
あるいは<code>girls</code>という名前をつけずに、</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">{-# ANN module</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2"><span class="ot">    [ mkGirl &quot;Ichika Usami&quot; &quot;宇佐美 いちか&quot;</span></a>
<a class="sourceLine" id="cb14-3" data-line-number="3"><span class="ot">    , mkGirl &quot;Himari Arisugawa&quot; &quot;有栖川 ひまり&quot;</span></a>
<a class="sourceLine" id="cb14-4" data-line-number="4"><span class="ot">    , mkGirl &quot;Aoi Tategami&quot; &quot;立神 あおい&quot;</span></a>
<a class="sourceLine" id="cb14-5" data-line-number="5"><span class="ot">    , mkGirl &quot;Yukari Kotozume&quot; &quot;琴爪 ゆかり&quot;</span></a>
<a class="sourceLine" id="cb14-6" data-line-number="6"><span class="ot">    , mkGirl &quot;Akira Kenjo&quot; &quot;剣城 あきら&quot;</span></a>
<a class="sourceLine" id="cb14-7" data-line-number="7"><span class="ot">    , mkGirl &quot;Ciel Kirahoshi&quot; &quot;キラ星 シエル&quot;</span></a>
<a class="sourceLine" id="cb14-8" data-line-number="8"><span class="ot">    ]</span></a>
<a class="sourceLine" id="cb14-9" data-line-number="9"><span class="ot">#-}</span></a>
<a class="sourceLine" id="cb14-10" data-line-number="10"><span class="co">-- 注: このコードは試していないので文法が合っているか自信がないです。</span></a></code></pre></div>
<p>というような書き方はできないのか、ということです。</p>
<p>中間データの値を<code>ANN</code>で使うだけならそれで問題ないのですが、<span class="ascii">typesafe-precure</span>の場合、中間データの値からプリキュアや変身アイテムを表す型と、その型クラスのインスタンスを定義する必要があります。<br />
なので、先ほどのコード例にあった<code>ACME.PreCure.Textbook.KirakiraALaMode.Profiles</code>というモジュールでは、実際には<code>{-# ANN module girls #-}</code>の行の後に、<code>girls</code>から、プリキュアに変身する女の子（を表す型）や、それに対して型クラスのインスタンスを宣言する<span class="ascii">Template Haskell</span>のコードが続いています。<br />
下記の<code>$(declareGirls girls)</code>という行がそれです。</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode.Types</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3"></a>
<a class="sourceLine" id="cb15-4" data-line-number="4"><span class="kw">import</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode.Profiles</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5"></a>
<a class="sourceLine" id="cb15-6" data-line-number="6"><span class="ot">{-# ANN module girls #-}</span></a>
<a class="sourceLine" id="cb15-7" data-line-number="7"><span class="fu">$</span>(declareGirls girls)</a></code></pre></div>
<p>詳細は冒頭でも挙げた<a href="https://qiita.com/igrep/items/5496fa405fae00b5a737">私の去年の<span class="ascii">Haskell Advent Calendar</span>の記事</a>などをご覧いただきたいのですが、<span class="ascii">typesafe-precure</span>では、それぞれのプリキュアや、プリキュアに変身する女の子、変身に必要なアイテムなどを、すべて<strong>個別の型</strong>として定義しています。<br />
そのため、中間データの値は<span class="ascii">JSON</span>としてまとめるだけでなく、個別の型として定義する必要もあったのです。<br />
その結果、中間データの値は必ず名前をつけて使い回さないといけなくなるのです。</p>
<p>そして、<code>ANN</code>や<span class="ascii">Template Haskell</span>において値に名前をつけて使い回す場合、「<span class="ascii">Stage Restriction</span>」というやっかいな制限が顔を出してきます。<br />
これは、「<code>ANN</code>で値を付与する式や、トップレベルの宣言などを生成する<span class="ascii">Template Haskell</span>のコードでは、<strong>ほかのモジュールから<code>import</code>された名前しか</strong>参照できない」という制限です<small>（詳しくは「<a href="http://haskell.g.hatena.ne.jp/mr_konn/20111218/1324220725">できる！<span class="ascii">Template Haskell (</span>完<span class="ascii">)</span></a>」をご覧ください）</small>。<br />
これがあるために、中間データの値を含めた名前（上記のコードの場合<code>girl</code>）は、<code>ANN</code>や<span class="ascii">Template Haskell</span>で参照するモジュールとは一旦別のモジュールとして定義して、<code>import</code>して再利用するしかありません。</p>
<p>本来、「定義を自動でまとめる問題」に対応する目的の中には「モジュールに関わる情報（どのような定義で、どのように使用されるのか）をなるべくモジュールのファイルのみに集約させる」というものがありましたが、外部のファイルに書くボイラープレートが増えてしまい、この観点ではイマイチな実装になってしまいました。<br />
この点については、後の節でよりよい方法を検討しましょう。</p>
<h2 id="autoexporterでまとめたい型が書かれているモジュールがどのディレクトリー以下にあるか設定する"><span class="ascii">autoexporter</span>で「まとめたい型」が書かれているモジュールが、どのディレクトリー以下にあるか設定する</h2>
<p>前節までで紹介した方法により、<code>ANN</code>プラグマを使うことでプリキュアの情報が書かれたモジュールに、プリキュアの情報を「自動でまとめる」ための「印」を着けることができました。<br />
続いて、<code>ANN</code>プラグマで「印」を着けたモジュールがどこにあるかを指定して、<span class="ascii">GHC</span>に自動で回収させる方法を述べましょう。 「<a href="#typesafe-precure2_requirement">解決に必要なもの</a>」の節で説明した、「対象となる『まとめたい定義（モジュールや関数、型など）』が書かれているファイルが、どのディレクトリー以下にあるか設定する」部分に当たります。</p>
<p>次の節で説明しますが、<code>ANN</code>プラグマで付与した情報は、「<a href="https://qiita.com/philopon/items/85210cc8f23ae04ba6ec#template-haskell%E3%81%8B%E3%82%89">アンッ<span class="ascii">!!!</span>アンッ<span class="ascii">!!!!</span>」でも説明されている</a>とおり<code>reifyAnnotations</code>という<span class="ascii">Template Haskell</span>の関数を使えば取得することができますが、該当のモジュールを何らかの方法で集めなくてはなりません。<br />
私が調べた限り、少なくとも<span class="ascii">Template Haskell</span>を使う限りは、<code>import</code>しているモジュールから収集する方法しか見つかりませんでした。<br />
<a href="https://hackage.haskell.org/package/template-haskell-2.12.0.0/docs/Language-Haskell-TH.html"><span class="ascii">Template Haskell</span>のライブラリーのドキュメント</a>では、<code>reifyAnnotations</code>するのに必要な、<code>Module</code>型の値を取得する方法として、<code>thisModule</code>を使って<span class="ascii">Template Haskell</span>のコードを実行しているモジュールから取得するか、<code>reifyModule</code>関数を使って<code>thisModule</code>から<code>thisModule</code>が<code>import</code>しているモジュールから取得するしか紹介されていないためです。</p>
<p>しかし、現状の<span class="ascii">GHC</span>では<span class="ascii">Template Haskell</span>をもってしても、指定したディレクトリー以下のモジュールを自動で<code>import</code>するということはできません。<br />
あまりユーザーに自由を与えてしまうと、却って混乱が生じる恐れがあるので敢えて実装していないのでしょう。<br />
とは言え、だからといって「印」を着けたモジュールを一つずつ手で<code>import</code>して列挙してしまっては、「定義を自動でまとめる問題」を解決できたとは言えなくなってしまいます。<br />
そこで、今回は実践でもよく使われる、さらなる「裏技」を用いることにしました。<br />
本節の見出しでネタバレしてしまっていますが、<a href="https://hackage.haskell.org/package/autoexporter"><code>autoexporter</code></a>というプログラムと、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html#ghc-flag--F"><span class="ascii">GHC</span>のカスタムプリプロセッサーのためのオプション</a>を使います。</p>
<p><span class="ascii">autoexporter</span>は、ドキュメントに書いてあるとおり、<span class="ascii">GHC</span>のカスタムプリプロセッサーのためのオプション<span class="ascii">(</span><code>-F -pgmF</code><span class="ascii">)</span>、さらには<a href="https://downloads.haskell.org/~ghc/7.0.3/docs/html/users_guide/pragmas.html#options-pragma"><code>OPTIONS_GHC</code>プラグマ</a>組み合わせて、次のように使うことを想定して作られています。<br />
以下は、<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Textbook.hs"><span class="ascii">typesafe-precure</span>の<code>ACME/PreCure/Textbook.hs</code>というファイル</a>からの抜粋です。</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="ot">{-# OPTIONS_GHC -F -pgmF autoexporter #-}</span></a></code></pre></div>
<p>と、いっても<span class="ascii">1</span>行だけですが😅</p>
<p>一つずつ解説しましょう。<br />
まず<code>OPTIONS_GHC</code>プラグマですが、文字通りこれは<code>ghc</code>コマンドに渡すオプションを、ファイル単位で指定するためのものです<small>（もちろんすべてのオプションをファイル単位で指定できるわけではありません）</small>。<br />
つまり、上記の場合<code>-F -pgmF autoexporter</code>というオプションが、<code>ACME/PreCure/Textbook.hs</code>というファイルでのみ有効になります。</p>
<p>続いて<code>-F</code>オプションですが、これは「カスタムプリプロセッサー」という機能を有効にするためのものです。<br />
これを有効にすると、有効にしたファイルを、続く<code>-pgmF</code>オプションで指定したプログラムで変換するようになります。<br />
具体的には、<code>-pgmF</code>オプションで指定したプログラムに、</p>
<ol type="1">
<li>変換前のファイル名、</li>
<li>変換前のソースコードを含むファイルの名前<small>（恐らく、一時ディレクトリーにコピーした、変換前のファイル名とは異なる名前と思われます）</small>、</li>
<li>変換後のソースコードを書き込むファイル名<small>（これも一時ディレクトリーにあるファイル名なのでしょう）</small>、</li>
</ol>
<p>という<span class="ascii">3</span>つのコマンドライン引数を渡して、<code>-pgmF</code>オプションで指定したプログラムを実行します。<br />
<code>-pgmF</code>で指定したプログラムが、<span class="ascii">3</span>つめの引数として渡した名前のファイルに変換後のソースコードを書き込むことで、<code>-F</code>を有効にしたファイルを、変換後のソースコードでそっくりそのまま差し替えます。<br />
結果、<code>-pgmF</code>オプションで指定したプログラムは、自由に任意の<span class="ascii">Haskell</span>のソースを生成できるようになります。まさにソースコードの自動生成にぴったりな機能と言えるでしょう。</p>
<p>ちなみにこの機能、<a href="https://hackage.haskell.org/package/hspec-discover"><code>hspec-discover</code></a>などのパッケージでも使用されています。テストコードを複数のファイルに分けて書く場合はほぼ必ず使われるものなので、みなさんも「おまじない」として使用したことがあるでしょう<small>（<code>-F -pgmF</code>なんて文字列、ググラビリティーも低いですしね。）</small>。<br />
そういえばこれもテストコードの「定義を自動でまとめる問題」を解決したものでしたね！</p>
<p>話がそれましたが、<code>autoexporter</code>はこのカスタムプリプロセッサーを利用することで、次のようなソースコードを自動生成します。<br />
<code>autoexporter</code>のドキュメントにも同じことが書かれていますが、ここでも<code>ACME/PreCure/Textbook.hs</code>を例に説明しましょう。</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2">  ( <span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook.First</span></a>
<a class="sourceLine" id="cb17-3" data-line-number="3">  , <span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook.MaxHeart</span></a>
<a class="sourceLine" id="cb17-4" data-line-number="4">  <span class="fu">...</span></a>
<a class="sourceLine" id="cb17-5" data-line-number="5">  , <span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode</span></a>
<a class="sourceLine" id="cb17-6" data-line-number="6">  ) <span class="kw">where</span></a>
<a class="sourceLine" id="cb17-7" data-line-number="7"></a>
<a class="sourceLine" id="cb17-8" data-line-number="8"><span class="kw">import</span> <span class="dt">ACME.PreCure.Textbook.First</span></a>
<a class="sourceLine" id="cb17-9" data-line-number="9"><span class="kw">import</span> <span class="dt">ACME.PreCure.Textbook.MaxHeart</span></a>
<a class="sourceLine" id="cb17-10" data-line-number="10"><span class="fu">...</span></a>
<a class="sourceLine" id="cb17-11" data-line-number="11"><span class="kw">import</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode</span></a></code></pre></div>
<p>そう、（プリキュアが好きで）賢明な<span class="ascii">Haskeller</span>のみなさんならお気づきでしょう。<a href="https://github.com/igrep/typesafe-precure/tree/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Textbook"><span class="ascii">typesafe-precure</span>の<code>ACME/PreCure/Textbook/</code>ディレクトリー</a>に含まれている、（プリキュアの各シリーズを表す）すべてのモジュールを<code>import</code>して、再エクスポートしているのです！</p>
<p>つまり、<code>autoexporter</code>はこのような、「責務を分割するためにモジュールを細かく分けたい、でもユーザーには一つのモジュールを<code>import</code>しただけで使えるようにしたい」というライブラリー開発者のニーズに応えるため、よく行われているモジュールの書き方を自動で行うための便利コマンドなのです。</p>
<p>紹介が長くなりましたが、<span class="ascii">typesafe-precure</span>ではこの<code>autoexporter</code>を次のように使うことで、「まとめたい型（プリキュアや変身アイテムなどの情報）」が書かれているモジュールを集めています。</p>
<ol type="1">
<li>前述の<code>ACME.PreCure.Textbook</code>モジュールで<code>autoexporter</code>を使うことで、<code>ACME.PreCure.Textbook</code>以下にある、「まとめたい型（プリキュアや変身アイテムなどの情報）」が書かれているモジュールをすべて自動的に再エクスポートする。</li>
<li><a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs"><code>ACME.PreCure.Index</code></a>モジュールが<code>ACME.PreCure.Textbook</code>モジュールを<code>import</code>することで、実際に<code>cure-index.json</code>などの書き出しを行う<code>ACME.PreCure.Index</code>モジュールが、<code>ACME.PreCure.Textbook</code>が再エクスポートしたすべてのモジュールを利用できるようになる。</li>
</ol>
<p>実際のところ<code>OPTIONS_GHC -F</code>をもっとうまく使えば、<code>ACME.PreCure.Textbook</code>以下にあるモジュールを自動ですべて<code>import</code>するモジュールと、それを利用して<code>cure-index.json</code>などの書き出しを行うモジュールを、分けずに一つのモジュールで済ますこともできたでしょう。<br />
今回は敢えて<code>autoexporter</code>を再利用することで、<code>ACME.PreCure.Textbook</code>以下にあるモジュールをすべて回収する処理を書かずに任せることにしました。<br />
この件については後ほど再検討しましょう。</p>
<h2 id="annプラグマで付与した定義情報からjsonを書き出す"><code>ANN</code>プラグマで付与した定義情報から、<span class="ascii">JSON</span>を書き出す</h2>
<p>いよいよ、<code>autoexporter</code>を駆使して集めたモジュールから、<code>ANN</code>で付与したプリキュアの情報を取り出し、<span class="ascii">JSON</span>に変換して書き出しましょう。<br />
詳細は<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs"><code>ACME.PreCure.Index</code></a>モジュールや、<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index/Lib.hs"><code>ACME.PreCure.Index.Lib</code></a>モジュールのソースコードをご覧いただきたいのですが、ここでは簡単にアルゴリズムを解説します。</p>
<ol type="1">
<li>「現在のモジュール（<code>ACME.PreCure.Index</code>）」を取得する。</li>
<li>「現在のモジュール」が<code>import</code>しているモジュールから、<code>ACME.PreCure.Textbook</code>モジュールを見つけて、取り出す（<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs#L38-L39">具体的には<span class="ascii">38</span>行目から<span class="ascii">39</span>行目</a>）。</li>
<li>取得した<code>ACME.PreCure.Textbook</code>モジュールが<code>import</code>している、プリキュアの情報を集めたモジュール（<code>ANN</code>プラグマでプリキュアの情報を付与したモジュール）をすべて取り出す（<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs#L42-L45">具体的には<span class="ascii">42</span>行目から<span class="ascii">45</span>行目</a>）。</li>
<li>「プリキュアの情報を集めたモジュール」すべてから、<code>ANN</code>プラグマで付与されているプリキュアや変身アイテムなどの情報を集めて、種類ごとに一つのリストとしてまとめる（<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs#L48-L60">具体的には<span class="ascii">48</span>行目から<span class="ascii">60</span>行目</a>）。</li>
<li>収集してできた<code>Index</code>という型の値を、それぞれ<span class="ascii">JSON</span>に変換して書き込む（<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs#L61-L62">具体的には<span class="ascii">48</span>行目から<span class="ascii">60</span>行目</a>）。</li>
</ol>
<p>上記のアルゴリズムにおいても、<span class="ascii">Template Haskell</span>の「<span class="ascii">Stage Restriction</span>」と戦わなければならないということは注記しておきましょう。<br />
つまり、<code>ACME.PreCure.Index</code>における<span class="ascii">Template Haskell</span>のコードで繰り返し使う便利な関数は、<code>ACME.PreCure.Index</code>とは別のモジュールで定義して、<code>import</code>して使わなければならないのです。<br />
<code>ACME.PreCure.Index.Lib</code>モジュールは、その制限を回避するためのモジュールです。</p>
<p>ともあれこうして、<span class="ascii">typesafe-precure</span>では<code>ACME.PreCure.Index</code>モジュールをコンパイルする度に、各モジュールに定義されたすべてのプリキュアに関する情報を集めて、<a href="https://github.com/igrep/typesafe-precure/tree/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/gen"><span class="ascii">gen</span>ディレクトリー</a>にある<code>cure-index.json</code>や<code>pretty-cure-index.json</code>というファイルに書き出すことができました。<br />
「定義を自動でまとめる問題」、これにて一件落着です！🎉<br />
なお、自動生成されるファイルを<span class="ascii">Git</span>で管理することはなるべく避けた方がよいことですが、<code>cure-index.json</code>の配布を簡単に行うため方策として用いることにしています。</p>
<h1 id="うまくいかなかった方法-来年のタイプセーフプリキュアについてちょっとだけ">うまくいかなかった方法 （<span class="ascii">+</span> 来年の「タイプセーフプリキュア！」についてちょっとだけ）</h1>
<p><span class="ascii">typesafe-precure</span>における「定義を自動でまとめる問題」の解決方法はここまで述べたとおりですが、今後同じような問題に対応したくなったときのために、最初に思いついたけどうまくいかなかった方法や、後で思いついた別の解決方法をこの先の二つの節ででまとめておきます。<br />
私や読者のみなさんがお仕事など、より重要なプロジェクトでこれらのアイディアを活かすことができれば幸いです。</p>
<h2 id="型クラスのインスタンスから">型クラスのインスタンスから</h2>
<p>当初（実は今も大部分は）、<span class="ascii">typesafe-precure</span>には、<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Textbook/KirakiraALaMode/Profiles.hs"><code>ACME.PreCure.Textbook.KirakiraALaMode.Profiles</code></a>で定義しているような中間データはなく、各プリキュア（や、変身アイテムなど諸々）に対しては、直接型を宣言したり型クラスのインスタンスを実装したりしていました。<br />
例えば下記のようなコードです<a href="#fn5" class="footnote-ref" id="fnref5"><sup>5</sup></a>👇</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="kw">data</span> <span class="dt">CurePeach</span> <span class="fu">=</span> <span class="dt">CurePeach</span></a>
<a class="sourceLine" id="cb18-2" data-line-number="2"></a>
<a class="sourceLine" id="cb18-3" data-line-number="3"><span class="kw">data</span> <span class="dt">CureStickPeachRod</span> <span class="fu">=</span> <span class="dt">CureStickPeachRod</span></a>
<a class="sourceLine" id="cb18-4" data-line-number="4"></a>
<a class="sourceLine" id="cb18-5" data-line-number="5"><span class="kw">instance</span> <span class="dt">Purification</span> <span class="dt">CurePeach</span> <span class="dt">CureStickPeachRod</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb18-6" data-line-number="6">  purificationSpeech _ _ <span class="fu">=</span></a>
<a class="sourceLine" id="cb18-7" data-line-number="7">    [ <span class="st">&quot;届け！愛のメロディ！&quot;</span></a>
<a class="sourceLine" id="cb18-8" data-line-number="8">    , <span class="st">&quot;キュアスティック・ピーチロッド！&quot;</span></a>
<a class="sourceLine" id="cb18-9" data-line-number="9">    , <span class="st">&quot;悪いの悪いの飛んでいけ！&quot;</span></a>
<a class="sourceLine" id="cb18-10" data-line-number="10">    , <span class="st">&quot;プリキュア！ラブサンシャイン・フレッシュ！&quot;</span></a>
<a class="sourceLine" id="cb18-11" data-line-number="11">    ]</a></code></pre></div>
<p>今回作った<code>cure-index.json</code>を最初に思いついたとき、「型クラスから各型のインスタンス宣言を自動で収集して、そこから<code>cure-index.json</code>を作れないだろうか」と、漠然と考えていました。<br />
<span class="ascii">typesafe-precure</span>を作り始める以前、私は<span class="ascii">Ruby</span>で「定義を自動でまとめる問題」に対応した際、<a href="#typesafe-precure2_case-ruby"><span class="ascii">Ruby</span>での場合</a>の節で紹介したような方法を用いていたため、「<span class="ascii">Haskell</span>における、<span class="ascii">Ruby</span>で言うところの<span class="ascii">mix-in</span>されるモジュールは型クラスだ」なんて類推をしていたからかも知れません。<br />
いずれにしても、そんな方法で実現できれば、既存の<span class="ascii">typesafe-precure</span>のモジュールの構造をそのまま使って<span class="ascii">cure-index</span>が作れるので、大変都合がよかったのです。</p>
<p>しかし、残念ながらその方法は、少なくとも単純に<span class="ascii">Template Haskell</span>を使うだけでは不可能であるとすぐ気づきました。<br />
なぜなら、<a href="https://hackage.haskell.org/package/template-haskell-2.12.0.0/docs/Language-Haskell-TH.html#v:reifyInstances"><span class="ascii">Template Haskell</span>のライブラリーが提供する<code>reifyInstances</code>という関数</a>は、インスタンス宣言を取り出したい型を、自前で持ってきて引数として渡さなければならないからです。<br />
したがって、<span class="ascii">Ruby</span>でやっていたように、型クラスのインスタンスを自動でリストアップする、といったことはできません<small>（もちろん、<span class="ascii">Ruby</span>でやった時も完全に自動ではなく、<code>include</code>したクラスが自分でグローバルなリストに追加していたわけですが）</small>。<br />
それならば、自前で<code>import</code>しているモジュールから定義されている型を収集することはできないだろうか、と思って、指定したモジュールで定義されている型を取り出す<span class="ascii">API</span>を探ってみましたが、それも見つかりませんでした。<br />
最もそれらしいことができそうな<a href="https://hackage.haskell.org/package/template-haskell-2.12.0.0/docs/Language-Haskell-TH.html#v:reifyModule"><code>reifyModule</code>という関数</a>が返す<a href="https://hackage.haskell.org/package/template-haskell-2.12.0.0/docs/Language-Haskell-TH.html#t:ModuleInfo"><code>ModuleInfo</code></a>も、保持しているのはあくまでも<code>import</code>している別のモジュールだけであり、いくら<span class="ascii">reify</span>してもモジュールの<strong>中で</strong>定義されている型の情報はとれないのです。</p>
<p>やむなく、私は<span class="ascii">typesafe-precure</span>の構造を改め、現在のような、<span class="ascii">JSON</span>として書き出すデータ構造を元に型と型クラスのインスタンスを自動で定義するような実装にすることとしました。<br />
この変更は依然として続いています。具体的には、今年新しく追加された「キラキラ☆プリキュアアラモード」に登場するプリキュア以外は、まだ従来の構造のままで、中間データの値は定義されていません。<br />
「キラキラ☆プリキュアアラモード」に収録されたプリキュアの情報しか、<code>cure-index.json</code>に記録されていないのはそのためです。</p>
<p>来年のプリキュアハッカソンやプリキュア<span class="ascii">Advent Calendar</span>では、<a href="https://hackage.haskell.org/package/haskell-src-exts"><span class="ascii">haskell-src-exts</span></a>という、<span class="ascii">Haskell</span>で<span class="ascii">Haskell</span>のソースコードをパースするライブラリーを使って、この大きな移行プロジェクトに取り組むことになるかと思います。<br />
<span class="ascii">typesafe-precure</span>には技術的なネタが尽きませんね。</p>
<h1 id="ほかにやればよかったかも知れない方法">ほかにやればよかったかも知れない方法</h1>
<p>同じことを繰り返しますが、これから紹介する方法も含めて「定義を自動でまとめる」問題の解決は、どんな方法を使うにしても、多かれ少なかれ凝ったメタプログラミングのテクニックを使わなければならなくなります。<br />
<a href="#typesafe-precure2_warnings">注意点</a>の節で強調したとおり、そのコードベースを初めて読んだ人が迷子にならないよう配慮することは忘れないでください。</p>
<h2 id="モジュールが持っている特定の名前の関数型を処理する">モジュールが持っている特定の名前の関数・型を処理する</h2>
<p>その方法は、先の節でも紹介した<a href="https://hackage.haskell.org/package/hspec-discover"><code>hspec-discover</code></a>でも実際に行われている方法です。<br />
<code>hspec-discover</code>は、<span class="ascii">GHC</span>のカスタムプリプロセッサーを利用して実行することで、テストが書かれたディレクトリーから<code>Spec</code>という名前で終わるすべてのテスト用モジュールを自動でまとめて、それらをすべて実行する<code>Spec.hs</code>を、自動で生成します。<br />
<code>hspec-discover</code>の場合、<code>ANN</code>のようなアノテーションは一切使用せず、モジュールの名前やモジュールがエクスポートする名前に規約を設けることで「定義をまとめる対象」を検出しています。<br />
このように、<code>ANN</code>のような特別な「印」を着けずに純粋に名前だけで「定義をまとめる対象」を決めることもできます。<br />
実績もあり、同じような方法をとることは非常に簡単そうです。</p>
<p>しかし、個人的には<a href="#typesafe-precure2_warnings">注意点</a>の節でも述べたとおり、「定義をまとめる」対象であることを表す「印」は、「定義をまとめる」対象のファイルの中にあった方が、わかりやすくていいと思います。<br />
確かに<code>hspec-discover</code>のように、公開されていて広く使用されているものであれば、使用したプロジェクトのコードを初めて読む人でも、すぐに理解できる場合が多いでしょう。「何がまとめられるのか」も比較的直感的ですしね。<br />
とはいえ、私が想定している、例えばアプリケーションのプラグインみたいな、もう少しローカルなコードベースである場合、「印」はより「印」らしいものであった方が、手がかりとして気づきやすいのではないかと思います。</p>
<p>😕初めて「まとめられる」コードを含むファイルを目にして、どのように使用されるのか分からず戸惑う<br />
⬇️<br />
🤔<code>{-# ANN MarkedAsFoo #-}</code>という見慣れないコメントを見つけて、それでコードベースを検索してみる<small>（プラグマは多くの<span class="ascii">syntax highlighter</span>で普通のコメントより目立って見えるはずです）</small><br />
⬇️<br />
💡<code>MarkedAsFoo</code>が着いたモジュールを実際に収集してまとめているコードを見つけて、理解する</p>
<p>という流れで「定義を自動でまとめる」機構の存在に気づくのではないでしょうか。</p>
<p>あるいはいっそ<code>ANN</code>も使わずに、こんな内容の<span class="ascii">human-readable</span>なコメントを「印」とするのもよいかも知れません。<br />
プログラムで検出するのもそう難しくはないでしょう。</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="kw">module</span> <span class="dt">Foo.Commands.SampleCommand</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb19-2" data-line-number="2"></a>
<a class="sourceLine" id="cb19-3" data-line-number="3"><span class="co">-- | このコメントが付いたモジュールの &#39;execute&#39; という関数は、</span></a>
<a class="sourceLine" id="cb19-4" data-line-number="4"><span class="co">--   Template Haskellによって、自動的に再利用できるよう収集される。</span></a>
<a class="sourceLine" id="cb19-5" data-line-number="5"><span class="co">--   詳しくは &#39;Foo.Commands` を読まれたし。</span></a></code></pre></div>
<p>これなら、<code>Foo.Commands</code>モジュールにヒントがあることが、すぐに分かります。<br />
<code>hspec-discover</code>のように、<span class="ascii">Template Haskell</span>を使わず直接ファイルシステムにあるファイルを開く方法とも、相性がいいはずです。</p>
<p>ほかにもいろいろな方法を考えましたが、これ以上に有効でもなさそうだし、そろそろ時間もなくなってきたので、この辺でまとめたいと思います。</p>
<h1 id="まとめ">まとめ</h1>
<ul>
<li>「定義を自動でまとめる」問題を解決することにより、モジュールに関わる情報<small>（どのような定義で、どのように使用されるのか）</small>をなるべくモジュールのファイルのみに集約させることができる</li>
<li>「定義を自動でまとめる」問題を解決するには、下記のことをする
<ul>
<li>「まとめたい定義」が書かれているファイルが、どのディレクトリー以下にあるか設定する</li>
<li>「まとめたい定義」が書かれたファイルに、なんらかの印をつける</li>
</ul></li>
<li><span class="ascii">Haskell</span>で「定義を自動でまとめる」問題を解決する場合、<span class="ascii">Template Haskell</span>と<span class="ascii">GHC</span>の<code>ANN</code>プラグマや、<span class="ascii">GHC</span>のカスタムプリプロセッサー<span class="ascii">(</span><code>-F -pgmF</code><span class="ascii">)</span>を組み合わせて使うことによって解決できるが、実際には<span class="ascii">GHC</span>のカスタムプリプロセッサーのみで十分可能
<ul>
<li>まとめる対象や状況に応じて、柔軟にやり方を考えよう</li>
</ul></li>
<li>どのような方法であれ、「定義を自動でまとめる」問題を解決すると、「『「自動でまとめられるファイル』がどのように使用されるか理解しにくくなる」という別の問題が発生するので、気をつけよう</li>
</ul>
<p>それでは<span class="ascii">2018</span>年も<span class="ascii">Template Haskell</span>とプリキュアで<span class="ascii">Happy Hacking!!</span> ❤️❤️❤️</p>
<h1 id="参考にしたページ">参考にしたページ</h1>
<p>（記事中で直接リンクを張っていないもののみ）</p>
<ul>
<li><a href="https://dev.classmethod.jp/server-side/java/various-spring-configuration/">第<span class="ascii">2</span>回 <span class="ascii">Spring</span>の様々な設定記述 – <span class="ascii">Annotation</span>も<span class="ascii">Java</span>もあるんだよ ｜ <span class="ascii">Developers.IO</span></a></li>
<li><a href="https://docs.ruby-lang.org/ja/2.4.0/method/Module/i/included.html"><span class="ascii">instance method Module#included (Ruby 2.4.0)</span></a></li>
<li><a href="https://downloads.haskell.org/~ghc/7.0.3/docs/html/users_guide/pragmas.html#annotation-pragmas"><span class="ascii">GHC User</span>’<span class="ascii">s Guide</span>の「<span class="ascii">7.13. Pragmas</span>」</a></li>
</ul>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>実際には「タイプセーフプリキュアそのものを開発する上で見つかった問題」というよりタイプセーフプリキュアの開発をすることで問題解決の実験をしている、といった方が正しいのは内緒。<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>もう少し正確に言うと、自動的に設定したいフィールド（あるいはコンストラクターの引数）に<code>@Autowired</code>というアノテーションが必要ですが、今回の話では本質的ではないので割愛しています。<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>もちろん、数年前流行ったあのライトノベルのパロディーではありません。<a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>誰にも聞かれてはいませんが勝手にお話ししますと、<code>ACME.PreCure.Textbook</code>という名前は、<a href="https://dic.pixiv.net/a/%E3%83%97%E3%83%AA%E3%82%AD%E3%83%A5%E3%82%A2%E6%95%99%E7%A7%91%E6%9B%B8">プリキュアの教科書</a>から来ています。<a href="#fnref4" class="footnote-back">↩</a></p></li>
<li id="fn5"><p>現在もそうですが、実際には<span class="ascii">Template Haskell</span>で定義されているので、<span class="ascii">typesafe-precure</span>のリポジトリーにはこれと全く同じコードはありません。<a href="#fnref5" class="footnote-back">↩</a></p></li>
</ol>
</section>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2017/windows-gotchas.html">WindowsでHaskellを扱う時によく遭遇するエラーと対処法</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/no-stack-build.html" style="margin-left: auto;">Haskell-jp Blogへの投稿が簡単になりました！</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>Haskell-jp Blogへの投稿が簡単になりました！</title>
    <link href="https://haskell.jp/blog/posts/2017/no-stack-build.html" />
    <id>https://haskell.jp/blog/posts/2017/no-stack-build.html</id>
    <published>2017-11-27T00:00:00Z</published>
    <updated>2017-11-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>こんにちは。<span class="ascii">Haskell-jp</span>です。<br />
ちょっと間が空いてしまいましたが、久々の投稿です。<span class="ascii">Haskell</span>自体の話と関係なくてすみません！</p>
<p>内容としてはタイトルのとおりなのですが、<a href="https://github.com/haskell-jp/blog/pull/51">こちら</a>や<a href="https://github.com/haskell-jp/blog/pull/53">こちら</a>をはじめとする<span class="ascii">Pull request</span>により、当ブログの記事の投稿が簡単になりました！<br />
具体的には、下記の点を改善しております。</p>
<ul>
<li>記事を作成して<span class="ascii">Pull request</span>を送った際、<span class="ascii">[Merge pull request]</span>ボタンを押して<span class="ascii">master</span>ブランチにマージしただけで自動で記事が公開されるようになりました！</li>
<li><a href="https://circleci.com/docs/1.0/build-artifacts/"><span class="ascii">CircleCI</span>の<span class="ascii">artifacts</span>機能</a>を利用することにより、ビルド結果から実際に公開される際のページをプレビューできるようにしました！
<ul>
<li><em><span class="ascii">https://XX-XXXXXXXX-gh.circle-artifacts.com/0/home/ubuntu/blog/generated-site</span></em> みたいな<span class="ascii">URL</span>で見られるようになります（具体的なページはビルド結果ごとに異なるので、適宜ご案内します）。</li>
</ul></li>
</ul>
<p>結果、これまで<span class="ascii">Haskell-jp Blog</span>に投稿する際に問題となっていた、下記の点が解消されました。</p>
<ul>
<li>投稿する人が自分で<code>make</code>などを実行しなければ、<span class="ascii">markdown</span>で書いた記事がどのような<span class="ascii">HTML</span>に変換されるかわからなかった。</li>
<li>権限を持った人が<code>make deploy</code>するまで、記事を<span class="ascii">master</span>ブランチにマージしても公開されなかった。</li>
</ul>
<p>以上を踏まえた、<span class="ascii">Haskell-jp Blog</span>の投稿手順については、<a href="https://github.com/haskell-jp/blog#readme"><span class="ascii">README</span></a>をご覧ください。<br />
基本的に投稿する人は、<strong><span class="ascii">Markdown</span>で記事を書いて、<span class="ascii">Pull request</span>を送るだけ</strong>です！</p>
<p>それでは、これからも<span class="ascii">Haskell-jp Blog</span>をよろしくお願いします！ <span class="ascii">hask(_ _)eller  </span> なお、現在<span class="ascii">Haskell-jp Blog</span>では、<a href="https://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017</span></a>（と<a href="https://qiita.com/advent-calendar/2017/haskell2">その<span class="ascii">2</span></a>、<a href="https://qiita.com/advent-calendar/2017/haskell3">その<span class="ascii">3</span></a>）の記事を特に精力的に募集しています。 <span class="ascii"> </span> ぜひこの機会に<span class="ascii">Haskell-jp Blog</span>に記事を投稿してみませんか？</p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2017/typesafe-precure2.html">タイプセーフプリキュア！を支える技術 その2</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/13-about-kind-system-part2.html" style="margin-left: auto;">Haskellの種(kind)について (Part 2)</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>Haskellの種(kind)について (Part 2)</title>
    <link href="https://haskell.jp/blog/posts/2017/13-about-kind-system-part2.html" />
    <id>https://haskell.jp/blog/posts/2017/13-about-kind-system-part2.html</id>
    <published>2017-09-18T00:00:00Z</published>
    <updated>2017-09-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p><span class="ascii">Haskell</span>には種<span class="ascii">(kind)</span>という仕組みがあります。大雑把に言ってしまえば、「型の型」を実現する仕組みです。この仕組みについて、あまり情報が出回っていないようなので、解説記事を残しておこうと思います。なお、前編と後編に分かれていて、この記事は後編になります。前編は<a href="10-about-kind-system-part1.html">こちら</a>になります。</p>
<p>この記事は、<a href="http://lambdaconf.us/downloads/documents/lambdaconf_slfp.pdf"><span class="ascii">Ladder of Functional Programming</span></a> <span class="ascii">(</span><a href="http://qiita.com/lotz/items/0d68c8440d1f362d0c32">日本語訳</a><span class="ascii">)</span>の <strong><span class="ascii">FIRE LUBLINE(ADVANCED BEGINNER)</span></strong> を対象に、<a href="10-about-kind-system-part1.html"><span class="ascii">Part 1</span></a>の続きとして、種に付随する<span class="ascii">GHC</span>言語拡張やパッケージを紹介するものです。</p>
<p>なお、特に断らない限り、対象として<span class="ascii">GHC8</span>系を設定しています。<code>stack</code>を使ってる方は<code>resolver</code>を<span class="ascii">LTS Haskell 7</span>以降に設定しておくことを推奨します。</p>
<h2 id="様々な種">様々な種</h2>
<h3 id="型制約の種">型制約の種</h3>
<p><a href="10-about-kind-system-part1.html">前回の記事</a>では、種の基本的な仕組みを紹介しました。全てのデータ型は<code>*</code>という種を持っており、データ宣言は<code>*</code>の種を持つ型を作る型コンストラクタを定義するのでした<span class="ascii">:</span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">newtype</span> <span class="dt">WrappedInt</span> <span class="fu">=</span> <span class="dt">WrappedInt</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">WrappedInt</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"><span class="dt">WrappedInt</span><span class="ot"> ::</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">Tag</span> a <span class="fu">=</span> <span class="dt">Tag</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">Tag</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6"><span class="dt">Tag</span><span class="ot"> ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span></a></code></pre></div>
<p>さて、<span class="ascii">Haskell</span>標準には上のようなデータ型を表す<code>*</code>と、型コンストラクタを表す<code>k1 -&gt; k2</code>という形の種<span class="ascii">(</span>例えば、<code>* -&gt; *</code>や<code>* -&gt; (* -&gt; *)</code>など<span class="ascii">)</span>しかありませんでした。<span class="ascii">GHC</span>では、他にもいくつか種を導入しています。今日は、その幾つかを紹介していきます。一つ目が、型制約を表す種<code>Constraint</code>です。この種を伴う仕組みは<code>ConstraintKinds</code>拡張により導入できます。</p>
<p><span class="ascii">Haskell</span>の型上には、データ型や型コンストラクタの他にも、型制約という登場人物がいます。型制約は名前の通り、型の制約が書けるようにするものです。以下の関数をみてください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">minByOrd ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb2-2" data-line-number="2">minByOrd x y <span class="fu">=</span> <span class="kw">if</span> x <span class="fu">&lt;</span> y <span class="kw">then</span> x <span class="kw">else</span> y</a></code></pre></div>
<p>この関数<code>minByOrd</code>は、型<code>a</code>が順序を持つ<span class="ascii">(</span><code>Ord</code>クラスのインスタンスである<span class="ascii">)</span>という制約を満たしている時、二つの引数のうち小さい方を<code>Ord</code>のメソッド<code>&lt;</code>を使用して返します。</p>
<p>型制約は、型クラスを使うことで作ることができます。例えば、ある型がデフォルトの値を持つという制約は、以下のように書けます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">class</span> <span class="dt">HasDefault</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="ot">  defaultValue ::</span> a</a></code></pre></div>
<p>この型クラスを使うことで、デフォルトの値を持つ型制約を満たしている型上では、<code>defaultValue</code>メソッドを使用することができるようになります。例えば、以下のようにです<span class="ascii">:</span></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">fromMaybe ::</span> <span class="dt">HasDefault</span> a <span class="ot">=&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb4-2" data-line-number="2">fromMaybe (<span class="dt">Just</span> x) <span class="fu">=</span> x</a>
<a class="sourceLine" id="cb4-3" data-line-number="3">fromMaybe <span class="dt">Nothing</span>  <span class="fu">=</span> defaultValue</a></code></pre></div>
<p>この関数は、型<code>a</code>が<code>HasDefault a</code>という型制約を満たしているならば、<code>Maybe a</code>の値をパターンマッチし、中身が<code>Just</code>ならそのまま<code>Just</code>を外して値を返し、<code>Nothing</code>ならデフォルト値を<code>defaultValue</code>メソッドを使用して、返します。</p>
<p>ここからが本題です。実は<span class="ascii">GHC</span>上では、型制約にも種が割り当てられています。見てみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">HasDefault</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="dt">HasDefault</span><span class="ot"> ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></a></code></pre></div>
<p><code>HasDefault</code>型クラスは、<code>*</code>の種を持つ型を受け取り、<code>Constraint</code>の種を持つ型制約を返します。<code>Constraint</code>は<span class="ascii">GHC</span>が導入している、型制約を表す種です。型制約は、<span class="ascii">GHC</span>上ではこの <strong>型制約種<code>Constraint</code></strong> を持ちます。つまり、<code>HasDefault :: * -&gt; Constraint</code>は、<code>*</code>の種の型、つまりデータ型を一つ受け取り、型制約になるような型上の関数になります。実際に、データ型を適用して型制約にしてみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">HasDefault</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="dt">HasDefault</span> <span class="dt">Bool</span><span class="ot"> ::</span> <span class="dt">Constraint</span></a></code></pre></div>
<p>適用結果は、ちゃんと<code>Constraint</code>の種を持っています。ここで、種の計算では型の計算は行われないことに注意してください！ <code>kind</code>コマンドは、型の計算は行わないのでした。私たちは、<code>Bool</code>を<code>HasDefault</code>のインスタンスにしていないため、実際にはこの型制約は満たされません。型の計算を実際に行ってみましょう。上で定義した<code>fromMaybe</code>を実際に<code>Bool</code>型に使ってみます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span> fromMaybe <span class="fu">$</span> <span class="dt">Just</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2"></a>
<a class="sourceLine" id="cb7-3" data-line-number="3"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">1</span><span class="fu">:</span><span class="dv">1</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">    • <span class="dt">No</span> <span class="kw">instance</span> for (<span class="dt">HasDefault</span> <span class="dt">Bool</span>)</a>
<a class="sourceLine" id="cb7-5" data-line-number="5">        arising from a use <span class="kw">of</span> ‘fromMaybe’</a>
<a class="sourceLine" id="cb7-6" data-line-number="6">    • <span class="dt">In</span> the expression<span class="fu">:</span> fromMaybe <span class="fu">$</span> <span class="dt">Just</span> <span class="dt">True</span></a></code></pre></div>
<p>「<code>HasDefault</code>は<code>Bool</code>に対してインスタンスを持っていない」と型エラーになっていることが分かります。このように型の計算は<code>type</code>コマンドで確かめることができるのでした。これらの型計算は、もう少し直接的に確かめることもできます。次を見てください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XFlexibleContexts</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span><span class="ot"> undefined ::</span> <span class="dt">HasDefault</span> <span class="dt">Bool</span> <span class="ot">=&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3"></a>
<a class="sourceLine" id="cb8-4" data-line-number="4"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">1</span><span class="fu">:</span><span class="dv">1</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">    <span class="dt">No</span> <span class="kw">instance</span> for (<span class="dt">HasDefault</span> <span class="dt">Bool</span>) arising from a use <span class="kw">of</span> ‘it’</a></code></pre></div>
<p>このように、型の計算だけを行わせる場合、<code>undefined</code>を使用するのが便利です。<span class="ascii">Haskell</span>標準では、型制約はあまり柔軟には書けません。具体的な型を伴う上のような制約も書けないため、<code>FlexibleContexts</code>拡張を使用することで書けるようにしています。上の型表記で登場する、<code>=&gt;</code>という表記は、左で指定された型制約を満たしているならば右で指定された型付けの関数になる、という意味を持っています。つまり、型上の演算子として考えるなら、<code>(=&gt;) :: Constraint -&gt; * -&gt; *</code>という種になります。なので、例えば以下のような型表記は、種の辻褄が合わなくなります<span class="ascii">:</span></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">Int</span> <span class="ot">=&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2"></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">1</span><span class="fu">:</span><span class="dv">1</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4">    • <span class="dt">Expected</span> a constraint, but ‘<span class="dt">Int</span>’ has kind ‘<span class="fu">*</span>’</a>
<a class="sourceLine" id="cb9-5" data-line-number="5">    • <span class="dt">In</span> the <span class="kw">type</span> ‘<span class="dt">Int</span> <span class="ot">=&gt;</span> <span class="dt">Bool</span>’</a>
<a class="sourceLine" id="cb9-6" data-line-number="6"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">HasDefault</span> <span class="ot">=&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7"></a>
<a class="sourceLine" id="cb9-8" data-line-number="8"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">1</span><span class="fu">:</span><span class="dv">1</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb9-9" data-line-number="9">    • <span class="dt">Expecting</span> one more argument to ‘<span class="dt">HasDefault</span>’</a>
<a class="sourceLine" id="cb9-10" data-line-number="10">      <span class="dt">Expected</span> a constraint, but ‘<span class="dt">HasDefault</span>’ has kind ‘<span class="fu">*</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span>’</a>
<a class="sourceLine" id="cb9-11" data-line-number="11">    • <span class="dt">In</span> the <span class="kw">type</span> ‘<span class="dt">HasDefault</span> <span class="ot">=&gt;</span> <span class="dt">Bool</span>’</a></code></pre></div>
<p><code>kind</code>コマンドによって、種が合わないとエラーになっていることが分かります。残念ながら、<code>=&gt;</code>は実際には型演算子ではなく、<code>(=&gt;)</code>というように型関数として扱うことはできません。ですが、それは表記上の問題であり、確かに種の計算の際、型制約を受け取る型演算子として、<code>Constraint</code>の種を持つか検査が行われていることは分かるでしょう。</p>
<p>さて、今までは型制約種<code>Constraint</code>について、<span class="ascii">GHCi</span>上で色々試しながら見てきました。型制約種に関しての雰囲気は分かってもらえたと思います。型制約種<code>Constraint</code>をもう少し詳しく見ていきましょう。以下を見てください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">SimpleData</span> a <span class="fu">=</span> <span class="dt">SimpleData</span> a</a>
<a class="sourceLine" id="cb10-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">SimpleData</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="dt">SimpleData</span><span class="ot"> ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">class</span> <span class="dt">SimpleClass</span> a <span class="kw">where</span><span class="ot"> simpleMethod ::</span> a <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb10-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">SimpleClass</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6"><span class="dt">SimpleClass</span><span class="ot"> ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></a></code></pre></div>
<p>データ宣言と型クラス宣言を並べてみました。この二つはよく似ています。</p>
<ul>
<li>データ宣言は、<code>*</code>という種の型になるような型コンストラクタ<code>SimpleData :: * -&gt; *</code>を作り、<code>SimpleData :: a -&gt; SimpleData</code>という値コンストラクタを作ります。</li>
<li>型クラス宣言は、<code>Constraint</code>という種の型制約になるような<code>SimpleClass :: * -&gt; Constraint</code>を作り、<code>simpleMethod :: SimpleClass a =&gt; a -&gt; a</code>というような関数を作ります。</li>
</ul>
<p>作られるものがそれぞれ違いますが、両方型の世界に一つの型関数、値の世界に関数を作るわけです。型クラスの方をデータ宣言に合わせるとしたら、型クラスは型制約コンストラクタとメソッドを作るものと言えるかもしれません。型の世界だけでの話なら、データ宣言は型コンストラクタを、型クラスは型制約コンストラクタを単に作るだけの構文ということになります。ではここで、データ型と型制約の対比を表にしてみましょう。</p>
<table>
<thead>
<tr class="header">
<th>種</th>
<th>表現される型</th>
<th>定義方法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>*</code></td>
<td>データ型</td>
<td>データ宣言<span class="ascii">(</span><code>data C a = ...</code><span class="ascii">)</span></td>
</tr>
<tr class="even">
<td><code>Constraint</code></td>
<td>型制約</td>
<td>型クラス宣言<span class="ascii">(</span><code>class C a where ...</code><span class="ascii">)</span></td>
</tr>
</tbody>
</table>
<p>両者はそれぞれ特別な意味を与えられています。実際、データ型が値を持ち<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>、それによって型注釈が書けるように、型制約は<code>=&gt;</code>という特別に型制約を計算するような型上の構文を持っています。ですが、逆に言えば特別なのはそれだけで、それ以外に両者の違いはありません。例えば、<code>Proxy</code>型は種多相化されているので、型制約や型制約コンストラクタ<span class="ascii">(</span>型クラス<span class="ascii">)</span>を渡すこともできます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">Data.Proxy</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">Proxy</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3"><span class="dt">Proxy</span><span class="ot"> ::</span> k <span class="ot">-&gt;</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span> <span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">Monoid</span> <span class="dt">Bool</span>)</a>
<a class="sourceLine" id="cb11-5" data-line-number="5"><span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">Monoid</span> <span class="dt">Bool</span>)<span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">Monoid</span> <span class="dt">Bool</span>)</a>
<a class="sourceLine" id="cb11-6" data-line-number="6"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span> <span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Monoid</span></a>
<a class="sourceLine" id="cb11-7" data-line-number="7"><span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Monoid</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Monoid</span></a></code></pre></div>
<p><code>=&gt;</code>を使用していないので、型制約の計算は行われないことに注意してください！ また、<code>Proxy</code>型コンストラクタは、それぞれ以下のように特殊化されます<span class="ascii">:</span></p>
<ul>
<li><code>Proxy :: Proxy (Monoid Bool)</code>の場合は、<code>Proxy :: Constraint -&gt; *</code></li>
<li><code>Proxy :: Proxy Monoid</code>の場合は、<code>Proxy :: (* -&gt; Constraint) -&gt; *</code></li>
</ul>
<p>では、この<code>Proxy</code>で型制約を受け取り、型制約の計算だけを行うような関数を作って使って見ましょう。その関数は、以下のように作ることができます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XConstraintKinds</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">Data.Proxy</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- 型制約計算を行う関数を定義</span></a>
<a class="sourceLine" id="cb12-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>{</a>
<a class="sourceLine" id="cb12-5" data-line-number="5"><span class="ot">    evalConstraint ::</span> a <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> ()</a>
<a class="sourceLine" id="cb12-6" data-line-number="6">    evalConstraint _ <span class="fu">=</span> ()</a>
<a class="sourceLine" id="cb12-7" data-line-number="7">    <span class="fu">:</span>}</a>
<a class="sourceLine" id="cb12-8" data-line-number="8"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- この段階では、まだ型制約計算されない!</span></a>
<a class="sourceLine" id="cb12-9" data-line-number="9"><span class="fu">&gt;&gt;&gt;</span> <span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">Monoid</span> <span class="dt">Bool</span>)</a>
<a class="sourceLine" id="cb12-10" data-line-number="10"><span class="dt">Proxy</span></a>
<a class="sourceLine" id="cb12-11" data-line-number="11"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- 型制約計算をする関数に適用</span></a>
<a class="sourceLine" id="cb12-12" data-line-number="12"><span class="fu">&gt;&gt;&gt;</span> evalConstraint (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">Monoid</span> <span class="dt">Bool</span>))</a>
<a class="sourceLine" id="cb12-13" data-line-number="13"></a>
<a class="sourceLine" id="cb12-14" data-line-number="14"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">12</span><span class="fu">:</span><span class="dv">1</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb12-15" data-line-number="15">    • <span class="dt">No</span> <span class="kw">instance</span> for (<span class="dt">Monoid</span> <span class="dt">Bool</span>)</a>
<a class="sourceLine" id="cb12-16" data-line-number="16">        arising from a use <span class="kw">of</span> ‘evalConstraint’</a>
<a class="sourceLine" id="cb12-17" data-line-number="17">    • <span class="dt">In</span> the expression<span class="fu">:</span> evalConstraint (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">Monoid</span> <span class="dt">Bool</span>))</a>
<a class="sourceLine" id="cb12-18" data-line-number="18">      <span class="dt">In</span> an equation for ‘it’<span class="fu">:</span></a>
<a class="sourceLine" id="cb12-19" data-line-number="19">          it <span class="fu">=</span> evalConstraint (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">Monoid</span> <span class="dt">Bool</span>))</a>
<a class="sourceLine" id="cb12-20" data-line-number="20"><span class="fu">&gt;&gt;&gt;</span> evalConstraint (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">Monoid</span> <span class="dt">String</span>))</a>
<a class="sourceLine" id="cb12-21" data-line-number="21">()</a></code></pre></div>
<p>やっと、<code>ConstraintKinds</code>拡張の登場です。<code>ConstraintKinds</code>拡張は、型制約に関する<span class="ascii">Haskell</span>標準の制限を幾つか取り払う拡張です。どのようなことが可能になるかは後で紹介するとして、今は上の関数の使い方に注目しましょう。この例のように、型制約は<code>Proxy</code>型で持ち回し<code>=&gt;</code>で任意のタイミングで型制約計算を行うといったことも可能です。面白いですね。</p>
<p>上の<code>Proxy</code>を使った例から明らかですが、もちろんデータ宣言時に種注釈を使うことで型制約を受け取るようなデータ型を作ることもできるわけです。そして、型制約を受け取るような型クラスも作ることができます。次の例を見てください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XKindSignatures</span> <span class="fu">-</span><span class="dt">XFlexibleInstances</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Exts</span> (<span class="dt">Constraint</span>)</a>
<a class="sourceLine" id="cb13-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">class</span> <span class="dt">AConstraint</span> (<span class="ot">c ::</span> <span class="dt">Constraint</span>)</a>
<a class="sourceLine" id="cb13-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">AConstraint</span></a>
<a class="sourceLine" id="cb13-5" data-line-number="5"><span class="dt">AConstraint</span><span class="ot"> ::</span> <span class="dt">Constraint</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></a>
<a class="sourceLine" id="cb13-6" data-line-number="6"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">instance</span> <span class="dt">AConstraint</span> (<span class="dt">Monad</span> <span class="dt">Maybe</span>)</a></code></pre></div>
<p><code>FlexibleInstances</code>拡張は、<code>FlexibleContexts</code>拡張と同じような拡張で、<code>FlexibleContexts</code>は型制約の書き方の制限を、<code>FlexibleInstances</code>拡張はインスタンスの書き方の制限をそれぞれ取り払う拡張です。また、<code>Constraint</code>種は<code>GHC.Exts</code>モジュールに入っていて、使用する際はこのモジュールを<code>import</code>する必要があります。これらを使って、上のようにすれば、型制約の分類分けすらすることができるようになります。</p>
<p>他にも<code>Constraint</code>に関連する特殊な型上の演算子があります。普段気にも留めていなかったと思いますが、型制約のペアです。<span class="ascii">GHC</span>上では、以下のような型制約が書けます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- 常に型制約は満たされる</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span><span class="ot"> undefined ::</span> () <span class="ot">=&gt;</span> a</a>
<a class="sourceLine" id="cb14-3" data-line-number="3">undefined<span class="ot"> ::</span> () <span class="ot">=&gt; a ::</span> a</a>
<a class="sourceLine" id="cb14-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- 二つの型制約が満たされる場合に、満たされる</span></a>
<a class="sourceLine" id="cb14-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span><span class="ot"> undefined ::</span> (<span class="dt">Monad</span> m, <span class="dt">Monoid</span> a) <span class="ot">=&gt;</span> m a</a>
<a class="sourceLine" id="cb14-6" data-line-number="6">undefined<span class="ot"> ::</span> (<span class="dt">Monad</span> m, <span class="dt">Monoid</span> a) <span class="ot">=&gt;</span> m a</a>
<a class="sourceLine" id="cb14-7" data-line-number="7"><span class="ot">  ::</span> (<span class="dt">Monoid</span> a, <span class="dt">Monad</span> m) <span class="ot">=&gt;</span> m a</a>
<a class="sourceLine" id="cb14-8" data-line-number="8"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- 以下の二つは同じ</span></a>
<a class="sourceLine" id="cb14-9" data-line-number="9"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XConstraintKinds</span></a>
<a class="sourceLine" id="cb14-10" data-line-number="10"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span><span class="ot"> undefined ::</span> (<span class="dt">Monad</span> m, <span class="dt">Monoid</span> a, <span class="dt">Show</span> a) <span class="ot">=&gt;</span> m a</a>
<a class="sourceLine" id="cb14-11" data-line-number="11">undefined<span class="ot"> ::</span> (<span class="dt">Monad</span> m, <span class="dt">Monoid</span> a, <span class="dt">Show</span> a) <span class="ot">=&gt;</span> m a</a>
<a class="sourceLine" id="cb14-12" data-line-number="12"><span class="ot">  ::</span> (<span class="dt">Show</span> a, <span class="dt">Monoid</span> a, <span class="dt">Monad</span> m) <span class="ot">=&gt;</span> m a</a>
<a class="sourceLine" id="cb14-13" data-line-number="13"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span><span class="ot"> undefined ::</span> ((<span class="dt">Monad</span> m, <span class="dt">Monoid</span> a), <span class="dt">Show</span> a) <span class="ot">=&gt;</span> m a</a>
<a class="sourceLine" id="cb14-14" data-line-number="14">undefined<span class="ot"> ::</span> ((<span class="dt">Monad</span> m, <span class="dt">Monoid</span> a), <span class="dt">Show</span> a) <span class="ot">=&gt;</span> m a</a>
<a class="sourceLine" id="cb14-15" data-line-number="15"><span class="ot">  ::</span> (<span class="dt">Show</span> a, <span class="dt">Monoid</span> a, <span class="dt">Monad</span> m) <span class="ot">=&gt;</span> m a</a></code></pre></div>
<p>最後の例では<code>ConstraintKinds</code>拡張を使用していますが、これについては最後にどんな拡張なのか説明しましょう。今、注目してもらいたいのは、型制約のペアについてです。普段何気なく使っていると思いますが、これらも一種の型制約の演算子と見ることができるわけです。注意してもらいたいのが、この演算子はタプル型と同じ形式だということです。次を見てください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind ()</a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="ot">() ::</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind (<span class="dt">Bool</span>, <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb15-4" data-line-number="4">(<span class="dt">Bool</span>, <span class="dt">Int</span>)<span class="ot"> ::</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind (<span class="dt">Monad</span> <span class="dt">Maybe</span>, <span class="dt">Monoid</span> <span class="dt">Bool</span>)</a>
<a class="sourceLine" id="cb15-6" data-line-number="6">(<span class="dt">Monad</span> <span class="dt">Maybe</span>, <span class="dt">Monoid</span> <span class="dt">Bool</span>)<span class="ot"> ::</span> <span class="dt">Constraint</span></a>
<a class="sourceLine" id="cb15-7" data-line-number="7"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind (<span class="dt">Bool</span>, <span class="dt">Monad</span> <span class="dt">Maybe</span>)</a>
<a class="sourceLine" id="cb15-8" data-line-number="8"></a>
<a class="sourceLine" id="cb15-9" data-line-number="9"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">1</span><span class="fu">:</span><span class="dv">8</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb15-10" data-line-number="10">    • <span class="dt">Expected</span> a <span class="kw">type</span>, but ‘<span class="dt">Monad</span> <span class="dt">Maybe</span>’ has kind ‘<span class="dt">Constraint</span>’</a>
<a class="sourceLine" id="cb15-11" data-line-number="11">    • <span class="dt">In</span> the <span class="kw">type</span> ‘(<span class="dt">Bool</span>, <span class="dt">Monad</span> <span class="dt">Maybe</span>)’</a>
<a class="sourceLine" id="cb15-12" data-line-number="12"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind (<span class="dt">Monad</span> <span class="dt">Maybe</span>, <span class="dt">Bool</span>)</a>
<a class="sourceLine" id="cb15-13" data-line-number="13"></a>
<a class="sourceLine" id="cb15-14" data-line-number="14"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">1</span><span class="fu">:</span><span class="dv">15</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb15-15" data-line-number="15">    • <span class="dt">Expected</span> a constraint, but ‘<span class="dt">Bool</span>’ has kind ‘<span class="fu">*</span>’</a>
<a class="sourceLine" id="cb15-16" data-line-number="16">    • <span class="dt">In</span> the <span class="kw">type</span> ‘(<span class="dt">Monad</span> <span class="dt">Maybe</span>, <span class="dt">Bool</span>)’</a></code></pre></div>
<p><code>()</code>は、ユニット型の方が優先されています。<code>(,)</code>は、最初に書いた型の種によって、受け取る種が左右されていることが分かりますね。型制約のペアは、<code>(,) (Monad Maybe) (Monoid Bool)</code>というような表記は許容されていませんが、それ以外はあまりタプル型と変わりありません。異なるのは、タプル型が幾つかのデータ型を受け取って一つのデータ型となるのに対し、型制約のペアは型制約を幾つか受け取りそれを全て満たすような型制約になるということです。</p>
<p>最後に<code>ConstraintKinds</code>拡張をきちんと紹介しておきましょう。<code>ConstraintKinds</code>拡張は、次のようなことを可能にしてくれる拡張です。</p>
<ul>
<li><p>型エイリアスと同じ構文で、型制約コンストラクタのエイリアスを書くことができるようになる。</p>
<p>つまり、次のようなことが可能になります<span class="ascii">:</span> <span class="ascii">```haskell</span> <span class="ascii">{-# LANGUAGE ConstraintKinds #-}</span></p>
<p>– 型制約のエイリアス <span class="ascii">type MonMonad m a = (Monoid (m a), Monad m)</span></p>
<p>– 型制約コンストラクタのエイリアス <span class="ascii">type Mappable = Functor</span> <span class="ascii">```</span></p></li>
<li><p>型制約種<code>Constraint</code>を持つ型を、型制約として使用できるようにする。</p>
<p>こちらは、あまり実感が湧かないかもしれません。デフォルトで、<span class="ascii">GHC</span>では型クラスなどを型制約として扱う、つまり<code>=&gt;</code>に渡すことができます。ですが、<code>Constraint</code>の種を持つ型制約変数などを渡すことはできません<span class="ascii">:</span> <span class="ascii">```haskell</span> <span class="ascii">&gt;&gt;&gt; import Data.Proxy</span> <span class="ascii">&gt;&gt;&gt;</span> – 型クラスを型制約として使っているため、問題ない <span class="ascii">&gt;&gt;&gt; :type undefined :: Monad m =&gt; m a</span> <span class="ascii">undefined :: Monad m =&gt; m a :: Monad m =&gt; m a</span> <span class="ascii">&gt;&gt;&gt;</span> – 型制約変数は、型制約として扱えない <span class="ascii">&gt;&gt;&gt; :type undefined :: a =&gt; Proxy a</span></p>
<p><interactive><span class="ascii">:1:14: error:</span> • <span class="ascii">Illegal constraint: a (Use ConstraintKinds to permit this)</span> • <span class="ascii">In an expression type signature: a =&gt; Proxy a</span> <span class="ascii">In the expression: undefined :: a =&gt; Proxy a</span> <span class="ascii">&gt;&gt;&gt; :set -XConstraintKinds</span> <span class="ascii">&gt;&gt;&gt;</span> – 型制約種を持つものなら、型制約として扱えるようになる <span class="ascii">&gt;&gt;&gt; :type undefined :: a =&gt; Proxy a</span> <span class="ascii">undefined :: a =&gt; Proxy a :: a =&gt; Proxy a</span> <span class="ascii">``</span><code></code><span class="ascii">((Monad m, Monoid a), Show a)</span><code>などが標準で扱えないのも、</code><span class="ascii">(Monad m, Monoid a)</span><code>という形式のものは型制約種を持ってはいますが、標準で許容されている形式ではないからです。このような場合に、より柔軟に扱えるようにしてくれる拡張が、</code><span class="ascii">ConstraintKinds`</span>拡張です。</p></li>
</ul>
<p>型制約種<code>Constraint</code>について、馴染んでもらえたでしょうか？普段、この種や<code>ConstraintKinds</code>を明示的に使うような場面は少ないかもしれませんね。もし、型制約種について興味を持ったなら、<a href="http://hackage.haskell.org/package/constraints"><span class="ascii">constraints</span></a>というパッケージを見てみるのが良いでしょう。このパッケージは、型制約プログラミングに関する幾つかの有用な<span class="ascii">API</span>を提供しています。</p>
<h3 id="データ型の昇格">データ型の昇格</h3>
<p>今までは、<code>*</code>や<code>Constraint</code>、<code>k1 -&gt; k2</code>といった、予め用意された特別な種を紹介してきました。<span class="ascii">GHC</span>上で、私たちが種を定義するような方法も、実は用意されています。それが、<code>DataKinds</code>という拡張です。<code>DataKinds</code>は基本的には簡単な拡張です。</p>
<p>私たちは、以下のようなデータ宣言を使ってデータ型を定義することができました<span class="ascii">:</span></p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="kw">data</span> <span class="dt">SimpleData</span> a <span class="fu">=</span> <span class="dt">SimpleData</span> a</a></code></pre></div>
<p>このデータ宣言は、</p>
<ul>
<li><code>SimpleData :: * -&gt; *</code>な、<code>SimpleData a</code>という<strong>データ型</strong>を作るような型コンストラクタ</li>
<li><code>SimpleData :: a -&gt; SimpleData a</code>な、<code>SimpleData a</code>という<strong>データ型の値</strong>を作る値コンストラクタ</li>
</ul>
<p>をそれぞれ作るのでした。<code>DataKinds</code>は、このそれぞれのコンストラクタを、一つ上の層に昇格させることができるようになる拡張です。どういうことかは、見てみた方が早いと思うので、<span class="ascii">GHCi</span>上でいくつか試してみます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- 単純なデータ型を作成</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">SimpleData</span> a <span class="fu">=</span> <span class="dt">SimpleData</span> a</a>
<a class="sourceLine" id="cb17-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- DataKinds拡張有効化</span></a>
<a class="sourceLine" id="cb17-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XDataKinds</span></a>
<a class="sourceLine" id="cb17-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- 通常のコンストラクタ</span></a>
<a class="sourceLine" id="cb17-6" data-line-number="6"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">SimpleData</span></a>
<a class="sourceLine" id="cb17-7" data-line-number="7"><span class="dt">SimpleData</span><span class="ot"> ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb17-8" data-line-number="8"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span> <span class="dt">SimpleData</span></a>
<a class="sourceLine" id="cb17-9" data-line-number="9"><span class="dt">SimpleData</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> <span class="dt">SimpleData</span> a</a>
<a class="sourceLine" id="cb17-10" data-line-number="10"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- DataKindsによって、一つ上の層に昇格させたコンストラクタ</span></a>
<a class="sourceLine" id="cb17-11" data-line-number="11"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;SimpleData</span></a>
<a class="sourceLine" id="cb17-12" data-line-number="12"><span class="ch">&#39;SimpleData :: a -&gt; SimpleData a</span></a></code></pre></div>
<p>最後の実行例に注目してください。ここで書かれている<code>SimpleData</code>は値コンストラクタのものです。先頭に<code>'</code><span class="ascii">(</span>シングルクォーテーション<span class="ascii">)</span>がついていますが、何より注目すべきなのは、種の表示にもやはり<code>SimpleData</code>というものが現れていることです。これが一つ上の層に昇格させるということになります。<code>DataKinds</code>拡張は、以下のようなものを提供する拡張になります<span class="ascii">:</span></p>
<ul>
<li>データ型の型コンストラクタを、種上で書けるようにする<span class="ascii">(</span><strong>種への昇格</strong><span class="ascii">)</span></li>
<li>データ型の値コンストラクタを、先頭に<code>'</code>を付けることにより型上で書けるようにする<span class="ascii">(</span><strong>型への昇格</strong><span class="ascii">)</span></li>
</ul>
<p>上の実行例では、<code>'SimpleData :: a -&gt; SimpleData a</code>の、</p>
<ul>
<li>種の表記に現れているものが、<strong>型コンストラクタ</strong><code>SimpleData :: * -&gt; *</code>を昇格したもの</li>
<li><code>'SimpleData</code>が、<strong>値コンストラクタ</strong><code>SimpleData :: a -&gt; SimpleData a</code>を昇格したもの</li>
</ul>
<p>になります。値コンストラクタ<code>SimpleData</code>は型多相化されたコンストラクタなので、それを昇格させた<code>'SimpleData</code>は種多相化された型コンストラクタになります。上の実行例の、</p>
<ul>
<li>最初の<code>SimpleData :: a -&gt; SimpleData</code>という表示での<code>a</code>は、任意の<span class="ascii">(</span><code>*</code>という種を持つような<span class="ascii">)</span><strong>型</strong>を、</li>
<li>二つ目の<code>'SimpleData :: a -&gt; SimpleData a</code>の<code>a</code>は、任意の<strong>種</strong>を、</li>
</ul>
<p>それぞれ表すということに注意してください。では、種多相化されていることを確認してみましょう。以下を見てください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;SimpleData Bool</span></a>
<a class="sourceLine" id="cb18-2" data-line-number="2"><span class="ch">&#39;SimpleData Bool :: SimpleData *</span></a>
<a class="sourceLine" id="cb18-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;SimpleData Maybe</span></a>
<a class="sourceLine" id="cb18-4" data-line-number="4"><span class="ch">&#39;SimpleData Maybe :: SimpleData (* -&gt; *)</span></a>
<a class="sourceLine" id="cb18-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;SimpleData Monad</span></a>
<a class="sourceLine" id="cb18-6" data-line-number="6"><span class="ch">&#39;SimpleData Monoid :: SimpleData (* -&gt; Constraint)</span></a></code></pre></div>
<p><code>Proxy</code>型のように、どんな値でもとれるようになっていることが分かると思います。注意して欲しいのは、値コンストラクタ、型コンストラクタがそれぞれ一つ上に昇格されたので、<code>'SimpleData Monoid</code>という型を持つような値は存在しないということです。値を作るコンストラクタは昇格して型コンストラクタになってしまいましたからね！ 値を持つ型は全て、<code>*</code>という種を持つのでしたね。<code>SimpleData a</code>という種は<code>*</code>と一致しないため、値を持たないということもできます。値が存在しないならば、一体どういう場面で役に立つのでしょうか？ 一つの活用例としては、データ型のタグに利用ができます。以下を見てください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="ot">{-# LANGUAGE KindSignatures #-}</span></a>
<a class="sourceLine" id="cb19-2" data-line-number="2"></a>
<a class="sourceLine" id="cb19-3" data-line-number="3"><span class="kw">data</span> <span class="dt">GET</span></a>
<a class="sourceLine" id="cb19-4" data-line-number="4"><span class="kw">data</span> <span class="dt">POST</span></a>
<a class="sourceLine" id="cb19-5" data-line-number="5"><span class="kw">data</span> <span class="dt">PUT</span></a>
<a class="sourceLine" id="cb19-6" data-line-number="6"><span class="kw">data</span> <span class="dt">DELETE</span></a>
<a class="sourceLine" id="cb19-7" data-line-number="7"></a>
<a class="sourceLine" id="cb19-8" data-line-number="8"><span class="kw">data</span> <span class="dt">Request</span> (<span class="ot">a ::</span> <span class="fu">*</span>) <span class="fu">=</span> <span class="dt">Request</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb19-9" data-line-number="9"></a>
<a class="sourceLine" id="cb19-10" data-line-number="10"><span class="ot">forGetMethod ::</span> <span class="dt">Request</span> <span class="dt">GET</span> <span class="ot">-&gt;</span> <span class="fu">...</span></a></code></pre></div>
<p>この例は、<span class="ascii">HTTP</span>のリクエストが、どんなメソッドでのリクエストかを、タグ情報で持つような例です。このタグ情報によって、処理を型安全に分けることができます。しかしながら、以下の問題点があります。</p>
<ul>
<li>各メソッドのタグが別々のデータとして宣言されていて、集約されていません。</li>
<li><code>Request</code>型も、メソッド用のタグの他にも<code>*</code>という種を持っているならどんな型でも、例えば<code>Request Bool</code>といった型を作ることもできるようになってしまいます。</li>
</ul>
<p><code>DataKinds</code>を使うことで、もう少しタグ情報を明確に書くことができます。それは、以下のような修正をくわえることで、実現できます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="ot">{-# LANGUAGE DataKinds, KindSignatures #-}</span></a>
<a class="sourceLine" id="cb20-2" data-line-number="2"></a>
<a class="sourceLine" id="cb20-3" data-line-number="3"><span class="kw">data</span> <span class="dt">HttpMethod</span></a>
<a class="sourceLine" id="cb20-4" data-line-number="4">  <span class="fu">=</span> <span class="dt">GET</span></a>
<a class="sourceLine" id="cb20-5" data-line-number="5">  <span class="fu">|</span> <span class="dt">POST</span></a>
<a class="sourceLine" id="cb20-6" data-line-number="6">  <span class="fu">|</span> <span class="dt">PUT</span></a>
<a class="sourceLine" id="cb20-7" data-line-number="7">  <span class="fu">|</span> <span class="dt">DELETE</span></a>
<a class="sourceLine" id="cb20-8" data-line-number="8"></a>
<a class="sourceLine" id="cb20-9" data-line-number="9"><span class="kw">data</span> <span class="dt">Request</span> (<span class="ot">a ::</span> <span class="dt">HttpMethod</span>) <span class="fu">=</span> <span class="dt">Request</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb20-10" data-line-number="10"></a>
<a class="sourceLine" id="cb20-11" data-line-number="11"><span class="ot">forGetMethod ::</span> <span class="dt">Request</span> <span class="ch">&#39;GET -&gt; ...</span></a></code></pre></div>
<p>この例では、<code>DataKinds</code>拡張を使うことで、前の例での欠点を修正しています。メソッド情報は<code>HttpMethod</code>というデータ型の宣言に集約していますし、種に昇格させたデータ型で種注釈を行うことで、<code>Request</code>は<code>HttpMethod</code>以外の型がとれないようになっています。このように、<code>DataKinds</code>は値を持ちませんが、タグを表す型としてとても便利です。</p>
<p>その他にも、<code>DataKinds</code>拡張は、シングルトンというものを定義することによって、より有用になる場合があります。ただし、これらの話は種の話題というよりは型レベルプログラミングの話題になるので、この記事では紹介しません。興味がある方は、<a href="http://hackage.haskell.org/package/singletons"><span class="ascii">singletons</span></a>という有用なパッケージがあるので、見てみると良いでしょう。</p>
<p>ところで、<code>DataKinds</code>は、リスト型<code>[a]</code>、タプル型<code>(a, b)</code>などにも適用できます。まずリスト型の昇格から見ていきましょう。以下を見てください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XDataKinds</span> <span class="fu">-</span><span class="dt">XTypeOperators</span></a>
<a class="sourceLine" id="cb21-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;[]</span></a>
<a class="sourceLine" id="cb21-3" data-line-number="3"><span class="ch">&#39;[] :: [k]</span></a>
<a class="sourceLine" id="cb21-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;(:)</span></a>
<a class="sourceLine" id="cb21-5" data-line-number="5"><span class="ch">&#39;(:) :: a -&gt; [a] -&gt; [a]</span></a>
<a class="sourceLine" id="cb21-6" data-line-number="6"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">Functor</span> <span class="ch">&#39;: Applicative &#39;</span><span class="fu">:</span> <span class="dt">Monad</span> <span class="ch">&#39;: &#39;</span>[]</a>
<a class="sourceLine" id="cb21-7" data-line-number="7"><span class="dt">Functor</span> <span class="ch">&#39;: Applicative &#39;</span><span class="fu">:</span> <span class="dt">Monad</span> <span class="ch">&#39;: &#39;</span>[]<span class="ot"> ::</span> [(<span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span>]</a>
<a class="sourceLine" id="cb21-8" data-line-number="8"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;[Functor, Applicative, Monad]</span></a>
<a class="sourceLine" id="cb21-9" data-line-number="9"><span class="ch">&#39;[Functor, Applicative, Monad] :: [(* -&gt; *) -&gt; Constraint]</span></a></code></pre></div>
<p>リストの値コンストラクタは二つ、<code>[] :: [a]</code>、<code>(:) :: a -&gt; [a] -&gt; [a]</code>でした。また、リストは特別な構文として、<code>[True, False] == True : False : [] :: [Bool]</code>といったようなものが書けるのでした。これらをそれぞれ昇格させたものが上のものになります。タプル型の方は、以下のようになります<span class="ascii">:</span></p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;()</span></a>
<a class="sourceLine" id="cb22-2" data-line-number="2"><span class="ch">&#39;() :: ()</span></a>
<a class="sourceLine" id="cb22-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;(,)</span></a>
<a class="sourceLine" id="cb22-4" data-line-number="4"><span class="ch">&#39;(,) :: a -&gt; b -&gt; (a, b)</span></a>
<a class="sourceLine" id="cb22-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;(Bool, Monad Maybe)</span></a>
<a class="sourceLine" id="cb22-6" data-line-number="6"><span class="ch">&#39;(Bool, Monad Maybe) :: (*, Constraint)</span></a>
<a class="sourceLine" id="cb22-7" data-line-number="7"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;(,,,)</span></a>
<a class="sourceLine" id="cb22-8" data-line-number="8"><span class="ch">&#39;(,,,) :: a -&gt; b -&gt; c -&gt; d -&gt; (a, b, c, d)</span></a></code></pre></div>
<p>タプル型もリスト型と大体同じような感じですね。</p>
<p>さてここからは、<code>DataKinds</code>のもう少し詳細な見方を紹介しておきましょう。<code>DataKinds</code>は型コンストラクタを種上に昇格、値コンストラクタを型上に昇格させることをできるようにするような拡張でした。実は、<code>Constraint</code>や<code>k1 -&gt; k2</code>という種も昇格された種とみなすことができます。</p>
<p><code>Costraint</code>の方は単純で、以下のようになっています<span class="ascii">:</span></p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Exts</span> (<span class="dt">Constraint</span>)</a>
<a class="sourceLine" id="cb23-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>info <span class="dt">Constraint</span></a>
<a class="sourceLine" id="cb23-3" data-line-number="3"><span class="kw">data</span> <span class="dt">Constraint</span>         <span class="co">-- Defined in ‘GHC.Types’</span></a></code></pre></div>
<p>見ての通り、<code>GHC.Types</code>というモジュールで定義された、値コンストラクタを持たないデータ型です。この型が<code>DataKinds</code>と違うところは、</p>
<ul>
<li>デフォルトで、型コンストラクタ<code>Constraint :: *</code>が、種に昇格可能なこと</li>
<li>型制約は、<code>Constraint</code>型が昇格された種に結び付けられること</li>
</ul>
<p>だけで、他は<code>DataKinds</code>と同じです。なので、昇格前は単純に値も型引数も持たないデータ型です。見てみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Exts</span> (<span class="dt">Constraint</span>)</a>
<a class="sourceLine" id="cb24-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">Constraint</span></a>
<a class="sourceLine" id="cb24-3" data-line-number="3"><span class="dt">Constraint</span><span class="ot"> ::</span> <span class="fu">*</span></a></code></pre></div>
<p>確かに<code>Constraint</code>が、<code>*</code>を種に持つ型であることが分かりますね。</p>
<p><code>k1 -&gt; k2</code>の方はちょっと特殊で、関数型コンストラクタ<code>(-&gt;)</code>が昇格したものになっています。関数型は関数に結びついているデータ型でした。<code>Constraint</code>の時と同じように定義を見てみると、以下のようになっています<span class="ascii">:</span></p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb25-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>info (<span class="ot">-&gt;</span>)</a>
<a class="sourceLine" id="cb25-2" data-line-number="2"><span class="kw">data</span> (<span class="ot">-&gt;</span>) t1 t2         <span class="co">-- Defined in ‘GHC.Prim’</span></a>
<a class="sourceLine" id="cb25-3" data-line-number="3"><span class="kw">infixr</span> <span class="dv">0</span> <span class="ot">`(-&gt;)`</span></a>
<a class="sourceLine" id="cb25-4" data-line-number="4"><span class="fu">...</span></a></code></pre></div>
<p>関数型もやはり値コンストラクタを持ちません。ですが、<code>Constraint</code>と違い、関数型は関数という値を持ちます。<span class="ascii">Haskell</span>上では、<code>a -&gt; b</code>という型を持つ値は、<code>a</code>型の値を受け取り<code>b</code>型の値を返すような関数になるのでしたね。これらの関数を作る操作、例えばラムダ記法や関数宣言などが、関数型の値コンストラクタと言えるでしょう。これらがそれぞれ昇格すると、<code>a -&gt; b</code>という種は、<code>a</code>の種を持つ型を受け取り、<code>b</code>の種を持つ型を返すような、型上の関数を表します。つまり、</p>
<ul>
<li><code>a -&gt; b</code>という関数型を、種<code>a -&gt; b</code>に昇格</li>
<li><code>a -&gt; b</code>という型の関数を、<code>a -&gt; b</code>という種の型関数に昇格</li>
</ul>
<p>という感じの対応をすることになります。こう見ると、少々特殊ではありますが、<code>DataKinds</code>での昇格したデータ型と同じような扱いと思うことができます。</p>
<p>このように、<code>Constraint</code>や<code>k1 -&gt; k2</code>でさえ、<code>DataKinds</code>の昇格と同じように見ることができます。<code>*</code>はどうでしょうか？実は、<code>*</code>だけは少し特別です。見てみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Types</span></a>
<a class="sourceLine" id="cb26-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="fu">*</span></a>
<a class="sourceLine" id="cb26-3" data-line-number="3"><span class="fu">*</span><span class="ot"> ::</span> <span class="fu">*</span></a></code></pre></div>
<p>さて、<code>GHC.Types</code>モジュールには、データ型<code>*</code>が定義されています。このデータ型は自身を、つまり<code>*</code>の昇格された種を持っていると見ることができます。つまり、次のような型表記も可能です<span class="ascii">:</span></p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb27-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Types</span></a>
<a class="sourceLine" id="cb27-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb27-3" data-line-number="3"><span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span><span class="ot"> ::</span> <span class="fu">*</span></a></code></pre></div>
<p>種においての<code>* -&gt; *</code>とは、上の型が種に昇格されたものとなるわけです。もちろん、次のような型表記もできます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb28-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XDataKinds</span></a>
<a class="sourceLine" id="cb28-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Types</span></a>
<a class="sourceLine" id="cb28-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></a>
<a class="sourceLine" id="cb28-4" data-line-number="4"><span class="fu">*</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span><span class="ot"> ::</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb28-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;Just Int</span></a>
<a class="sourceLine" id="cb28-6" data-line-number="6"><span class="ch">&#39;Just Int :: Maybe *</span></a>
<a class="sourceLine" id="cb28-7" data-line-number="7"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">Maybe</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb28-8" data-line-number="8"><span class="dt">Maybe</span> <span class="fu">*</span><span class="ot"> ::</span> <span class="fu">*</span></a></code></pre></div>
<p>これらをもっと視覚的にまとめてみましょう。型が結びついている種は、どのような型が昇格したものかをまとめてみると、以下のようなグラフの形になるわけです<span class="ascii">:</span></p>
<figure>
<img src="../../img/2017/13-01-kind-graph.png" alt="kind graph" /><figcaption><span class="ascii">kind graph</span></figcaption>
</figure>
<p><code>'Nothing :: Maybe a</code>であることに注意してください。<code>'Nothing</code>は種多相化されているので、<code>'Nothing :: Maybe *</code>とすることも、<code>'Nothing :: Maybe Bool</code>とすることも可能です<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a>。</p>
<p>このように見てみると、私たちが種と呼んでいたものは、単にある型に付属する単なる型情報だと思えてきます。種注釈とは、単にその型がどういう型に付属しているかの情報に過ぎないのです。そして、値にもやはり型情報が付属しています。値と<code>DataKinds</code>によって型に昇格したものを同一視してみると、値と型の間には差異はないということになりますね。このアイデアを元に、<span class="ascii">GHC</span>では <code>TypeInType</code> という拡張が提供されています。この拡張は後ほど紹介しましょう。</p>
<p>最後に名前空間の話をしておきましょう。全ての種は、ある型が昇格したものである、という話をしました。<span class="ascii">GHC</span>では、そういう背景があり、種の名前空間は型の名前空間と完全に一致します。ただし、値の名前空間と型の名前空間を完全に一致させることはできません。それは<span class="ascii">Haskell</span>が多用している、型コンストラクタと値コンストラクタの名前を同じにするという文化があるからです。以下の例を見てください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb29-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XDataKinds</span></a>
<a class="sourceLine" id="cb29-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">A</span> a <span class="fu">=</span> <span class="dt">A</span> a <span class="fu">|</span> <span class="dt">B</span> a</a>
<a class="sourceLine" id="cb29-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">A</span></a>
<a class="sourceLine" id="cb29-4" data-line-number="4"><span class="dt">A</span><span class="ot"> ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb29-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;A</span></a>
<a class="sourceLine" id="cb29-6" data-line-number="6"><span class="ch">&#39;A :: a -&gt; A a</span></a>
<a class="sourceLine" id="cb29-7" data-line-number="7"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">B</span></a>
<a class="sourceLine" id="cb29-8" data-line-number="8"><span class="dt">B</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> <span class="dt">A</span> a</a></code></pre></div>
<p><code>B</code>の例は、<code>'</code>を書いていないのに型に昇格できていますね。<code>DataKinds</code>は値と型の名前で被るものが無いようなものは<code>'</code>を書かなくていいようになっています。これは型から種へ昇格できる時は自然な動作でしたが、値から型の場合、今回でいう<code>A</code>のように型コンストラクタと値コンストラクタの名前が被ってしまうケースが出てきます。もちろん、データ型<code>B</code>が新しく宣言されてしまうような場合もあるでしょう。このように、型から種へは名前空間が一致しますが、値から型へは名前が被るのを避けるために<code>'</code>を付けるようにしているのです。なので、本質的には値から型へも、<code>'</code>を付けないで昇格させることが理想です。それを覚えておきながら、<code>DataKinds</code>拡張使用の際は、<code>'</code>を適切に付けていくのが良いでしょう。</p>
<h3 id="型の分類">型の分類</h3>
<p>最後に、少し変わった型と、それにまつわる種の分類分けについてお話ししましょう。この見方は、より<span class="ascii">GHC</span>のプリミティブな部分に携わる時に、役にたつはずです。<span class="ascii">Haskell</span>標準では、種は<code>*</code>と<code>k1 -&gt; k2</code>しかありませんでした。<span class="ascii">GHC</span>では、それに型制約種<code>Constraint</code>が追加されてるのでしたね。そして、<code>DataKinds</code>拡張を使えば、データ型を種に昇格することもできました。しかし、結局値を持つ型は<code>*</code>という種を持つのでしたね。ですが、この制約には一部例外があります。それは、<span class="ascii">GHC</span>のプリミティブな値についてです。</p>
<p>私たちは普段何気なく<code>Int</code>型や<code>Double</code>型を使用しています。しかしながら、これらは実際に実行するとき、メモリ上でどのような構造で保持されているのか考えたことはないでしょうか？ ここでは詳細な話はしませんが、幾つか基本的な<span class="ascii">GHC</span>での内部表現についてお話ししましょう。<span class="ascii">GHCi</span>で、この二つの型の情報を表示してみましょう。</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb30-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">Prelude</span> (<span class="dt">Int</span>, <span class="dt">Double</span>)</a>
<a class="sourceLine" id="cb30-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>info <span class="dt">Int</span></a>
<a class="sourceLine" id="cb30-3" data-line-number="3"><span class="kw">data</span> <span class="dt">Int</span> <span class="fu">=</span> <span class="dt">GHC.Types.I</span><span class="fu">#</span> <span class="dt">GHC.Prim.Int</span><span class="fu">#</span>   <span class="co">-- Defined in ‘GHC.Types’</span></a>
<a class="sourceLine" id="cb30-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>info <span class="dt">Double</span></a>
<a class="sourceLine" id="cb30-5" data-line-number="5"><span class="kw">data</span> <span class="dt">Double</span> <span class="fu">=</span> <span class="dt">GHC.Types.D</span><span class="fu">#</span> <span class="dt">GHC.Prim.Double</span><span class="fu">#</span></a>
<a class="sourceLine" id="cb30-6" data-line-number="6">        <span class="co">-- Defined in ‘GHC.Types’</span></a></code></pre></div>
<p>どうやらこの二つの型は、不思議な値コンストラクタを持っているようですね。</p>
<ul>
<li><code>Int</code>データ型は、一つの値コンストラクタ<code>I# :: Int# -&gt; Int</code>を持ちます。</li>
<li><code>Double</code>データ型は、一つの値コンストラクタ<code>D# :: Double# -&gt; Double</code>を持ちます。</li>
</ul>
<p><code>Int#</code>や<code>Double#</code>といった見慣れないデータ型が出てきましたね。これらが今回紹介する<span class="ascii">GHC</span>の用意しているプリミティブなデータ型です。せっかくですから、上の値コンストラクタを使って、それぞれのデータ型の値を作ってみましょう。それには<code>MagicHash</code>拡張が必要です。通常、<code>#</code>のついた値や型は、私たちは扱うことができません。それを可能にするのが<code>MagicHash</code>拡張です。また、<code>Int</code>や<code>Double</code>の値は、<code>1</code>といった数値リテラルで作れるのでした。同じように、<code>Int#</code>や<code>Double#</code>といった不思議なデータ型にも、それぞれのリテラルが用意されています。使ってみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb31-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XMagicHash</span></a>
<a class="sourceLine" id="cb31-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Types</span> (<span class="dt">Int</span>(..), <span class="dt">Double</span>(..))</a>
<a class="sourceLine" id="cb31-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- I#を使って、Int型を作る</span></a>
<a class="sourceLine" id="cb31-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span> <span class="dv">1</span><span class="fu">#</span></a>
<a class="sourceLine" id="cb31-5" data-line-number="5"><span class="dv">1</span><span class="fu">#</span><span class="ot"> ::</span> <span class="dt">GHC.Prim.Int</span><span class="fu">#</span></a>
<a class="sourceLine" id="cb31-6" data-line-number="6"><span class="fu">&gt;&gt;&gt;</span> <span class="dt">I</span><span class="fu">#</span> <span class="dv">1</span><span class="fu">#</span></a>
<a class="sourceLine" id="cb31-7" data-line-number="7"><span class="dv">1</span></a>
<a class="sourceLine" id="cb31-8" data-line-number="8"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span> <span class="dt">I</span><span class="fu">#</span> <span class="dv">1</span><span class="fu">#</span></a>
<a class="sourceLine" id="cb31-9" data-line-number="9"><span class="dt">I</span><span class="fu">#</span> <span class="dv">1</span><span class="fu">#</span><span class="ot"> ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb31-10" data-line-number="10"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- D#を使って、Double型を作る</span></a>
<a class="sourceLine" id="cb31-11" data-line-number="11"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span> <span class="fl">1.0</span><span class="fu">##</span></a>
<a class="sourceLine" id="cb31-12" data-line-number="12"><span class="fl">1.0</span><span class="fu">##</span><span class="ot"> ::</span> <span class="dt">GHC.Prim.Double</span><span class="fu">#</span></a>
<a class="sourceLine" id="cb31-13" data-line-number="13"><span class="fu">&gt;&gt;&gt;</span> <span class="dt">D</span><span class="fu">#</span> <span class="fl">1.0</span><span class="fu">##</span></a>
<a class="sourceLine" id="cb31-14" data-line-number="14"><span class="fl">1.0</span></a>
<a class="sourceLine" id="cb31-15" data-line-number="15"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span><span class="kw">type</span> <span class="dt">D</span><span class="fu">#</span> <span class="fl">1.0</span><span class="fu">##</span></a>
<a class="sourceLine" id="cb31-16" data-line-number="16"><span class="dt">D</span><span class="fu">#</span> <span class="fl">1.0</span><span class="fu">##</span><span class="ot"> ::</span> <span class="dt">Double</span></a></code></pre></div>
<p>各リテラル表記は、次のようになっています<span class="ascii">:</span></p>
<ul>
<li><code>Int#</code>のリテラルは、整数と<code>#</code>で作ることができます。</li>
<li><code>Double#</code>のリテラルは、実数と<code>##</code>で作ることができます。</li>
</ul>
<p>他にも幾つか<code>#</code>の付くデータ型があるのですが、まずはこのデータ型がどのようなものなのかについて、紹介しましょう。これらのデータ型は、 <strong>プリミティブ型<span class="ascii">(primitive types)</span></strong> と呼ばれます。そして、その多くが <strong>非ボックス型<span class="ascii">(unboxed types)</span></strong> と呼ばれています。</p>
<p><span class="ascii">GHC</span>では、多くのデータ型はボックス化、つまりヒープ上に参照データとして格納されています。データ型の値自体はポインタで、本体はヒープ上にあるというわけです。これは、データ型が、値コンストラクタを複数持つ場合もありますし、複数の様々なデータ型を取るパラメータを持つこともあり、サイズが多岐に渡るからです。しかし、ヒープに格納するには、格納する場所を計算して領域を確保し、必要なくなったら領域を解放しなければならないという、大きなコストがかかります。これは、サイズが大きなデータ型については、いちいち領域をコピーし実データのまま扱うよりも、低コストになる場合が多いですが、サイズが固定されていて尚且つ小さなデータの場合、大きな足かせになります。このため、<span class="ascii">GHC</span>は幾つかの特別なデータ型を用意し、そのデータ型はヒープ上に格納せず直接実データとして扱うようにしています。それが、非ボックス型です。</p>
<p>また、<span class="ascii">GHC</span>は非ボックス型の他にも幾つか特別なデータ型を用意しています。<code>Array#</code>や<code>MutableArray#</code>、<code>MVar#</code>などのデータ型です。これらは、実データとしてではなくヒープ上に格納され、ポインタをデータとするようなものです。つまり、ボックス化されているわけです。しかしながら、通常のデータ型と異なり、ヒープ上のデータは特殊な構造をしています。このように、<span class="ascii">GHC</span>が用意している、<span class="ascii">Haskell</span>上では定義できない特殊な構造を持つデータ型をボックス化されている<span class="ascii">/</span>されていないに関わらず、プリミティブ型と言います。少し、まとめておきましょう<span class="ascii">:</span></p>
<ul>
<li>プリミティブ型とは、<span class="ascii">GHC</span>が事前に用意している、<span class="ascii">Haskell</span>の構文では定義できない、値が特殊な構造を持つようなデータ型のこと。</li>
<li>非ボックス型とは、ボックス化されていない型、つまりポインタとして表現されるのではなく実データとして表現されるような値を持つ型のこと。</li>
</ul>
<p>さて、この記事は種についての記事なので、種の話もしましょう。プリミティブ型は、<span class="ascii">GHC</span>では<code>*</code>ではなくそれぞれが特別な種を割り当てられています。見てみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb32-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XMagicHash</span></a>
<a class="sourceLine" id="cb32-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Prim</span> (<span class="dt">Int</span>#, <span class="dt">Double</span>#)</a>
<a class="sourceLine" id="cb32-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">Int</span><span class="fu">#</span></a>
<a class="sourceLine" id="cb32-4" data-line-number="4"><span class="dt">Int</span><span class="fu">#</span><span class="ot"> ::</span> <span class="dt">TYPE</span> <span class="ch">&#39;GHC.Types.IntRep</span></a>
<a class="sourceLine" id="cb32-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">Double</span><span class="fu">#</span></a>
<a class="sourceLine" id="cb32-6" data-line-number="6"><span class="dt">Double</span><span class="fu">#</span><span class="ot"> ::</span> <span class="dt">TYPE</span> <span class="ch">&#39;GHC.Types.DoubleRep</span></a></code></pre></div>
<p>なにやら、不思議な種が登場しました。一体これらの種は、どのようなものなのでしょうか？ <code>info</code>コマンドで見てみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb33-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Types</span></a>
<a class="sourceLine" id="cb33-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>info <span class="dt">TYPE</span></a>
<a class="sourceLine" id="cb33-3" data-line-number="3"><span class="kw">data</span> <span class="dt">TYPE</span> (<span class="ot">a ::</span> <span class="dt">RuntimeRep</span>)</a>
<a class="sourceLine" id="cb33-4" data-line-number="4">        <span class="co">-- Defined in ‘GHC.Prim’</span></a>
<a class="sourceLine" id="cb33-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>info <span class="dt">RuntimeRep</span></a>
<a class="sourceLine" id="cb33-6" data-line-number="6"><span class="kw">data</span> <span class="dt">RuntimeRep</span></a>
<a class="sourceLine" id="cb33-7" data-line-number="7">  <span class="fu">=</span> <span class="dt">VecRep</span> <span class="dt">VecCount</span> <span class="dt">VecElem</span></a>
<a class="sourceLine" id="cb33-8" data-line-number="8">  <span class="fu">|</span> <span class="dt">TupleRep</span> [<span class="dt">RuntimeRep</span>]</a>
<a class="sourceLine" id="cb33-9" data-line-number="9">  <span class="fu">|</span> <span class="dt">SumRep</span> [<span class="dt">RuntimeRep</span>]</a>
<a class="sourceLine" id="cb33-10" data-line-number="10">  <span class="fu">|</span> <span class="dt">LiftedRep</span></a>
<a class="sourceLine" id="cb33-11" data-line-number="11">  <span class="fu">|</span> <span class="dt">UnliftedRep</span></a>
<a class="sourceLine" id="cb33-12" data-line-number="12">  <span class="fu">|</span> <span class="dt">IntRep</span></a>
<a class="sourceLine" id="cb33-13" data-line-number="13">  <span class="fu">|</span> <span class="dt">WordRep</span></a>
<a class="sourceLine" id="cb33-14" data-line-number="14">  <span class="fu">|</span> <span class="dt">Int64Rep</span></a>
<a class="sourceLine" id="cb33-15" data-line-number="15">  <span class="fu">|</span> <span class="dt">Word64Rep</span></a>
<a class="sourceLine" id="cb33-16" data-line-number="16">  <span class="fu">|</span> <span class="dt">AddrRep</span></a>
<a class="sourceLine" id="cb33-17" data-line-number="17">  <span class="fu">|</span> <span class="dt">FloatRep</span></a>
<a class="sourceLine" id="cb33-18" data-line-number="18">  <span class="fu">|</span> <span class="dt">DoubleRep</span></a>
<a class="sourceLine" id="cb33-19" data-line-number="19">        <span class="co">-- Defined in ‘GHC.Types’</span></a></code></pre></div>
<p><strong>注記</strong><span class="ascii">:</span> この実行例は<span class="ascii">GHC 8.2.1</span>のものですが、これらのデータ型は現在かなりアグレッシブな変更が加えられており、表現方法がバージョンによってかなり異なります。ただし、データ型の意味は特に変わらないはずなので、手元の環境の実行例に差異があっても、特に気にしないでください！</p>
<p><code>TYPE :: RuntimeRep -&gt; *</code>、<code>RuntimeRep :: *</code>、共に特に難しい定義ではありませんね。<code>RuntimeRep</code>は“<span class="ascii">runtime representation</span>”<span class="ascii">(</span>実行環境での表現<span class="ascii">)</span>という意味を表した名前になっています。前の章でのデータ型の昇格の話を思い出してください。<code>TYPE 'IntRep</code>という種は、<code>TYPE 'IntRep</code>という型が昇格したものになります。<code>'IntRep</code>は、<code>RuntimeRep</code>データ型の値コンストラクタ<code>IntRep</code>が、型に昇格したものということを思い出してください。つまり、値<code>IntRep</code>を型に昇格した<code>'IntRep</code>が、さらに種に昇格しているということになります。ちゃんと型が合ってるかは、昇格される前の型で調べれば良いのですね。いちよ<span class="ascii">GHCi</span>で確認してみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb34-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Types</span></a>
<a class="sourceLine" id="cb34-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">TYPE</span></a>
<a class="sourceLine" id="cb34-3" data-line-number="3"><span class="dt">TYPE</span><span class="ot"> ::</span> <span class="dt">RuntimeRep</span> <span class="ot">-&gt;</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb34-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="ch">&#39;IntRep</span></a>
<a class="sourceLine" id="cb34-5" data-line-number="5"><span class="ch">&#39;IntRep :: RuntimeRep</span></a>
<a class="sourceLine" id="cb34-6" data-line-number="6"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">TYPE</span> <span class="ch">&#39;IntRep</span></a>
<a class="sourceLine" id="cb34-7" data-line-number="7"><span class="dt">TYPE</span> <span class="ch">&#39;IntRep :: *</span></a></code></pre></div>
<p>ちゃんと種が符合していることが分かりますね。<code>RuntimeRep</code>や<code>TYPE</code>は、<code>*</code>や<code>Constraint</code>、<code>a -&gt; b</code>などと同じく、<code>DataKinds</code>無しで特別に種に昇格することが許可されています。この特別なデータ型によって、プリミティブ型は表現されています。幾つかのプリミティブ型に対する対応を、表にしてみました<span class="ascii">:</span></p>
<table>
<thead>
<tr class="header">
<th>プリミティブ型</th>
<th>非ボックス型か？</th>
<th>紐づいている種</th>
<th>リテラル</th>
<th><span class="ascii">C</span>言語での型表現</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>Char#</code></td>
<td><span class="ascii">o</span></td>
<td><code>TYPE 'WordRep</code></td>
<td>文字と<code>#</code><span class="ascii">(</span><code>'x'#</code><span class="ascii">)</span></td>
<td><code>int32_t</code></td>
</tr>
<tr class="even">
<td><code>Int#</code></td>
<td><span class="ascii">o</span></td>
<td><code>TYPE 'IntRep</code></td>
<td>整数と<code>#</code><span class="ascii">(</span><code>3#</code><span class="ascii">)</span></td>
<td><code>int</code></td>
</tr>
<tr class="odd">
<td><code>Word#</code></td>
<td><span class="ascii">o</span></td>
<td><code>TYPE 'WordRep</code></td>
<td>整数と<code>##</code><span class="ascii">(</span><code>3##</code><span class="ascii">)</span></td>
<td><code>unsigned int</code></td>
</tr>
<tr class="even">
<td><code>Float#</code></td>
<td><span class="ascii">o</span></td>
<td><code>TYPE 'FloatRep</code></td>
<td>実数と<code>#</code><span class="ascii">(</span><code>3.2#</code><span class="ascii">)</span></td>
<td><code>float</code></td>
</tr>
<tr class="odd">
<td><code>Double#</code></td>
<td><span class="ascii">o</span></td>
<td><code>TYPE 'DoubleRep</code></td>
<td>実数と<code>##</code><span class="ascii">(</span><code>3.2##</code><span class="ascii">)</span></td>
<td><code>double</code></td>
</tr>
<tr class="even">
<td><code>Addr#</code></td>
<td><span class="ascii">o</span></td>
<td><code>TYPE 'AddrRep</code></td>
<td>文字列と<code>#</code><span class="ascii">(</span><code>&quot;foo&quot;#</code><span class="ascii">)</span></td>
<td><code>void *</code></td>
</tr>
<tr class="odd">
<td><code>Array# a</code></td>
<td><span class="ascii">x</span></td>
<td><code>TYPE 'UnliftedRep</code></td>
<td><span class="ascii">-</span></td>
<td><span class="ascii">-</span></td>
</tr>
<tr class="even">
<td><code>MutableArray# s a</code></td>
<td><span class="ascii">x</span></td>
<td><code>TYPE 'UnliftedRep</code></td>
<td><span class="ascii">-</span></td>
<td><span class="ascii">-</span></td>
</tr>
<tr class="odd">
<td><code>MVar# s a</code></td>
<td><span class="ascii">x</span></td>
<td><code>TYPE 'UnliftedRep</code></td>
<td><span class="ascii">-</span></td>
<td><span class="ascii">-</span></td>
</tr>
</tbody>
</table>
<p>この他にも<span class="ascii">GHC</span>はプリミティブ型を用意しています。プリミティブ型は、<a href="https://www.stackage.org/package/ghc-prim"><code>ghc-prim</code>パッケージ</a>の<a href="https://www.stackage.org/haddock/lts-9.4/ghc-prim-0.5.0.0/GHC-Prim.html"><code>GHC.Prim</code>モジュール</a>にて公開されています。興味があれば、種を確認しながら見てみると面白いでしょう<a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a>。また、<code>TupleRep</code>や<code>SumRep</code>を持つ型は、それぞれ<code>UnboxedTuples</code>拡張、<code>UnboxedSums</code>拡張を使用する必要があります。こちらについても、気になる方は調べてみてください。</p>
<p>さて、プリミティブ型は、その表現方法によって種が用意されていることは分かったと思います。最後に、この<code>RuntimeRep</code>の中で二つの特殊な要素<code>LiftedRep</code>と<code>UnliftedRep</code>について話しておきましょう。データ型を表す種として、<code>*</code>を紹介しました。実はこの種は、次のようなエイリアスになっています<a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a><span class="ascii">:</span></p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb35-1" data-line-number="1"><span class="kw">type</span> <span class="fu">*</span> <span class="fu">=</span> <span class="dt">TYPE</span> <span class="ch">&#39;LiftedRep</span></a></code></pre></div>
<p>つまり、今まで見てきたデータ型は、実行時に<strong><span class="ascii">lifted</span></strong>という枠組みで表現されるようなものというわけです。では、この<strong><span class="ascii">lifted</span></strong>と<strong><span class="ascii">unlifted</span></strong>の違いはなんなのでしょうか？ それの説明に入る前に、<span class="ascii">GHC</span>においての評価戦略とデータの内部表現についての話をしておきましょう。ときに、<span class="ascii">Haskell</span>は遅延評価デフォルトの言語です。例えば、以下の式の評価は例外になりません<span class="ascii">:</span></p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb36-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span><span class="ot"> f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>; f _ <span class="fu">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb36-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> f (error <span class="st">&quot;raise an exception&quot;</span>)</a>
<a class="sourceLine" id="cb36-3" data-line-number="3"><span class="dv">0</span></a></code></pre></div>
<p><span class="ascii">GHC</span>では、このような<code>error &quot;raise an exception&quot;</code>という式は評価されるまでは実際の値でなく、サンクという計算式を表現したデータとして保持されます。サンクは一度評価されると破棄され、実際の値にすげ変わります。上の関数<code>f</code>が受け取るのは、このサンクまたはすげ変わった実際の値を指し示すようなポインタです。今回の場合、<code>error &quot;raise an exception&quot;</code>という、まだ評価されていない式のサンクを指し示すポインタというわけです。上の例では、関数<code>f</code>に渡されたサンクを示すポインタは、特に評価されないまま捨てられ、定数値が返ってきます。では、サンクを評価するような関数を作って、動かしてみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb37-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span><span class="ot"> f ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>; f b <span class="fu">=</span> <span class="kw">if</span> b <span class="kw">then</span> <span class="dv">0</span> <span class="kw">else</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb37-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> f (error <span class="st">&quot;raise an exception&quot;</span>)</a>
<a class="sourceLine" id="cb37-3" data-line-number="3"><span class="fu">***</span> <span class="dt">Exception</span><span class="fu">:</span> raise an exception</a>
<a class="sourceLine" id="cb37-4" data-line-number="4"><span class="dt">CallStack</span> (from <span class="dt">HasCallStack</span>)<span class="fu">:</span></a>
<a class="sourceLine" id="cb37-5" data-line-number="5">  error, called at <span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">2</span><span class="fu">:</span><span class="dv">4</span> <span class="kw">in</span> interactive<span class="fu">:</span><span class="dt">Ghci2</span></a></code></pre></div>
<p>この例では先ほどと違い、受け取ったサンクを関数<code>f</code>の中の<span class="ascii">if</span>文で評価しています。そのため、例外が発生しているわけです。サンクは<span class="ascii">GHC</span>が遅延評価を実装するための仕組みであり、<span class="ascii">lifted</span>型の値は指し示す先がサンクになり得るようなポインタで表現されます。<span class="ascii">lifted</span>型とは、その値としてボトムと称される値になるようなものも持てるような型のことです。ボトムと呼ばれる値には、主に以下のようなものがあります<span class="ascii">:</span></p>
<ul>
<li>評価すると例外が出されるような値</li>
<li>無限ループになっていて永遠に評価が終わらないような値</li>
</ul>
<p><span class="ascii">Haskell</span>の通常の型は、上のような式を表すサンクをも値として持ちますから、無限ループになったり例外が出されたりするような値、つまりボトムをも表現できます。それに対して、<span class="ascii">GHC</span>ではボトムを表現できない型も存在します。その典型が非ボックス型です。非ボックス型はポインタではなく、実データとして表されているんでしたよね。実データは、サンクとすげ替えるということができないですよね。では、非ボックス型を処理するような関数に、<code>undefined</code>を渡すとどうなるか、見てみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb38-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XMagicHash</span></a>
<a class="sourceLine" id="cb38-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Exts</span></a>
<a class="sourceLine" id="cb38-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span><span class="ot"> f ::</span> <span class="dt">Int</span><span class="fu">#</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>; f _ <span class="fu">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb38-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> f (error <span class="st">&quot;raise an exception&quot;</span>)</a>
<a class="sourceLine" id="cb38-5" data-line-number="5"><span class="fu">***</span> <span class="dt">Exception</span><span class="fu">:</span> raise an exception</a>
<a class="sourceLine" id="cb38-6" data-line-number="6"><span class="dt">CallStack</span> (from <span class="dt">HasCallStack</span>)<span class="fu">:</span></a>
<a class="sourceLine" id="cb38-7" data-line-number="7">  error, called at <span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">7</span><span class="fu">:</span><span class="dv">4</span> <span class="kw">in</span> interactive<span class="fu">:</span><span class="dt">Ghci4</span></a></code></pre></div>
<p>先ほどの<span class="ascii">lifted</span>の例<span class="ascii">(</span><code>Int</code>の例<span class="ascii">)</span>と、何が違うか分かりますか？ 今回、関数<code>f</code>はやはり受け取った値を無視して定数を返します。どこにも受け取った引数を評価する箇所はありません。</p>
<ul>
<li><span class="ascii">lifted</span>の例<span class="ascii">(</span><code>Int</code>の例<span class="ascii">)</span>では、<code>undefined</code>を評価せず、つまり例外が一切出ずに定数が返ってきました。</li>
<li>今回の非ボックス型の例<span class="ascii">(</span><code>Int#</code>の例<span class="ascii">)</span>では、例外が発生しています。</li>
</ul>
<p>なぜでしょうか？ 実は、非ボックス型は遅延評価ではなく正格評価が行われます。その理由はお分かりですね？ なぜなら遅延評価のためにサンクを用意しようにも、非ボックス型はサンクを表現できないからです！ 非ボックス型として値を格納するならば、サンクではなく評価した後の実データでないといけません。そのため、ボックス型の引数を受け取る関数の場合は、一旦引数に渡される式を評価して実データにした上で、関数に渡すということを行います。実は、これは非ボックス型だけに止まりません。<span class="ascii">GHC</span>では、ボックス型の中にも正格評価になるような、つまりサンクを値として持たないような型があります。それが、<code>TYPE 'UnliftedRep</code>を種に持つデータ型です。見てみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb39-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XMagicHash</span></a>
<a class="sourceLine" id="cb39-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Exts</span></a>
<a class="sourceLine" id="cb39-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span><span class="ot"> f ::</span> <span class="dt">Array</span><span class="fu">#</span> a <span class="ot">-&gt;</span> <span class="dt">Int</span>; f _ <span class="fu">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb39-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> f (error <span class="st">&quot;raise an exception&quot;</span>)</a>
<a class="sourceLine" id="cb39-5" data-line-number="5"><span class="fu">***</span> <span class="dt">Exception</span><span class="fu">:</span> raise an exception</a>
<a class="sourceLine" id="cb39-6" data-line-number="6"><span class="dt">CallStack</span> (from <span class="dt">HasCallStack</span>)<span class="fu">:</span></a>
<a class="sourceLine" id="cb39-7" data-line-number="7">  error, called at <span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">8</span><span class="fu">:</span><span class="dv">4</span> <span class="kw">in</span> interactive<span class="fu">:</span><span class="dt">Ghci2</span></a></code></pre></div>
<p><code>Array# a</code>はヒープ上に本体があり、それを指し示すポインタで表現されます。ただしこのポインタは、サンクを指し示すことはありません。つまりかならず実データを指し示すことになり、ボトムを値に持つことはないのです。</p>
<p>ところで、今までは引数が<span class="ascii">unlifted</span>な型である場合の話をしてきましたが、返り値が<span class="ascii">unlifted</span>な型になっている場合はどう見ることができるのでしょう？例えば、次のような関数を考えてみてください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb40-1" data-line-number="1"><span class="ot">{-# LANGUAGE MagicHash #-}</span></a>
<a class="sourceLine" id="cb40-2" data-line-number="2"></a>
<a class="sourceLine" id="cb40-3" data-line-number="3"><span class="kw">import</span> <span class="dt">GHC.Exts</span></a>
<a class="sourceLine" id="cb40-4" data-line-number="4"></a>
<a class="sourceLine" id="cb40-5" data-line-number="5"><span class="ot">infLoop ::</span> <span class="dt">Int</span><span class="fu">#</span> <span class="ot">-&gt;</span> <span class="dt">Int</span><span class="fu">#</span></a>
<a class="sourceLine" id="cb40-6" data-line-number="6">infLoop i <span class="fu">=</span> infLoop (i <span class="fu">+#</span> <span class="dv">1</span><span class="fu">#</span>)</a></code></pre></div>
<p><code>(+#) :: Int# -&gt; Int# -&gt; Int#</code>は、<span class="ascii">GHC</span>で用意されている<code>Int#</code>専用の加算演算子です。この関数は問題なく定義することができますが、実行すると無限ループを起こします。つまり<code>infLoop 1# :: Int#</code>というような式はボトムを表しているように見えます。<span class="ascii">unlifted</span>な型は、ボトムを持たないはずでは無かったのでしょうか？ 注意して欲しいのは、<code>infLoop 1#</code>という式は、それ単体では<span class="ascii">Haskell</span>では単なる表記に過ぎないということです。この式は、なんらかのトップレベル関数や定数の一部になっているはずです。関数は<span class="ascii">lifted</span>な型の値です<span class="ascii">(</span>関数型は、<code>a -&gt; b :: *</code>であることを思い出してください！<span class="ascii">)</span>。関数はコンパイルされ、ランタイムによって実行されます。つまり、最終的に実行時に意味を持つのは、トップレベルの関数であり、それは<span class="ascii">lifted</span>な型で表現されるということです。また、<span class="ascii">Haskell</span>では<span class="ascii">unlifted</span>型のトップレベル定数の宣言は許されていません。以下のコードはコンパイルエラーになります<span class="ascii">:</span></p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb41-1" data-line-number="1"><span class="ot">{-# LANGUAGE MagicHash #-}</span></a>
<a class="sourceLine" id="cb41-2" data-line-number="2"></a>
<a class="sourceLine" id="cb41-3" data-line-number="3"><span class="kw">import</span> <span class="dt">GHC.Exts</span></a>
<a class="sourceLine" id="cb41-4" data-line-number="4"></a>
<a class="sourceLine" id="cb41-5" data-line-number="5"><span class="co">-- 許可されていない</span></a>
<a class="sourceLine" id="cb41-6" data-line-number="6"><span class="ot">unliftedConstant ::</span> <span class="dt">Int</span><span class="fu">#</span></a>
<a class="sourceLine" id="cb41-7" data-line-number="7">unliftedConstant <span class="fu">=</span> <span class="dv">1</span><span class="fu">#</span></a></code></pre></div>
<p>これにより、トップレベルの関数や定数は、全て<span class="ascii">lifted</span>な型を持つことになります。もし、内部で<span class="ascii">unlifted</span>な式が無限ループや例外を吐くなら、それはその式を含んだトップレベルの<span class="ascii">lifted</span>な関数や定数が、ボトムを表すサンクを持つことになるということです。これは、<span class="ascii">unlifted</span>の考え方を逸脱しません。</p>
<ul>
<li>トップレベルの関数や定数はサンクを持つ<span class="ascii">lifted</span>な値に翻訳され、</li>
<li><span class="ascii">unlifted</span>な型を持つ引数は、受け取る前に正格に評価され、サンクを持たない値となった後関数に渡されます。</li>
</ul>
<p>このような解釈によって、<span class="ascii">Haskell</span>での<span class="ascii">lifted/unlifted</span>の枠組みは保たれます。</p>
<p>ボトムについての形式的な議論は、領域理論という分野でされています。もし、<strong><span class="ascii">lifted/unlifted</span></strong>についての理論的な背景が知りたいなら、領域理論や表示的意味論について学習してみると良いでしょう<a href="#fn5" class="footnote-ref" id="fnref5"><sup>5</sup></a>。</p>
<p>ここまでのことを大雑把にまとめておきました。<span class="ascii">GHC</span>では型について幾つかの大別をしています<span class="ascii">:</span></p>
<ul>
<li>プリミティブ型<span class="ascii">/</span>非プリミティブ型<span class="ascii">: GHC</span>が自前で用意している特殊な型か、<span class="ascii">Haskell</span>で定義可能な型か</li>
<li>ボックス型<span class="ascii">/</span>非ボックス型<span class="ascii">:</span> ポインタで表され本体はヒープにあるような参照型か、実データで表される型か</li>
<li><span class="ascii">lifted</span>型<span class="ascii">/unlifted</span>型<span class="ascii">:</span> サンクを持ちボトムを値として含むような型か、サンクを持たない型か</li>
</ul>
<p>なお、非ボックス型は<span class="ascii">unlifted</span>であり、<span class="ascii">lifted</span>な型はボックス型になります<a href="#fn6" class="footnote-ref" id="fnref6"><sup>6</sup></a>。では、幾つかの型の種別を見て、今回は終わりにしましょう<span class="ascii">(</span><code>type * = TYPE 'LiftedRep</code>であることに注意してください！<span class="ascii">):</span></p>
<table>
<thead>
<tr class="header">
<th>型名</th>
<th>種</th>
<th>プリミティブ型か</th>
<th>ボックス型か</th>
<th><span class="ascii">lifted</span>か</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>Bool</code></td>
<td><code>TYPE 'LiftedRep</code></td>
<td><span class="ascii">x</span></td>
<td><span class="ascii">o</span></td>
<td><span class="ascii">o</span></td>
</tr>
<tr class="even">
<td><code>Int#</code></td>
<td><code>TYPE 'IntRep</code></td>
<td><span class="ascii">o</span></td>
<td><span class="ascii">x</span></td>
<td><span class="ascii">x</span></td>
</tr>
<tr class="odd">
<td><code>Array# a</code></td>
<td><code>TYPE 'UnliftedRep</code></td>
<td><span class="ascii">o</span></td>
<td><span class="ascii">o</span></td>
<td><span class="ascii">x</span></td>
</tr>
</tbody>
</table>
<h3 id="この章のまとめ">この章のまとめ</h3>
<p>この章では、型制約を表す種<code>Constraint</code>の紹介、型を種に、値を型に昇格する<code>DataKinds</code>拡張の紹介、そしてプリミティブ型の種と<span class="ascii">GHC</span>の型の大別について、お話ししました。</p>
<p>型制約には型制約種<code>Constraint</code>という種がつくのでした。データ宣言が型コンストラクタと値コンストラクタを作るように、型クラスは型制約コンストラクタと型制約下でのメソッド群を作るものとみることができました。また、型制約は、<code>=&gt;</code>によって制約が満たされるか検査されるのでしたね。ただ、<span class="ascii">Haskell</span>標準では型制約は決まった形状でしか書けませんでした。そのため、<code>ConstraintKinds</code>拡張が用意されており、この拡張によって型制約種を持つものならば変数であろうと型制約のペアであろうと、型制約として扱えるようになるのでした。また、この拡張によって、型制約のエイリアスも書けるようになりました。</p>
<p><code>DataKinds</code>はデータ型の型コンストラクタを種において使えるように、値コンストラクタを型において使えるようにするものでした。値コンストラクタは、昇格の際先頭に<code>'</code>をつけるのでした。また、<span class="ascii">Haskell</span>の種全般が、何かしらの型が昇格したものとみなせるという話もしましたね。<code>*</code>ですら、一つのデータ型でした。</p>
<p>最後に、<span class="ascii">GHC</span>のプリミティブ型、ボックス型、<span class="ascii">lifted</span>型という大別を紹介しました。</p>
<ul>
<li>プリミティブ型は、<span class="ascii">Haskell</span>では定義できない<span class="ascii">GHC</span>が事前に用意してくれている型でした。例えば<code>Int#</code>、<code>Array#</code>などがそうです。</li>
<li>ボックス型の値は、ポインタで表現されヒープ上に本体を持ちました。非ボックス型の値は、実データとして表現されます。</li>
<li><span class="ascii">lifted</span>型の値は、評価されるまではサンクを指すポインタとなっており、<code>undefined</code>などの評価すると例外になるようなものや無限ループでさえ値として持ち得るのでした。<span class="ascii">unlifted</span>型の値は、サンクを持たず、正格に評価されるのでした。</li>
</ul>
<p>以降では、少し高度な種に関する話題を紹介していきます。あまり知られてない機能や最近入った機能、まだ入ってない提案中のものなども紹介していきます。これらの話題は、最初に掲げた想定読者層から外れているのであまり詳しくは紹介しません。こんな話もあるんだぐらいに留めておいてもらえれば、良いでしょう。</p>
<h2 id="advanced-topics"><span class="ascii">Advanced Topics</span></h2>
<h3 id="もう一つの型の分類">もう一つの型の分類</h3>
<p>今までは、種に関する基本的な話題を紹介しました。ここでは、種とは別の、もう一つの型に付属する種別情報を紹介しましょう。それは、<span class="ascii">type role</span>と呼ばれるものです。<span class="ascii">type role</span>は、<code>GeneralizedNewtypeDeriving</code>という拡張と、密接な関係があります。</p>
<p>ここでは詳しく解説しませんが、<code>GeneralizedNewtypeDeriving</code>という拡張は、<code>newtype</code>で作った型のクラスインスタンス導出を簡略化するための拡張で、そのインスタンスを元の型のものを持ってきて実装します。この拡張は利便性を向上させますが、その導出が壊れるケースが出てきます。例えば次のケースです<span class="ascii">:</span></p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb42-1" data-line-number="1"><span class="ot">{-# LANGUAGE GeneralizedNewtypeDeriving, StandaloneDeriving, TypeFamilies #-}</span></a>
<a class="sourceLine" id="cb42-2" data-line-number="2"></a>
<a class="sourceLine" id="cb42-3" data-line-number="3"><span class="kw">newtype</span> <span class="dt">Age</span> <span class="fu">=</span> <span class="dt">MkAge</span> {<span class="ot"> unAge ::</span> <span class="dt">Int</span> }</a>
<a class="sourceLine" id="cb42-4" data-line-number="4"></a>
<a class="sourceLine" id="cb42-5" data-line-number="5"><span class="kw">type</span> family <span class="dt">Inspect</span> x</a>
<a class="sourceLine" id="cb42-6" data-line-number="6"><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Inspect</span> <span class="dt">Age</span> <span class="fu">=</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb42-7" data-line-number="7"><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Inspect</span> <span class="dt">Int</span> <span class="fu">=</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb42-8" data-line-number="8"></a>
<a class="sourceLine" id="cb42-9" data-line-number="9"><span class="kw">class</span> <span class="dt">BadIdea</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb42-10" data-line-number="10"><span class="ot">  bad ::</span> a <span class="ot">-&gt;</span> <span class="dt">Inspect</span> a</a>
<a class="sourceLine" id="cb42-11" data-line-number="11"></a>
<a class="sourceLine" id="cb42-12" data-line-number="12"><span class="kw">instance</span> <span class="dt">BadIdea</span> <span class="dt">Int</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb42-13" data-line-number="13">  bad <span class="fu">=</span> (<span class="fu">&gt;</span> <span class="dv">0</span>)</a>
<a class="sourceLine" id="cb42-14" data-line-number="14"></a>
<a class="sourceLine" id="cb42-15" data-line-number="15"><span class="kw">deriving</span> <span class="kw">instance</span> <span class="dt">BadIdea</span> <span class="dt">Age</span> <span class="co">-- 壊れた導出になる</span></a>
<a class="sourceLine" id="cb42-16" data-line-number="16"><span class="co">{- | 上のものは、以下のものと同じ</span></a>
<a class="sourceLine" id="cb42-17" data-line-number="17"><span class="co">instance BadIdea Age where</span></a>
<a class="sourceLine" id="cb42-18" data-line-number="18"><span class="co">  bad = coerce (bad :: Int -&gt; Inspect Int)</span></a>
<a class="sourceLine" id="cb42-19" data-line-number="19"><span class="co">-}</span></a></code></pre></div>
<p><code>Age -&gt; Inspect Age</code>は<code>Age -&gt; Int</code>と同じ、<code>Int -&gt; Inspect Int</code>は<code>Int -&gt; Bool</code>と同じであるということに注意してください。この場合、<code>Age</code>と<code>Int</code>は同じ実行時表現を持ちますが、<code>Int</code>と<code>Bool</code>は同じ表現を持たないわけですから、直感的には<code>Int -&gt; Inspect Int</code>を<code>Age -&gt; Inspect Age</code>にキャストすることは型の健全性を壊します。</p>
<p><span class="ascii">type role</span>は、二つの型が同じ表現を持つ型かどうかを判断するために、組み込まれた機能です。つまり、キャストが型安全にできるかを判断するためのものなのです。データ型や型クラス、型族などの型変数は、<span class="ascii">type role</span>を持ちます。<span class="ascii">type role</span>の概念は、<code>a</code>と<code>b</code>という型が同じ表現を持つときに<span class="ascii">(</span>例えば、<code>Int</code>と<code>Age</code>は同じ表現を持ちます<span class="ascii">)</span>、型コンストラクタや型族<code>T</code>に対して<code>T a</code>と<code>T b</code>が同じ表現を持つかを判断するための機構で、<code>T</code>のどのパラメータが判断するときに関与するか、という情報を持ちます。<span class="ascii">type role</span>は以下の三種類があります<span class="ascii">:</span></p>
<ul>
<li><p><span class="ascii">nominal:</span> 受け取ったパラメータの型が例え同じ表現であっても、全体として同じ表現になるとは限らないことを示します<span class="ascii">:</span></p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb43-1" data-line-number="1"><span class="kw">type</span> family <span class="dt">F</span> a <span class="co">-- a has nominal type role</span></a>
<a class="sourceLine" id="cb43-2" data-line-number="2"></a>
<a class="sourceLine" id="cb43-3" data-line-number="3"><span class="kw">data</span> <span class="dt">D</span> a <span class="fu">=</span> <span class="dt">D</span> (<span class="dt">F</span> a) <span class="co">-- a has nominal type role</span></a></code></pre></div></li>
<li><p><span class="ascii">representational:</span> 受け取ったパラメータの型が同じ表現であるならば、全体としても同じ表現になることを示します。一般的にはこの<span class="ascii">type role</span>を持ちます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb44-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Simple</span> a <span class="fu">=</span> <span class="dt">Simple</span> a <span class="co">-- a has representational type role</span></a></code></pre></div></li>
<li><p><span class="ascii">phantom:</span> 受け取ったパラメータが、表現に全く関与しないことを示します<span class="ascii">:</span></p>
<div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb45-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Tag</span> a <span class="fu">=</span> <span class="dt">Tag</span> <span class="co">-- a has phantom type role</span></a></code></pre></div></li>
</ul>
<p>これらの<span class="ascii">type role</span>は推論によって決定するようになっているため、私たちは普段特に意識する必要はありません。ただし、推論結果が意図しないものである場合もあります。その際は、<code>RoleAnnotations</code>拡張を使って、以下のようにすることで、<span class="ascii">type role</span>を明示的に書くこともできます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb46-1" data-line-number="1"><span class="kw">type</span> role <span class="dt">T</span> nominal _ phantom</a>
<a class="sourceLine" id="cb46-2" data-line-number="2"><span class="kw">data</span> <span class="dt">T</span> a b c <span class="fu">=</span> <span class="dt">T</span> <span class="dt">Int</span> b</a></code></pre></div>
<p><code>_</code>は推論に任せることを意味します。</p>
<p><span class="ascii">type role</span>に興味があるならば、<a href="https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/glasgow_exts.html#roles"><span class="ascii">GHC User</span>’<span class="ascii">s Guide - 9.36 Roles</span></a>を読んでみると良いでしょう。また、歴史的経緯については、<a href="https://typesandkinds.wordpress.com/2013/08/15/roles-a-new-feature-of-ghc/"><span class="ascii">Roles: a new feature of GHC</span></a>に簡潔にまとまっています。</p>
<h3 id="軽率多相">軽率多相</h3>
<p>前の章では、プリミティブ型の種を紹介しました。この種は<code>TYPE :: RuntimeRep -&gt; *</code>という型コンストラクタを昇格したものによって、作られているのでした。そして、<code>*</code>でさえ<code>TYPE 'LiftedRep</code>のエイリアスでしか無かったのでしたね。このような種の表現になったのは、実は最近のことです。昔はそれぞれの種は実行時の表現ごとに切り離されていました。<code>TYPE</code>を使って共通化されたのには、幾つかの歴史的経緯があり、 <strong>軽率多相<span class="ascii">(levity polymorphism)</span></strong> という話題と密接な関係があります。軽率多相は、種多相を少し制限したものです。種多相は任意の種を扱えるような種変数を許容しますが、軽率多相は実行時表現に関係するような範囲での種の多相を提供します。</p>
<p>関数型コンストラクタ<code>(-&gt;)</code>の種は、<code>(-&gt;) :: * -&gt; * -&gt; *</code>であると話してきました。実際には、<code>(-&gt;) :: TYPE q -&gt; TYPE r -&gt; *</code>というような種を持っています。<code>TYPE</code>の引数の部分は、任意の<code>RuntimeRep</code>をとれるようになっています。確認してみましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb47"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb47-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XTypeInType</span> <span class="fu">-</span><span class="dt">XKindSignatures</span></a>
<a class="sourceLine" id="cb47-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">import</span> <span class="dt">GHC.Exts</span></a>
<a class="sourceLine" id="cb47-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">type</span> <span class="dt">CheckFuncType</span> (<span class="ot">q ::</span> <span class="dt">RuntimeRep</span>) (<span class="ot">r ::</span> <span class="dt">RuntimeRep</span>) (<span class="ot">a ::</span> <span class="dt">TYPE</span> q) (<span class="ot">b ::</span> <span class="dt">TYPE</span> r) <span class="fu">=</span> a <span class="ot">-&gt;</span> b <span class="co">-- no error</span></a></code></pre></div>
<p><code>TypeInType</code>拡張については、後ほど解説しますので、今はおまじないとしておきましょう。上の例では、任意の<code>RuntimeRep</code>に対して、確かに関数型コンストラクタが有効であることが確認できます。このように関数型コンストラタは軽率多相化されています。なので、私たちは<code>Int# -&gt; Int#</code>といったような関数を、通常の関数型の表記で書けるようになっていたのです。</p>
<p>関数型が軽率多相化されているということは、軽率多相化された関数が書けるということでもあります。実際、幾つかの関数は軽率多相化された形で提供されています。例えば<code>($)</code>や<code>error</code>などがそうです。ただし、軽率多相は全てに気軽に適用できるというわけではありません。以下の例を考えて見ましょう<span class="ascii">:</span></p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb48-1" data-line-number="1"><span class="ot">{-# LANGUAGE TypeInType, KindSignatures, ExplicitForAll #-}</span></a>
<a class="sourceLine" id="cb48-2" data-line-number="2"></a>
<a class="sourceLine" id="cb48-3" data-line-number="3"><span class="kw">import</span> <span class="dt">GHC.Exts</span> (<span class="dt">RuntimeRep</span>, <span class="dt">TYPE</span>)</a>
<a class="sourceLine" id="cb48-4" data-line-number="4"></a>
<a class="sourceLine" id="cb48-5" data-line-number="5"><span class="ot">bad ::</span> forall (<span class="ot">r1 ::</span> <span class="dt">RuntimeRep</span>) (<span class="ot">r2 ::</span> <span class="dt">RuntimeRep</span>)</a>
<a class="sourceLine" id="cb48-6" data-line-number="6">              (<span class="ot">a ::</span> <span class="dt">TYPE</span> r1) (<span class="ot">b ::</span> <span class="dt">TYPE</span> r2)<span class="fu">.</span></a>
<a class="sourceLine" id="cb48-7" data-line-number="7">       (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b</a>
<a class="sourceLine" id="cb48-8" data-line-number="8">bad f x <span class="fu">=</span> f x</a></code></pre></div>
<p>この例は、<code>($)</code>を軽率多相化した例になります。しかし、この実装には幾つかの問題があります。<code>bad</code>をコンパイルすることを考えてみてください。<code>bad</code>の引数<code>f</code>はただの関数なので問題ありませんが、引数<code>x</code>は軽率多相化されています。<code>x</code>は果たして実データかポインタかどちらでしょうか？ また、サンクを持っているのでしょうか？ <code>x</code>のビット幅は？ <code>x</code>はどのレジスタに格納すべきでしょうか？ 私たちはコンパイル時に、この質問に答えることはできません。なぜなら実データである場合もありポインタである場合もありますし、サンクを持っているかもしれません。浮動小数点数である場合も整数である場合もあり、ビット幅も一定ではないからです！ つまり私たちは、<code>bad</code>の引数<code>x</code>をどのように扱えばいいのか、コンパイル時に決めることができないのです。これは、引数が軽率多相化された関数全てに対して当てはまることです。このため、<span class="ascii">GHC</span>では軽率多相化したような変数を使った関数宣言は許可されていません。ですが、注意して欲しいのは、次のような関数は作ることができるということです<span class="ascii">:</span></p>
<div class="sourceCode" id="cb49"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb49-1" data-line-number="1"><span class="ot">{-# LANGUAGE TypeInType, KindSignatures, ExplicitForAll #-}</span></a>
<a class="sourceLine" id="cb49-2" data-line-number="2"></a>
<a class="sourceLine" id="cb49-3" data-line-number="3"><span class="kw">import</span> <span class="dt">GHC.Exts</span> (<span class="dt">RuntimeRep</span>, <span class="dt">TYPE</span>)</a>
<a class="sourceLine" id="cb49-4" data-line-number="4"></a>
<a class="sourceLine" id="cb49-5" data-line-number="5"><span class="ot">good ::</span> forall (<span class="ot">r1 ::</span> <span class="dt">RuntimeRep</span>) (<span class="ot">r2 ::</span> <span class="dt">RuntimeRep</span>)</a>
<a class="sourceLine" id="cb49-6" data-line-number="6">              (<span class="ot">a ::</span> <span class="dt">TYPE</span> r1) (<span class="ot">b ::</span> <span class="dt">TYPE</span> r2)<span class="fu">.</span></a>
<a class="sourceLine" id="cb49-7" data-line-number="7">       (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b</a>
<a class="sourceLine" id="cb49-8" data-line-number="8">good f <span class="fu">=</span> f</a></code></pre></div>
<p>この場合、軽率多相化された変数はどこにも出てきていません。</p>
<p>ところで、軽率多相の焦点は、実行時表現の中でも<span class="ascii">lifted/unlifted</span>の枠組みについてです。<span class="ascii">lifted</span>な型の値はサンクを持ち遅延評価を主とし、<span class="ascii">unlifted</span>な型の値はサンクを持たないので正格評価になるのでしたね。このサンクを持つ持たないに関わらず関数を多相化して書けるようにするのが、軽率多相の主な目的です。ですが、<span class="ascii">GHC</span>ではもう一つ重要な<span class="ascii">boxed/unboxed</span>という枠組みもあるのでしたね。この二つの枠組みを分けて多相化できるように、現在次のような変更も提案されています<span class="ascii">:</span></p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb50-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Boxity</span> <span class="fu">=</span> <span class="dt">Boxed</span> <span class="fu">|</span> <span class="dt">Unboxed</span></a>
<a class="sourceLine" id="cb50-2" data-line-number="2"><span class="kw">data</span> <span class="dt">Levity</span> <span class="fu">=</span> <span class="dt">Lifted</span> <span class="fu">|</span> <span class="dt">Unlifted</span></a>
<a class="sourceLine" id="cb50-3" data-line-number="3"><span class="kw">data</span> <span class="dt">TYPE</span> (<span class="ot">b ::</span> <span class="dt">Boxity</span>) (<span class="ot">l ::</span> <span class="dt">Levity</span>)</a>
<a class="sourceLine" id="cb50-4" data-line-number="4"></a>
<a class="sourceLine" id="cb50-5" data-line-number="5"><span class="kw">type</span> <span class="fu">*</span> <span class="fu">=</span> <span class="dt">TYPE</span> <span class="ch">&#39;Boxed &#39;</span><span class="dt">Lifted</span></a></code></pre></div>
<p>もし、軽率多相に興味があるならば、原論文<a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/levity-1.pdf"><span class="ascii">Levity Polymorphism (extended version)</span></a>を読んでみるのがいいでしょう。この論文では、軽率多相に至るまでの<span class="ascii">GHC</span>での経緯と問題点、軽率多相の動機などが丁寧に解説されています。また、論文より説明が若干劣りますが<a href="https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/glasgow_exts.html#levity-polymorphism"><span class="ascii">GHC User</span>’<span class="ascii">s Guide - 9.12 Levity polymorphism</span></a>にも、<span class="ascii">GHC</span>での軽率多相についての仕組みが書かれています。</p>
<h3 id="トップレベル種注釈">トップレベル種注釈</h3>
<p><code>KindSignatures</code>拡張は、種の注釈を書けるようにするようなものでした。<code>KindSignatures</code>は型パラメータの種を明示的に書くことができるようにする拡張でしたね。種が明示されないパラメータは、種推論によってその種が定まります。ですが、種推論は幾つか制約があり、その一つに再帰的データ型に対しては、単相的な再帰の種推論しか行えないというものがあります。以下のケースを見てください<span class="ascii">:</span></p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb51-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XPolyKinds</span></a>
<a class="sourceLine" id="cb51-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">T</span> m a <span class="fu">=</span> <span class="dt">Nil</span> <span class="fu">|</span> <span class="dt">MkT</span> (m a) (<span class="dt">T</span> <span class="dt">Maybe</span> (m a))</a>
<a class="sourceLine" id="cb51-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">T</span></a>
<a class="sourceLine" id="cb51-4" data-line-number="4"><span class="dt">T</span><span class="ot"> ::</span> (<span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span>) <span class="ot">-&gt;</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span></a></code></pre></div>
<p>このデータ型<code>T</code>の種は<code>(k -&gt; *) -&gt; k -&gt; *</code>というような多相化された種でも問題ないはずですが、実際には<code>PolyKinds</code>をつけているにも関わらず<code>*</code>で単相化されて推論されます。単相制約によって、例えば次のように、一部種注釈を書いてもうまく推論できません<span class="ascii">:</span></p>
<div class="sourceCode" id="cb52"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb52-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">T</span> (<span class="ot">m ::</span> k <span class="ot">-&gt;</span> <span class="fu">*</span>) a <span class="fu">=</span> <span class="dt">Nil</span> <span class="fu">|</span> <span class="dt">MkT</span> (m a) (<span class="dt">T</span> <span class="dt">Maybe</span> (m a))</a>
<a class="sourceLine" id="cb52-2" data-line-number="2"></a>
<a class="sourceLine" id="cb52-3" data-line-number="3"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">49</span><span class="fu">:</span><span class="dv">45</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb52-4" data-line-number="4">    • <span class="dt">Expected</span> kind ‘k <span class="ot">-&gt;</span> <span class="fu">*</span>’, but ‘<span class="dt">Maybe</span>’ has kind ‘<span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span>’</a>
<a class="sourceLine" id="cb52-5" data-line-number="5">    • <span class="dt">In</span> the first argument <span class="kw">of</span> ‘<span class="dt">T</span>’, namely ‘<span class="dt">Maybe</span>’</a>
<a class="sourceLine" id="cb52-6" data-line-number="6">      <span class="dt">In</span> the <span class="kw">type</span> ‘<span class="dt">T</span> <span class="dt">Maybe</span> (m a)’</a>
<a class="sourceLine" id="cb52-7" data-line-number="7">      <span class="dt">In</span> the definition <span class="kw">of</span> <span class="kw">data</span> constructor ‘<span class="dt">MkT</span>’</a>
<a class="sourceLine" id="cb52-8" data-line-number="8"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">T</span> m (<span class="ot">a ::</span> k) <span class="fu">=</span> <span class="dt">Nil</span> <span class="fu">|</span> <span class="dt">MkT</span> (m a) (<span class="dt">T</span> <span class="dt">Maybe</span> (m a))</a>
<a class="sourceLine" id="cb52-9" data-line-number="9"></a>
<a class="sourceLine" id="cb52-10" data-line-number="10"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">50</span><span class="fu">:</span><span class="dv">40</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb52-11" data-line-number="11">    • <span class="dt">Expected</span> kind ‘k <span class="ot">-&gt;</span> <span class="fu">*</span>’, but ‘<span class="dt">Maybe</span>’ has kind ‘<span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span>’</a>
<a class="sourceLine" id="cb52-12" data-line-number="12">    • <span class="dt">In</span> the first argument <span class="kw">of</span> ‘<span class="dt">T</span>’, namely ‘<span class="dt">Maybe</span>’</a>
<a class="sourceLine" id="cb52-13" data-line-number="13">      <span class="dt">In</span> the <span class="kw">type</span> ‘<span class="dt">T</span> <span class="dt">Maybe</span> (m a)’</a>
<a class="sourceLine" id="cb52-14" data-line-number="14">      <span class="dt">In</span> the definition <span class="kw">of</span> <span class="kw">data</span> constructor ‘<span class="dt">MkT</span>’</a></code></pre></div>
<p>ですが、私たちは完全に種推論に頼らないような種注釈を提供することで、<code>T :: (k -&gt; *) -&gt; k -&gt; *</code>というような種多相化された型コンストラクタを作ることができます<span class="ascii">:</span></p>
<div class="sourceCode" id="cb53"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb53-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">T</span> (<span class="ot">m ::</span> k <span class="ot">-&gt;</span> <span class="fu">*</span>) (<span class="ot">a ::</span> k) <span class="fu">=</span> <span class="dt">Nil</span> <span class="fu">|</span> <span class="dt">MkT</span> (m a) (<span class="dt">T</span> <span class="dt">Maybe</span> (m a))</a>
<a class="sourceLine" id="cb53-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">T</span></a>
<a class="sourceLine" id="cb53-3" data-line-number="3"><span class="dt">T</span><span class="ot"> ::</span> (k <span class="ot">-&gt;</span> <span class="fu">*</span>) <span class="ot">-&gt;</span> k <span class="ot">-&gt;</span> <span class="fu">*</span></a></code></pre></div>
<p>このような完全に種が提供されているような種注釈の形式を、<span class="ascii">GHC</span>では <strong><span class="ascii">CUSKs(Complete User-Supplied Kind signatures)</span></strong> と呼んでいます。<span class="ascii">CUSK</span>は、種多相な再帰的データ型を提供する場合必須のものになってきますが、上の例からも分かる通り非常に見にくいのが難点です。また構文を解析して<span class="ascii">CUSK</span>か判断するのにも、手間がかかります。そのため、現在<span class="ascii">CUSK</span>に代わるものとして、 <strong>トップレベル種注釈<span class="ascii">(top-level kind signatures)</span></strong> という機能が提案されています。この提案は、上の例の<span class="ascii">CUSK</span>と同等の注釈を、次のように書けるようにするものです<span class="ascii">:</span></p>
<div class="sourceCode" id="cb54"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb54-1" data-line-number="1"><span class="kw">type</span> <span class="dt">T</span><span class="ot"> ::</span> (k <span class="ot">-&gt;</span> <span class="fu">*</span>) <span class="ot">-&gt;</span> k <span class="ot">-&gt;</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb54-2" data-line-number="2"><span class="kw">data</span> <span class="dt">T</span> m a <span class="fu">=</span> <span class="dt">Nil</span> <span class="fu">|</span> <span class="dt">MkT</span> (m a) (<span class="dt">T</span> <span class="dt">Maybe</span> (m a))</a></code></pre></div>
<p>関数の型注釈などと同じスタイルで、非常に見やすいですね。</p>
<p>トップレベル種注釈は、現在、<a href="https://github.com/ghc-proposals/ghc-proposals/pull/54"><span class="ascii">GHC Proposals - Pull Request #54</span></a>で提案されています。興味がある方は、<a href="https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/glasgow_exts.html#complete-user-supplied-kind-signatures-and-polymorphic-recursion"><span class="ascii">GHC User</span>’<span class="ascii">s Guide - 9.11.5 Complete user-supplied kind signatures and polymorphic recursion</span></a>と合わせて提案内容を見てみると良いでしょう。</p>
<h3 id="unliftedデータ型"><span class="ascii">Unlifted</span>データ型</h3>
<p><span class="ascii">Haskell</span>のデータ型は、<span class="ascii">lifted</span>という枠組みの型でした。<span class="ascii">lifted</span>な型は、評価されるまではサンクになっているのでした。<span class="ascii">unlifted</span>な型は、<span class="ascii">GHC</span>で幾つかプリミティブ型として提供されているのでした。現在、<strong><span class="ascii">unlifted</span>データ型</strong>という拡張が提案されています。この拡張は、ユーザー定義の<span class="ascii">unlifted</span>な型を定義できるようにする拡張です。</p>
<p>この拡張は、次のような新たなデータ宣言をできるようにするものです<span class="ascii">:</span></p>
<div class="sourceCode" id="cb55"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb55-1" data-line-number="1"><span class="kw">data</span> unlifted <span class="dt">UBool</span> <span class="fu">=</span> <span class="dt">UTrue</span> <span class="fu">|</span> <span class="dt">UFalse</span></a></code></pre></div>
<p>ここで、<code>UBool</code>型の値は、<span class="ascii">unlifted</span>な型でありボックス型であるようなデータ型になります。つまり、<code>Array# a</code>と同じようなデータ型で、サンクを持たずポインタでヒープ上の本体を指し示すような表現がされます。そして、その種は<code>TYPE 'UnliftedRep</code>になります。また、この拡張下では、<span class="ascii">unlifted</span>型の<code>newtype</code>が行えるようにするという提案もされています。</p>
<p>ただこの拡張は新たなシンタックスを導入することになるため、<code>GADTSyntax</code>と<code>KindSignatures</code>を使って以下のようなことをできるようにすることが、代わりに提案されています<span class="ascii">:</span></p>
<div class="sourceCode" id="cb56"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb56-1" data-line-number="1"><span class="ot">{-# LANGUAGE GADTSyntax, KindSignatures #-}</span></a>
<a class="sourceLine" id="cb56-2" data-line-number="2"></a>
<a class="sourceLine" id="cb56-3" data-line-number="3"><span class="kw">data</span> <span class="dt">UBool</span><span class="ot"> ::</span> <span class="dt">TYPE</span> <span class="ch">&#39;UnliftedRep where</span></a>
<a class="sourceLine" id="cb56-4" data-line-number="4">    <span class="dt">UTrue</span><span class="ot">  ::</span> <span class="dt">UBool</span></a>
<a class="sourceLine" id="cb56-5" data-line-number="5">    <span class="dt">UFalse</span><span class="ot"> ::</span> <span class="dt">UBool</span></a></code></pre></div>
<p>これにより、新たな構文を導入しなくても、<span class="ascii">unlifted</span>なデータ型を定義できるようになります。</p>
<p><span class="ascii">unlifted</span>データ型について興味があるならば、<a href="https://ghc.haskell.org/trac/ghc/wiki/UnliftedDataTypes"><span class="ascii">GHC Wiki - UnliftedDataTypes</span></a>のページを見てみると良いでしょう。このページに、主な提案内容が書かれています。</p>
<h3 id="type-in-type"><span class="ascii">Type in Type</span></h3>
<p><code>TypeInType</code>拡張は、<code>DataKinds</code>拡張と<code>PolyKinds</code>拡張をより強力にした拡張です。例えば、以下のようなことができるようになります<span class="ascii">:</span></p>
<div class="sourceCode" id="cb57"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb57-1" data-line-number="1"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XTypeInType</span> <span class="fu">-</span>fprint<span class="fu">-</span>explicit<span class="fu">-</span>foralls</a>
<a class="sourceLine" id="cb57-2" data-line-number="2"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- 型エイリアスを種として使えるようになる</span></a>
<a class="sourceLine" id="cb57-3" data-line-number="3"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">type</span> <span class="dt">B</span> <span class="fu">=</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb57-4" data-line-number="4"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">D</span> (<span class="ot">a ::</span> <span class="dt">B</span>)</a>
<a class="sourceLine" id="cb57-5" data-line-number="5"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">D</span></a>
<a class="sourceLine" id="cb57-6" data-line-number="6"><span class="dt">D</span><span class="ot"> ::</span> <span class="dt">B</span> <span class="ot">-&gt;</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb57-7" data-line-number="7"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- より広い範囲の多相を書けるようになる</span></a>
<a class="sourceLine" id="cb57-8" data-line-number="8"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">A</span> (<span class="ot">d ::</span> <span class="dt">D</span> a)</a>
<a class="sourceLine" id="cb57-9" data-line-number="9"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">A</span></a>
<a class="sourceLine" id="cb57-10" data-line-number="10"><span class="dt">A</span><span class="ot"> ::</span> forall (<span class="ot">a ::</span> <span class="dt">B</span>)<span class="fu">.</span> <span class="dt">D</span> a <span class="ot">-&gt;</span> <span class="fu">*</span></a>
<a class="sourceLine" id="cb57-11" data-line-number="11"><span class="fu">&gt;&gt;&gt;</span> <span class="co">-- RankN多相な種を書けるようになる</span></a>
<a class="sourceLine" id="cb57-12" data-line-number="12"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XRankNTypes</span></a>
<a class="sourceLine" id="cb57-13" data-line-number="13"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">data</span> <span class="dt">AN</span> (<span class="ot">d ::</span> forall a<span class="fu">.</span> <span class="dt">D</span> a)</a>
<a class="sourceLine" id="cb57-14" data-line-number="14"><span class="fu">&gt;&gt;&gt;</span> <span class="fu">:</span>kind <span class="dt">AN</span></a>
<a class="sourceLine" id="cb57-15" data-line-number="15"><span class="dt">AN</span><span class="ot"> ::</span> (forall (<span class="ot">a ::</span> <span class="dt">B</span>)<span class="fu">.</span> <span class="dt">D</span> a) <span class="ot">-&gt;</span> <span class="fu">*</span></a></code></pre></div>
<p>このように、型注釈でできたことが、種注釈でできるようになるわけです。</p>
<p>ただし、この拡張は現状とても不安定であり、使用が推奨されているわけではありません。この拡張を使用する場合は、コンパイル時、内部でこの拡張の挙動をチェックするように<code>-dcore-lint</code>というフラグを使用することが推奨されています。将来的には、この拡張の範囲を型と種の範囲から、型と値の範囲、ひいては種と型と値の違いを取り払い、依存型というシステムに徐々に近づけていくことも視野に入れているようです。ただし、まずは種と型の範囲で安定的な機能を提供するのが、目的ということでしょう。</p>
<p><code>TypeInType</code>拡張については、主に<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#overview-of-type-in-type"><span class="ascii">GHC User</span>’<span class="ascii">s Guide - 9.11.3 Overview of Type-in-Type</span></a>に、その概要が書かれています。</p>
<h3 id="この章のまとめ-1">この章のまとめ</h3>
<p>この章では、幾つかの種に関する話題をかいつまんで紹介しました。</p>
<p><span class="ascii">type role</span>は、二つの型が同じ内部表現を持つ型かを判定するための、型変数が持つ種とは異なる情報でした。<span class="ascii">nominal/representational/phantom</span>の三種があり、データ宣言でどの<span class="ascii">type role</span>を割り当てるかが推論されるのでした。また、<code>RoleAnnotations</code>拡張によって明示的に指定することも可能なのでした。</p>
<p>軽率多相<span class="ascii">(levity polymorphism)</span>は<span class="ascii">lifted/unlifted</span>の違いを吸収する多相でした。これによって、<span class="ascii">lifted/unlifted</span>の違いを問わない多相化された関数を書けるようになるのでした。ただし、全ての関数を制限なく軽率多相化することはできず、関数の引数が軽率多相化されているようなものは、機械語にうまく翻訳できないため書けないのでした。</p>
<p>トップレベル種注釈は、既存の<span class="ascii">CUSK</span>という種注釈の方法に変わり、種注釈を分かりやすく書くための提案でした。再帰的データ型に対して種推論がうまく働かないという制約から、多相的な種を使用する場合、種推論に頼らず完全な種の情報を提供する必要があり、完全に情報が提供されるような種の注釈を<span class="ascii">GHC</span>では<span class="ascii">CUSK</span>と読んでいるのでした。しかし、<span class="ascii">CUSK</span>は一般的に見づらいため、それを解決するための提案でしたね。この提案されている構文は、関数の型注釈と同じスタイルで非常に分かりやすいですね。</p>
<p><span class="ascii">unlifted</span>データ型は、<span class="ascii">unlifted</span>な型を定義できるようにするような拡張として提案されているものでした。この拡張により、ボックス型でかつ<span class="ascii">unlifted</span>なもの、つまりサンクを持たないボックス型を定義できるようになるのでした。現状、幾つか議論されるべき課題が残っていますが、近い将来導入されるかもしれません。</p>
<p><code>TypeInType</code>は型と種の違いを取り払うような拡張でした。これにより、型エイリアスを種に昇格したり、<span class="ascii">RankN</span>の種注釈を書けるようになるのでした。ただし、現状は非常に不安定であり、使用には注意が必要です。</p>
<h2 id="まとめ">まとめ</h2>
<p>さて、<span class="ascii">Part 1</span>と合わせて、一通りの種に関する話題を紹介してきました。種の仕組みの紹介と<span class="ascii">5</span>つの大きな話題を取り扱ってきました。また、少し高度な話題を幾つか、駆け足で紹介しました。この二つの記事が、何かの役に立てば幸いです。</p>
<p>もし、<span class="ascii">Advanced Topics</span>の内容について、詳細が知りたいという声が多ければ、<span class="ascii">Part 3</span>を書くかもしれませんが、ひとまずはこれで。では、良い<span class="ascii">Haskell</span>ライフをノシ</p>
<h2 id="参考文献">参考文献</h2>
<ul>
<li><a href="https://www.haskell.org/onlinereport/haskell2010/haskell.html"><span class="ascii">Haskell 2010 Language Report</span></a><span class="ascii">: Haskell2010</span>の仕様書です。主に標準の仕組みを紹介する際に参照しました。
<ul>
<li><a href="https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-630004.1"><span class="ascii">4.1 Overview of Types and Classes</span></a><span class="ascii">:</span> 標準の型システムや型制約について、書かれています。</li>
</ul></li>
<li><a href="https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/"><span class="ascii">GHC 8.2.1 Users Guide</span></a><span class="ascii">:</span> 主な種に関する参考資料としてと<span class="ascii">GHC</span>拡張についての資料として参考にしました。
<ul>
<li><a href="https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/glasgow_exts.html#unboxed-types-and-primitive-operations"><span class="ascii">9.2 Unboxed types and primitive operations</span></a><span class="ascii">:</span> 非ボックス型を主とするプリミティブ型と、その演算のために用意されている関数についての解説が書かれています。</li>
<li><a href="https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/glasgow_exts.html#datatype-promotion"><span class="ascii">9.10 Datatype promotion</span></a><span class="ascii">:</span> <code>DataKinds</code>拡張の動機と解説が書かれています。</li>
<li><a href="https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/glasgow_exts.html#kind-polymorphism-and-type-in-type"><span class="ascii">9.11 Kind polymorphism and Type-in-Type</span></a><span class="ascii">: GHC</span>においての種推論などの、種に関することが総括してあります。</li>
<li><a href="https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/glasgow_exts.html#levity-polymorphism"><span class="ascii">9.12 Levity polymorphism</span></a><span class="ascii">:</span> 軽率多相に関する<span class="ascii">GHC</span>での主な仕組みや制約について解説されています。</li>
<li><a href="https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/glasgow_exts.html#constraints-in-types"><span class="ascii">9.14 Constraints in types</span></a><span class="ascii">:</span> 型制約に関する、<span class="ascii">GHC</span>上のいくつかの話題が書かれています。</li>
<li><a href="https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/glasgow_exts.html#roles"><span class="ascii">9.36 Roles</span></a><span class="ascii">: type role</span>についての、動機と解説が書かれています。</li>
</ul></li>
<li><a href="https://github.com/ghc-proposals/ghc-proposals"><span class="ascii">GHC Proposals</span></a><span class="ascii">: GHC</span>での実装面、言語面での提案を管理するリポジトリです。
<ul>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/blob/c8931ec32464040334ee6a0ad8299309d0424ee8/proposals/0003-levity-polymorphism.rst"><span class="ascii">Revise Levity Polymorphism</span></a><span class="ascii">: GHC 8.2.1</span>での軽率多相に関する変更が書かれています。</li>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/pull/54"><span class="ascii">Top-level kind signatures (instead of CUSKs)</span></a><span class="ascii">:</span> トップレベル型注釈に関しての提案です。</li>
</ul></li>
<li><a href="https://ghc.haskell.org/trac/ghc/"><span class="ascii">GHC Developer Wiki</span></a><span class="ascii">: GHC</span>の実装に関する事や、その元となるアイデアについてまとめられている<span class="ascii">Wiki</span>です。
<ul>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/Kinds"><span class="ascii">Commentary/Compiler/Kinds</span></a><span class="ascii">:</span> この記事のストーリーを決める際に参照しました。</li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/TypeType"><span class="ascii">Commentary/Compiler/TypeType</span></a><span class="ascii">: GHC</span>の型にまつわる内部表現や分類法などについて書かれています。</li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/Rts/Storage/HeapObjects"><span class="ascii">Commentary/Rts/Storage/HeapObjects</span></a><span class="ascii">: GHC</span>オブジェクトの内部表現について書かれています。<span class="ascii">lifted/unlifted</span>、<span class="ascii">boxed/unboxed</span>の違いについて、参考にしました。</li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/GhcKinds"><span class="ascii">GhcKinds</span></a><span class="ascii">:</span> <code>PolyKinds</code>拡張に関する話題がまとまっているページです。</li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/UnliftedDataTypes"><span class="ascii">UnliftedDataTypes</span></a><span class="ascii">: unlifted</span>データ型を定義できるようにするための拡張の提案が、まとめられているページです。</li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/NoSubKinds"><span class="ascii">NoSubKinds</span></a><span class="ascii">:</span> 軽率多相以前の<span class="ascii">GHC</span>の仕組みとして、<code>OpenKind</code>というものがありました。しかしながら、この仕組みは幾つか問題が知られており、現在は軽率多相によって置き換えられています。ここでは、<code>OpenKind</code>の仕組みと問題点、その解決法が書いてあります。</li>
</ul></li>
<li>その他の参考文献<span class="ascii">:</span>
<ul>
<li><a href="http://dreixel.net/research/pdf/ghp.pdf"><span class="ascii">Giving Haskell a Promotion</span></a><span class="ascii">:</span> <code>DataKinds</code>拡張の提唱論文です。<code>DataKinds</code>について紹介する時、参考にしました。</li>
<li><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/levity-1.pdf"><span class="ascii">Levity Polymorphism (extended version)</span></a><span class="ascii">:</span> 軽率多相の提唱論文です。軽率多相について紹介する時、参考にしました。</li>
<li><a href="https://link.springer.com/content/pdf/10.1007%2F3540543961_30.pdf"><span class="ascii">Unboxed values a non-strict as first class citizens in functional language</span></a><span class="ascii">:</span> 非ボックス型の提唱論文です。<span class="ascii">unlifted</span>な型の意味を紹介する場合に、参考にしました。</li>
</ul></li>
</ul>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>型コンストラクタは値を持てないことに注意してください！ 何らかの値を持つ型は全て<code>*</code>という種を持つものになっており、例えば<code>Maybe :: * -&gt; *</code>という型コンストラクタはそれだけでは値を持たず、<code>Maybe Int</code>など型を一つ渡して初めて値を持つような型になるのでした。<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>ここでの<code>Bool</code>は、<code>Bool</code>型が種に昇格したものという点にも注意してくださいね！<code>DataKinds</code>拡張によって、データ型は種に昇格できるのでした。<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p><code>VecRep</code>を持つプリミティブ型は紹介しませんでしたが、この型は<span class="ascii">SIMD</span>ベクトル演算を利用するために用意されています。<code>VecCount</code>はレーン数、<code>VecElem</code>は<span class="ascii">SIMD API</span>のどのデータ型を使用するかを表します。これらのプリミティブ型は<a href="https://hackage.haskell.org/package/ghc-prim-0.5.1.0/docs/GHC-Prim.html#g:29"><span class="ascii">SIMD Vectors</span></a>の章にまとまっているので、興味があれば見てみると良いでしょう。<a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>この種の定義は、<a href="https://hackage.haskell.org/package/ghc-prim-0.5.1.0/docs/GHC-Types.html#t:-42-"><span class="ascii">GHC.Types</span>モジュール</a>で確認することができます。他にも、エイリアスとして<a href="https://hackage.haskell.org/package/ghc-prim-0.5.1.0/docs/GHC-Types.html#t:Type"><code>Type</code></a>や<span class="ascii">Unicode</span>版の<a href="https://hackage.haskell.org/package/ghc-prim-0.5.1.0/docs/GHC-Types.html#t:-9733-"><code>★</code></a>が用意されています。<a href="#fnref4" class="footnote-back">↩</a></p></li>
<li id="fn5"><p>あなたがもし領域理論について興味があるならば、<a href="http://www.cs.bham.ac.uk/~axj/pub/papers/handy1.pdf"><span class="ascii">Domain Theory</span></a>を読んでみるのがよいでしょう。この文献は、領域理論に必要な順序理論の知識から、領域理論の基本的な概念を解説してくれている文献です。もし、理論自体に興味がなく、この理論がどのような問題解決を目指しているかだけを知りたいなら、<span class="ascii">Origins</span>だけでも読むと良いでしょう。<a href="#fnref5" class="footnote-back">↩</a></p></li>
<li id="fn6"><p>非ボックス型は実データなので、サンクはどうやったって持てないんでしたね！ 逆に<span class="ascii">lifted</span>ならば必ずポインタで表されているはずなので、ボックス型になります。ただし、<span class="ascii">unlifted</span>だからといって非ボックス型とは限りません<span class="ascii">(</span>例<span class="ascii">:</span> <code>Array# a</code><span class="ascii">)</span>。また、ボックス型だからといって<span class="ascii">lifted</span>であるとは限りません。<a href="#fnref6" class="footnote-back">↩</a></p></li>
</ol>
</section>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2017/no-stack-build.html">Haskell-jp Blogへの投稿が簡単になりました！</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/12-ghc-show-info.html" style="margin-left: auto;">GHCにおける多彩な情報の出力方法</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>GHCにおける多彩な情報の出力方法</title>
    <link href="https://haskell.jp/blog/posts/2017/12-ghc-show-info.html" />
    <id>https://haskell.jp/blog/posts/2017/12-ghc-show-info.html</id>
    <published>2017-09-10T00:00:00Z</published>
    <updated>2017-09-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<h2 id="はじめに">はじめに</h2>
<p><span class="ascii">Haskell</span>用コンパイラである<span class="ascii">GHC</span>は、驚くほど多彩な情報出力機能を標準で搭載しています。<br />
出力できる情報は非常に沢山ありますが、ここでは、以下のいくつかの方法について簡単にまとめて紹介します。</p>
<ol type="1">
<li><a href="#ch1"><span class="ascii">ghci</span>での対話操作による情報の出力方法</a></li>
<li><a href="#ch2">コンパイル時における情報の出力方法</a></li>
<li><a href="#ch3">実行オブジェクトの実行時における情報の出力方法</a></li>
</ol>
<p>なお、本記事では、<span class="ascii">stack</span>コマンド経由ではなく、素の<span class="ascii">GHC</span>を使う場合について説明しています。 <span class="ascii">stack</span>コマンドを使用する場合は、<code>ghc</code>コマンドではなく、<code>stack ghc --</code>コマンドの様に読み替えてください。<br />
また、本記事の実行例は、<span class="ascii">GHC8.2.1</span>と<span class="ascii">Linux(ubuntu 16.04 LTS)</span>環境によるものです。</p>
<hr />
<h2 id="ch1"><span class="ascii">1. ghci</span>での対話操作による情報の出力方法</h2>
<p>ここでは、<span class="ascii">GHC</span>の対話環境（<span class="ascii">REPL</span>）である<span class="ascii">ghci</span>コマンドを用いた、情報の出力方法について紹介します。</p>
<ul>
<li>型<span class="ascii">(type)</span>の情報の出力（<code>:t</code>コマンド）</li>
<li>型<span class="ascii">(type)</span>の情報の入門者向けの出力（<code>:t +d</code>コマンド）</li>
<li>型<span class="ascii">(type)</span>の情報の詳細出力（<code>:t +v</code>コマンド）</li>
<li>種<span class="ascii">(kind)</span>の情報の出力（<code>:k</code>コマンド）</li>
<li>名前の内容についての情報の出力（<code>:i</code>コマンド）</li>
<li>その他いろいろなコマンド</li>
</ul>
<p>以下、各々の例について説明します。</p>
<h3 id="型typeの情報の出力tコマンド">型<span class="ascii">(type)</span>の情報の出力（<code>:t</code>コマンド）</h3>
<p><span class="ascii">GHC</span>の対話環境である<span class="ascii">ghci</span>上で、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:type"><code>:t</code></a>コマンド（または省略しない形の<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:type"><code>:type</code></a>コマンド）を実行することにより、変数や関数などについての型の情報を表示できます。<br />
以下は、<code>:t length</code>コマンドの実行例です。<br />
<code>ghci</code>コマンドを起動してから、<code>:t length</code>コマンドを実行すると、</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="fu">$</span> ghci</a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t length</a></code></pre></div>
<p>次の様に出力されます。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1">length<span class="ot"> ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> <span class="dt">Int</span></a></code></pre></div>
<p>上の例では、「<span class="ascii">length</span>関数は、<code>t a</code>型の値を入力して、<code>Int</code>型の値を返す関数である」ことを示しています。 また、「型変数<code>t</code>は<code>Foldable</code>クラスに属する」ことを示しています。</p>
<h3 id="型typeの情報の入門者向けの出力t-dコマンド">型<span class="ascii">(type)</span>の情報の入門者向けの出力（<code>:t +d</code>コマンド）</h3>
<p><span class="ascii">GHC8.2</span>で導入された新しい機能です。<br />
<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:type%20+d"><code>:t +d</code></a>コマンド（または省略しない形の<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:type%20+d"><code>:type +d</code></a>コマンド）を実行することにより、デフォルトの型を考慮して、型の情報を分かりやすく出力できます。<br />
<code>:t +d length</code>コマンドを実行すると、</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t <span class="fu">+</span>d length</a></code></pre></div>
<p>次の様に出力されます。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1">length<span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Int</span></a></code></pre></div>
<p>上の例では、<code>+d</code>オプションをつけない<code>:type</code>コマンドと比べると、<code>Foldable t =&gt; t a</code>の部分がリスト型として具体化されて出力されています。</p>
<h3 id="型typeの情報の詳細出力t-vコマンド">型<span class="ascii">(type)</span>の情報の詳細出力（<code>:t +v</code>コマンド）</h3>
<p><span class="ascii">GHC8.2</span>で導入された新しい機能です。<br />
<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:type%20+v"><code>:t +v</code></a>コマンド（または省略しない形の<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:type%20+v"><code>:type +v</code></a>コマンド）を実行することにより、型についての情報をより詳しく出力できます。<br />
<code>:t +v length</code>コマンドを実行すると、</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>t <span class="fu">+</span>v length</a></code></pre></div>
<p>次の様に出力されます。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1">length<span class="ot"> ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> forall a<span class="fu">.</span> t a <span class="ot">-&gt;</span> <span class="dt">Int</span></a></code></pre></div>
<p>上の例では、<code>+v</code>オプションをつけない<code>:type</code>コマンドと比べると、<code>forall a.</code>の部分が詳しく出力されています。</p>
<h3 id="種kindの情報の出力kコマンド">種<span class="ascii">(kind)</span>の情報の出力（<code>:k</code>コマンド）</h3>
<p><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:kind"><code>:k</code></a>コマンド（または省略しない形の<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:kind"><code>:kind</code></a>コマンド）を実行することにより、種（カインド）についての情報を出力できます。<br />
<code>:k Maybe</code>コマンドを実行すると、</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>k <span class="dt">Maybe</span></a></code></pre></div>
<p>次の様に出力されます。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="dt">Maybe</span><span class="ot"> ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span></a></code></pre></div>
<p>上の例では、<code>Maybe</code>型は、<code>*</code>の種を入力し、<code>*</code>の種を返す型であることを出力します。</p>
<h3 id="名前の内容についての情報の出力iコマンド">名前の内容についての情報の出力（<code>:i</code>コマンド）</h3>
<p><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:info"><code>:i</code></a>コマンド（または省略しない形の<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:info"><code>:info</code></a>コマンド）を実行することにより、その名前の定義情報などを出力できます。<br />
<code>:i length</code>コマンドを実行すると、</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>i length</a></code></pre></div>
<p>次の様に出力されます。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">class</span> <span class="dt">Foldable</span> (<span class="ot">t ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">  <span class="fu">...</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="ot">  length ::</span> t a <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4">  <span class="fu">...</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5">  	<span class="co">-- Defined in ‘Data.Foldable’</span></a></code></pre></div>
<p>上の例では、<code>length</code>の定義内容（関数であり、<span class="ascii">Foldable</span>クラスに属しており、<span class="ascii">Data.Foldable</span>モジュール内で定義されていること）が出力されています。</p>
<h3 id="その他ghciのいろいろなコマンド">その他、<span class="ascii">ghci</span>のいろいろなコマンド</h3>
<p>他にも<span class="ascii">ghci</span>のコマンドにより、様々な情報を対話的に出力させることが出来ます。</p>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:show%20imports"><code>:show imports</code></a> <span class="ascii">: import</span>しているモジュールの一覧出力</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:help"><code>:help</code></a> <span class="ascii">:</span> コマンドのヘルプ</li>
</ul>
<p><span class="ascii">ghci</span>のコマンドの詳細は、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#ghci-commands">こちら</a>を参照してください。<br />
<span class="ascii">ghci</span>のコマンドや、型や種<span class="ascii">(</span>カインド<span class="ascii">)</span>については、<a href="https://employment.en-japan.com/engineerhub/entry/2017/08/25/110000#Haskell%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E5%9E%8B%E3%81%AB%E8%A6%AA%E3%81%97%E3%82%82%E3%81%86GHCi%E3%82%92%E3%82%82%E3%81%A3%E3%81%A8%E4%BD%BF%E3%81%84%E3%81%93%E3%81%AA%E3%81%97%E3%81%A4%E3%81%A4">こちら</a>や<a href="https://haskell.jp/blog/posts/2017/10-about-kind-system-part1.html">こちら</a>も参考になります。</p>
<hr />
<h2 id="ch2"><span class="ascii">2.</span> コンパイル時における情報の出力方法</h2>
<p>ここでは、<span class="ascii">GHC</span>のコンパイル時における、情報の出力方法について紹介します。</p>
<ul>
<li>コンパイル時の各ステージごとの中間コードの出力</li>
<li>型情報の出力</li>
<li>正格性情報の出力</li>
</ul>
<p>以下、各々の例について説明します。</p>
<h3 id="コンパイル時の各ステージごとの中間コードの出力">コンパイル時の各ステージごとの中間コードの出力</h3>
<p><span class="ascii">GHC</span>は、コンパイル時に、中間言語変換などの<a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/HscMain">複数のパイプラインステージ</a>を経ながら、最終的にアセンブリコードを生成します。<br />
コンパイル時に<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debugging.html?highlight=#dumping-out-compiler-intermediate-structures">情報出力用のオプション</a>を指定することにより、それらの各ステージごとの中間コードを出力できます。</p>
<p>例えば、以下の単純なソースの場合について例を示します。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="fu">$</span> cat Func1.hs</a>
<a class="sourceLine" id="cb11-2" data-line-number="2"></a>
<a class="sourceLine" id="cb11-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Func1</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4"></a>
<a class="sourceLine" id="cb11-5" data-line-number="5"><span class="ot">f1 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb11-6" data-line-number="6">f1 x y <span class="fu">=</span> x <span class="fu">+</span> y</a></code></pre></div>
<p>以下、<span class="ascii">GHC</span>のコンパイル・パイプラインにおける、パーサーやリネームなどの各ステージ後のコード出力例を示します。</p>
<h4 id="パーサー後">パーサー後</h4>
<p><span class="ascii">GHC</span>のコンパイルにおける、パーサーのステージ直後のコードを出力するには、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debugging.html?highlight=#ghc-flag--ddump-parsed"><code>-ddump-parsed</code></a>オプションを指定します。</p>
<pre><code>$ ghc  -ddump-parsed Func1.hs </code></pre>
<p>パーサー後のコードが、以下の様に出力されます。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1">[<span class="dv">1</span> <span class="kw">of</span> <span class="dv">1</span>] <span class="dt">Compiling</span> <span class="dt">Func1</span>            ( Func1.hs, Func1.o ) [flags changed]</a>
<a class="sourceLine" id="cb13-2" data-line-number="2"></a>
<a class="sourceLine" id="cb13-3" data-line-number="3"><span class="fu">====================</span> <span class="dt">Parser</span> <span class="fu">====================</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4"><span class="kw">module</span> <span class="dt">Func1</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-5" data-line-number="5"><span class="ot">f1 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb13-6" data-line-number="6">f1 x y <span class="fu">=</span> x <span class="fu">+</span> y</a></code></pre></div>
<p>上の例では、元のソースと同じコードが表示されました。</p>
<h4 id="リネーム後">リネーム後</h4>
<p>以下は、リネームのステージ直後のコードを出力する、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debugging.html?highlight=#ghc-flag--ddump-rn"><code>-ddump-rn</code></a>オプションの例です。</p>
<pre><code>$ ghc -fforce-recomp -ddump-rn Func1.hs </code></pre>
<p>以下の様に出力されます。</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1">[<span class="dv">1</span> <span class="kw">of</span> <span class="dv">1</span>] <span class="dt">Compiling</span> <span class="dt">Func1</span>            ( Func1.hs, Func1.o )</a>
<a class="sourceLine" id="cb15-2" data-line-number="2"></a>
<a class="sourceLine" id="cb15-3" data-line-number="3"><span class="fu">====================</span> <span class="dt">Renamer</span> <span class="fu">====================</span></a>
<a class="sourceLine" id="cb15-4" data-line-number="4">Func1.f1<span class="ot"> ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5">Func1.f1 x_aRf y_aRg <span class="fu">=</span> x_aRf <span class="fu">+</span> y_aRg</a></code></pre></div>
<p>上の例では、ユニークな識別子に変換されたコードが出力されています。<br />
なお、上の例では、ソースファイルの最終更新時刻が、オブジェクトファイルよりも古い場合でも強制的に再コンパイルさせる<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/separate_compilation.html?highlight=#ghc-flag--fforce-recomp"><code>-fforce-recomp</code></a>を指定しています。</p>
<p>以下、いくつかのステージ後の中間コードの出力例を、続けて示します。</p>
<h4 id="脱糖desugar後のcore言語コード">脱糖<span class="ascii">(Desugar)</span>後の、<span class="ascii">Core</span>言語コード</h4>
<pre><code>$ ghc -O -fforce-recomp -ddump-ds Func1.hs</code></pre>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1">  <span class="fu">:</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2"><span class="ot">f1 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb17-3" data-line-number="3">[<span class="dt">LclIdX</span>]</a>
<a class="sourceLine" id="cb17-4" data-line-number="4">f1</a>
<a class="sourceLine" id="cb17-5" data-line-number="5">  <span class="fu">=</span> \ (<span class="ot">x_aSt ::</span> <span class="dt">Int</span>) (<span class="ot">y_aSu ::</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb17-6" data-line-number="6">      <span class="fu">+</span> <span class="fu">@</span> <span class="dt">Int</span> <span class="fu">GHC.Num.$</span>fNumInt x_aSt y_aSu</a>
<a class="sourceLine" id="cb17-7" data-line-number="7">  <span class="fu">:</span></a></code></pre></div>
<p>上の例では、<span class="ascii">Haskell</span>言語の構文から、<span class="ascii">GHC</span>の内部表現の１つである<span class="ascii">Core</span>言語に変換されたコードが出力されています。<br />
<span class="ascii">Core</span>言語は、非常にシンプルな要素で構成された関数型言語です。</p>
<h4 id="stg中間言語での最適化最終コード"><span class="ascii">STG</span>中間言語での最適化最終コード</h4>
<pre><code>$ ghc -O -fforce-recomp -ddump-stg Func1.hs</code></pre>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1">  <span class="fu">:</span></a>
<a class="sourceLine" id="cb19-2" data-line-number="2">Func1.f1<span class="ot"> ::</span> <span class="dt">GHC.Types.Int</span> <span class="ot">-&gt;</span> <span class="dt">GHC.Types.Int</span> <span class="ot">-&gt;</span> <span class="dt">GHC.Types.Int</span></a>
<a class="sourceLine" id="cb19-3" data-line-number="3">[<span class="dt">GblId</span>,</a>
<a class="sourceLine" id="cb19-4" data-line-number="4"> <span class="dt">Arity</span><span class="fu">=</span><span class="dv">2</span>,</a>
<a class="sourceLine" id="cb19-5" data-line-number="5"> <span class="dt">Caf</span><span class="fu">=</span><span class="dt">NoCafRefs</span>,</a>
<a class="sourceLine" id="cb19-6" data-line-number="6"> <span class="dt">Str</span><span class="fu">=&lt;</span><span class="dt">S</span>(<span class="dt">S</span>),<span class="dv">1</span><span class="fu">*</span><span class="dt">U</span>(<span class="dt">U</span>)<span class="fu">&gt;&lt;</span><span class="dt">S</span>(<span class="dt">S</span>),<span class="dv">1</span><span class="fu">*</span><span class="dt">U</span>(<span class="dt">U</span>)<span class="fu">&gt;</span>m,</a>
<a class="sourceLine" id="cb19-7" data-line-number="7"> <span class="dt">Unf</span><span class="fu">=</span><span class="dt">OtherCon</span> []] <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-8" data-line-number="8">    \r [eta_B2 eta_B1] <span class="fu">GHC.Num.$</span>fNumInt_<span class="fu">$</span>c<span class="fu">+</span> eta_B2 eta_B1;</a>
<a class="sourceLine" id="cb19-9" data-line-number="9">  <span class="fu">:</span></a></code></pre></div>
<p>上の例では、さらに、<span class="ascii">GHC</span>の内部表現の１つである<span class="ascii">STG</span>言語に変換されたコードが出力されています。<br />
<span class="ascii">STG</span>言語は、非常にシンプルな要素で構成された、<span class="ascii">GHC</span>の動作モデルと結びついた関数型言語です。</p>
<h4 id="cmm中間言語での最適化最終コード"><span class="ascii">Cmm</span>中間言語での最適化最終コード</h4>
<pre><code>$ ghc -O -fforce-recomp -ddump-opt-cmm Func1.hs</code></pre>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1">  <span class="fu">:</span></a>
<a class="sourceLine" id="cb21-2" data-line-number="2">Func1.f1_entry() <span class="fu">//</span>  [<span class="dt">R3</span>, <span class="dt">R2</span>]</a>
<a class="sourceLine" id="cb21-3" data-line-number="3">        { [(c15y,</a>
<a class="sourceLine" id="cb21-4" data-line-number="4">            Func1.f1_info<span class="fu">:</span></a>
<a class="sourceLine" id="cb21-5" data-line-number="5">                const <span class="dv">8589934607</span>;</a>
<a class="sourceLine" id="cb21-6" data-line-number="6">                const <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb21-7" data-line-number="7">                const <span class="dv">14</span>;)]</a>
<a class="sourceLine" id="cb21-8" data-line-number="8">        }</a>
<a class="sourceLine" id="cb21-9" data-line-number="9">    {offset</a>
<a class="sourceLine" id="cb21-10" data-line-number="10">      c15y<span class="fu">:</span> <span class="fu">//</span> global</a>
<a class="sourceLine" id="cb21-11" data-line-number="11">          <span class="fu">//</span> nop</a>
<a class="sourceLine" id="cb21-12" data-line-number="12">          <span class="fu">//</span> nop</a>
<a class="sourceLine" id="cb21-13" data-line-number="13">          call <span class="fu">GHC.Num.$</span>fNumInt_<span class="fu">$</span>c<span class="fu">+</span>_info(<span class="dt">R3</span>, <span class="dt">R2</span>) args<span class="fu">:</span> <span class="dv">8</span>, res<span class="fu">:</span> <span class="dv">0</span>, upd<span class="fu">:</span> <span class="dv">8</span>;</a>
<a class="sourceLine" id="cb21-14" data-line-number="14">    }</a>
<a class="sourceLine" id="cb21-15" data-line-number="15">}</a>
<a class="sourceLine" id="cb21-16" data-line-number="16">  <span class="fu">:</span></a></code></pre></div>
<p>上の例では、さらに、<span class="ascii">GHC</span>の内部表現の１つである<span class="ascii">Cmm</span>言語に変換されたコードが出力されています。<br />
<span class="ascii">Cmm(C minus minus)</span>言語は、<span class="ascii">C</span>言語とアセンブリ言語の中間的な位置づけの、手続き型言語です。</p>
<h4 id="最終アセンブリ命令列">最終アセンブリ命令列</h4>
<pre><code>$ ghc -O -fforce-recomp -ddump-asm Func1.hs</code></pre>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" data-line-number="1">  <span class="fu">:</span></a>
<a class="sourceLine" id="cb23-2" data-line-number="2"><span class="fu">.</span>globl Func1.f1_info</a>
<a class="sourceLine" id="cb23-3" data-line-number="3"><span class="fu">.</span><span class="kw">type</span> Func1.f1_info, <span class="fu">@</span>object</a>
<a class="sourceLine" id="cb23-4" data-line-number="4">Func1.f1_info<span class="fu">:</span></a>
<a class="sourceLine" id="cb23-5" data-line-number="5">_c15y<span class="fu">:</span></a>
<a class="sourceLine" id="cb23-6" data-line-number="6">	jmp <span class="fu">GHC.Num.$</span>fNumInt_<span class="fu">$</span>c<span class="fu">+</span>_info</a>
<a class="sourceLine" id="cb23-7" data-line-number="7">  <span class="fu">:</span></a></code></pre></div>
<p>上の例では、最終的なターゲット<span class="ascii">CPU</span>用のアセンブリ言語の命令コードが出力されています。</p>
<p>詳細は省略しますが、他にも様々なステージの情報を出力させることが出来ます。</p>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debugging.html?highlight=#ghc-flag--ddump-simpl"><code>-ddump-simpl</code></a> <span class="ascii">: Core</span>中間言語での最適化中コード</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debugging.html?highlight=#ghc-flag--ddump-prep"><code>-ddump-prep</code></a> <span class="ascii">: Core</span>中間言語での最適化最終コード</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debugging.html?highlight=#ghc-flag--ddump-cmm"><code>-ddump-cmm</code></a> <span class="ascii">: Cmm</span>中間言語での最適化中コード</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debugging.html?highlight=#ghc-flag--ddump-llvm"><code>-ddump-llvm</code></a> <span class="ascii">: LLVM</span>版の命令列</li>
<li>その他</li>
</ul>
<p>中間コードの出力方法の詳細は、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debugging.html?highlight=#dumping-out-compiler-intermediate-structures">こちら</a>を参照してください。<br />
中間言語については、<a href="http://www.kotha.net/hperf/ghc.html">こちら</a>も参考になります。</p>
<h3 id="型情報の出力">型情報の出力</h3>
<p>コンパイル時に得られる型情報を出力することが出来ます。<br />
例えば、以下の単純なソースの場合について例を示します。</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" data-line-number="1"><span class="fu">$</span> cat Func2.hs</a>
<a class="sourceLine" id="cb24-2" data-line-number="2"></a>
<a class="sourceLine" id="cb24-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Func2</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb24-4" data-line-number="4"></a>
<a class="sourceLine" id="cb24-5" data-line-number="5"><span class="kw">type</span> <span class="dt">Count</span> <span class="fu">=</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb24-6" data-line-number="6"></a>
<a class="sourceLine" id="cb24-7" data-line-number="7"><span class="ot">f2 ::</span> <span class="dt">Count</span> <span class="ot">-&gt;</span> <span class="dt">Count</span> <span class="ot">-&gt;</span> <span class="dt">Count</span></a>
<a class="sourceLine" id="cb24-8" data-line-number="8">f2 a b <span class="fu">=</span> a <span class="fu">+</span> b</a></code></pre></div>
<p>コンパイル時に得られる型情報を出力するには、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debugging.html?highlight=#ghc-flag--ddump-types"><code>-ddump-types</code></a>オプションを指定します。</p>
<pre><code>$ ghc -ddump-types Func2.hs</code></pre>
<p>以下の様に出力されます。</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" data-line-number="1">[<span class="dv">1</span> <span class="kw">of</span> <span class="dv">1</span>] <span class="dt">Compiling</span> <span class="dt">Func2</span>            ( Func2.hs, Func2.o )</a>
<a class="sourceLine" id="cb26-2" data-line-number="2"><span class="dt">TYPE</span> <span class="dt">SIGNATURES</span></a>
<a class="sourceLine" id="cb26-3" data-line-number="3"><span class="ot">  f2 ::</span> <span class="dt">Count</span> <span class="ot">-&gt;</span> <span class="dt">Count</span> <span class="ot">-&gt;</span> <span class="dt">Count</span></a>
<a class="sourceLine" id="cb26-4" data-line-number="4"><span class="dt">TYPE</span> <span class="dt">CONSTRUCTORS</span></a>
<a class="sourceLine" id="cb26-5" data-line-number="5">  <span class="kw">type</span> <span class="dt">Count</span> <span class="fu">=</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb26-6" data-line-number="6"><span class="dt">COERCION</span> <span class="dt">AXIOMS</span></a>
<a class="sourceLine" id="cb26-7" data-line-number="7"><span class="dt">Dependent</span> modules<span class="fu">:</span> []</a>
<a class="sourceLine" id="cb26-8" data-line-number="8"><span class="dt">Dependent</span> packages<span class="fu">:</span> [base<span class="fu">-</span><span class="fl">4.10</span><span class="fu">.</span><span class="fl">0.0</span>, ghc<span class="fu">-</span>prim<span class="fu">-</span><span class="fl">0.5</span><span class="fu">.</span><span class="fl">1.0</span>,</a>
<a class="sourceLine" id="cb26-9" data-line-number="9">                     integer<span class="fu">-</span>gmp<span class="fu">-</span><span class="fl">1.0</span><span class="fu">.</span><span class="fl">1.0</span>]</a></code></pre></div>
<p>それぞれの型の情報が出力されています。</p>
<h3 id="正格性情報の出力">正格性情報の出力</h3>
<p>コンパイル時に得られる正格性についての情報を出力することが出来ます。<br />
例えば、以下の単純なソースの場合について例を示します。<br />
少し恣意的な例ですが、関数<span class="ascii">f3</span>の第１引数は正格（かつ関数内で使用されている）、第<span class="ascii">2</span>引数は非正格（かつ関数内で使用されている）、第<span class="ascii">3</span>引数は非正格（かつ関数内で使用されていない）という場合の例です。</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb27-1" data-line-number="1"><span class="fu">$</span> cat Func3.hs </a>
<a class="sourceLine" id="cb27-2" data-line-number="2"></a>
<a class="sourceLine" id="cb27-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Func3</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb27-4" data-line-number="4"></a>
<a class="sourceLine" id="cb27-5" data-line-number="5"><span class="ot">f3 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb27-6" data-line-number="6">f3 <span class="dv">0</span> y z <span class="fu">=</span> <span class="fu">-</span><span class="dv">1</span></a>
<a class="sourceLine" id="cb27-7" data-line-number="7">f3 x y z <span class="fu">=</span> abs y</a></code></pre></div>
<p>コンパイル時に得られる、関数の各引数についての正格性の情報を出力するには、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debugging.html?highlight=#ghc-flag--ddump-str-signatures"><code>-ddump-str-signatures</code></a>オプションを指定します。 なお、正格性についての最適化を行うために、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-optimisation.html?highlight=#ghc-flag--O"><code>-O</code></a>オプションも併せて指定します。</p>
<pre><code>$ ghc -O -ddump-str-signatures Func3.hs</code></pre>
<p>正格性についての情報が、以下の様に出力されます。</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb29-1" data-line-number="1">[<span class="dv">1</span> <span class="kw">of</span> <span class="dv">1</span>] <span class="dt">Compiling</span> <span class="dt">Func3</span>            ( Func3.hs, Func3.o )</a>
<a class="sourceLine" id="cb29-2" data-line-number="2"></a>
<a class="sourceLine" id="cb29-3" data-line-number="3"><span class="fu">====================</span> <span class="dt">Strictness</span> signatures <span class="fu">====================</span></a>
<a class="sourceLine" id="cb29-4" data-line-number="4"><span class="dt">Func3</span><span class="fu">.$</span>trModule<span class="fu">:</span> m</a>
<a class="sourceLine" id="cb29-5" data-line-number="5">Func3.f3<span class="fu">:</span> <span class="fu">&lt;</span><span class="dt">S</span>(<span class="dt">S</span>),<span class="dv">1</span><span class="fu">*</span><span class="dt">U</span>(<span class="dv">1</span><span class="fu">*</span><span class="dt">U</span>)<span class="fu">&gt;&lt;</span><span class="dt">L</span>,<span class="dv">1</span><span class="fu">*</span><span class="dt">U</span>(<span class="dt">U</span>)<span class="fu">&gt;&lt;</span><span class="dt">L</span>,<span class="dt">A</span><span class="fu">&gt;</span>m</a>
<a class="sourceLine" id="cb29-6" data-line-number="6"></a>
<a class="sourceLine" id="cb29-7" data-line-number="7"></a>
<a class="sourceLine" id="cb29-8" data-line-number="8"></a>
<a class="sourceLine" id="cb29-9" data-line-number="9"><span class="fu">====================</span> <span class="dt">Strictness</span> signatures <span class="fu">====================</span></a>
<a class="sourceLine" id="cb29-10" data-line-number="10"><span class="dt">Func3</span><span class="fu">.$</span>trModule<span class="fu">:</span> m</a>
<a class="sourceLine" id="cb29-11" data-line-number="11">Func3.f3<span class="fu">:</span> <span class="fu">&lt;</span><span class="dt">S</span>(<span class="dt">S</span>),<span class="dv">1</span><span class="fu">*</span><span class="dt">U</span>(<span class="dv">1</span><span class="fu">*</span><span class="dt">U</span>)<span class="fu">&gt;&lt;</span><span class="dt">L</span>,<span class="dv">1</span><span class="fu">*</span><span class="dt">U</span>(<span class="dt">U</span>)<span class="fu">&gt;&lt;</span><span class="dt">L</span>,<span class="dt">A</span><span class="fu">&gt;</span>m</a></code></pre></div>
<p>上の例によると、第１引数は、<code>&lt;S(S),1*U(1*U)&gt;</code>の部分により表されています。 ここでの<code>S(S)</code>は、引数が正格<span class="ascii">(Strict)</span>であることを示しています。 <code>1*U(1*U)</code>は、引数が関数内で使用<span class="ascii">(Use)</span>されていることを示しています。<br />
第<span class="ascii">2</span>引数は、<code>&lt;L,1*U(U)&gt;</code>の部分により表されています。 <code>L</code>は引数が非正格（<span class="ascii">non-strict</span>）であることを示しています。 <code>1*U(U)</code>は、引数が関数内で使用<span class="ascii">(Use)</span>されていることを示しています。<br />
第<span class="ascii">3</span>引数は、<code>&lt;L,A&gt;</code>の部分により表されています。 <code>L</code>は引数が非正格（<span class="ascii">non-strict</span>）であることを示しています。 <code>A</code>は、引数が関数内で不使用（<span class="ascii">Absence</span>）であることを示しています。</p>
<p>正格性解析については、<a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/Demand">こちら</a>も参考になります。</p>
<h3 id="その他コンパイル時のいろいろなオプション">その他、コンパイル時のいろいろなオプション</h3>
<p>他にも、コンパイル時に様々な情報を出力させることが出来ます。</p>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html?highlight=#ghc-flag--Wall"><code>-Wall</code></a> <span class="ascii">:</span> コンパイル時に<span class="ascii">Warning</span>情報を出力</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using.html?highlight=#ghc-flag--v"><code>-v</code></a> <span class="ascii">:</span> コンパイル時にコンパイラの詳細情報を出力</li>
</ul>
<p>コンパイル時のオプションの詳細は、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/flags.html#flag-reference">こちら</a>を参照してください。</p>
<hr />
<h2 id="ch3"><span class="ascii">3.</span> 実行オブジェクトの実行時における情報の出力方法</h2>
<p>ここでは、<span class="ascii">GHC</span>によりコンパイルされた実行オブジェクトについて、実行時に情報を出力する方法を紹介します。</p>
<ul>
<li>実行時の統計情報の出力</li>
<li>時間プロファイルの出力</li>
<li>空間プロファイルの出力</li>
<li>実行時イベントの出力</li>
<li>コードカバレッジの出力</li>
<li>スタックトレースの出力</li>
</ul>
<p>以下、各々の例について説明します。</p>
<h3 id="実行時の統計情報の出力">実行時の統計情報の出力</h3>
<p><span class="ascii">GHC</span>によりコンパイルされた実行オブジェクトについて、実行時の統計情報を出力できます。<br />
例えば、以下のソースの場合について例を示します。</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb30-1" data-line-number="1"><span class="fu">$</span> cat Prog1.hs</a>
<a class="sourceLine" id="cb30-2" data-line-number="2"></a>
<a class="sourceLine" id="cb30-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb30-4" data-line-number="4"></a>
<a class="sourceLine" id="cb30-5" data-line-number="5"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb30-6" data-line-number="6">main <span class="fu">=</span> print <span class="fu">$</span> sum [<span class="dv">1</span><span class="fu">..</span><span class="dv">10000000</span>]</a></code></pre></div>
<p>まずは、普通にコンパイルを行います。<br />
ここでは、通常の例を示すために、標準的な最適化を行う<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-optimisation.html?highlight=#ghc-flag--O"><code>-O</code></a>オプションを指定しています（プロファイル取得に必須ではありません。）</p>
<pre><code>$ ghc -O Prog1.hs </code></pre>
<p>実行時の統計情報を出力するには、以下の様に、実行オブジェクトの起動時に<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#setting-rts-options-on-the-command-line"><code>+RTS</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html?highlight=#rts-options-to-produce-runtime-statistics"><code>-s</code></a>オプションを指定します。 （<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#setting-rts-options-on-the-command-line"><code>+RTS</code></a>以降の引数が、<span class="ascii">GHC</span>のランタイムシステム<span class="ascii">(RTS)</span>に引き渡されます。 ここでは、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html?highlight=#rts-options-to-produce-runtime-statistics"><code>-s</code></a>が統計情報出力のためのオプションです。）</p>
<pre><code>$ ./Prog1 +RTS -s</code></pre>
<p>以下の様に、実行時の統計情報が出力されます。</p>
<pre><code>50000005000000
     320,051,552 bytes allocated in the heap
          23,320 bytes copied during GC
          44,504 bytes maximum residency (2 sample(s))
          29,224 bytes maximum slop
               2 MB total memory in use (0 MB lost due to fragmentation)

                                     Tot time (elapsed)  Avg pause  Max pause
  Gen  0       304 colls,     0 par    0.004s   0.004s     0.0000s    0.0002s
  Gen  1         2 colls,     0 par    0.000s   0.000s     0.0000s    0.0000s

  INIT    time    0.000s  (  0.000s elapsed)
  MUT     time    0.532s  (  0.549s elapsed)
  GC      time    0.004s  (  0.004s elapsed)
  EXIT    time    0.000s  (  0.000s elapsed)
  Total   time    0.536s  (  0.553s elapsed)

  %GC     time       0.7%  (0.7% elapsed)

  Alloc rate    601,600,661 bytes per MUT second

  Productivity  99.3% of total user, 99.3% of total elapsed</code></pre>
<p>上の例では、全体の実行時間やヒープの割当量や<span class="ascii">GC</span>の概況等が出力されています。</p>
<p>表示内容の詳細については、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html?highlight=#rts-options-to-produce-runtime-statistics">こちら</a>を参照してください。</p>
<h3 id="時間プロファイルの出力">時間プロファイルの出力</h3>
<p><span class="ascii">GHC</span>によりコンパイルされた実行オブジェクトについて、実行時の時間プロファイル情報を出力できます。<br />
例えば、以下のソースの場合について例を示します。</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb34-1" data-line-number="1"><span class="fu">$</span> cat Prog2.hs</a>
<a class="sourceLine" id="cb34-2" data-line-number="2"></a>
<a class="sourceLine" id="cb34-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb34-4" data-line-number="4"></a>
<a class="sourceLine" id="cb34-5" data-line-number="5"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb34-6" data-line-number="6">main <span class="fu">=</span> print f1</a>
<a class="sourceLine" id="cb34-7" data-line-number="7"></a>
<a class="sourceLine" id="cb34-8" data-line-number="8"><span class="ot">f1 ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb34-9" data-line-number="9">f1 <span class="fu">=</span> sum [<span class="dv">1</span><span class="fu">..</span><span class="dv">10000000</span>] <span class="fu">+</span> f2</a>
<a class="sourceLine" id="cb34-10" data-line-number="10"></a>
<a class="sourceLine" id="cb34-11" data-line-number="11"><span class="ot">f2 ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb34-12" data-line-number="12">f2 <span class="fu">=</span> sum [<span class="dv">1</span><span class="fu">..</span><span class="dv">10000000</span>]</a></code></pre></div>
<p>プロファイルを取るためには、以下の様にまず、コンパイル時に、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html?highlight=#ghc-flag--rtsopts%5B=%E2%9F%A8none%7Csome%7Call%E2%9F%A9%5D"><code>-rtsopts</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--prof"><code>-prof</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--fprof-auto"><code>-fprof-auto</code></a>オプションを指定します。<br />
<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html?highlight=#ghc-flag--rtsopts%5B=%E2%9F%A8none%7Csome%7Call%E2%9F%A9%5D"><code>-rtsopts</code></a>は、実行オブジェクトの実行時に、<span class="ascii">GHC</span>のランタイムシステム<span class="ascii">(RTS)</span>用の引数を使用可能にするオプションです。 <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--prof"><code>-prof</code></a>は、プロファイル用のコードを埋め込むためのオプションです。 <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--fprof-auto"><code>-fprof-auto</code></a>は、プロファイルを取得する対象を自動で設定するオプションです。</p>
<pre><code>$ ghc -O -rtsopts -prof -fprof-auto Prog2.hs</code></pre>
<p>実行時の時間プロファイルを出力するには、実行オブジェクトの起動時に<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#setting-rts-options-on-the-command-line"><code>+RTS</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#rts-flag--p"><code>-p</code></a>オプションを指定します。 （<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#rts-flag--p"><code>-p</code></a>が時間プロファイル情報出力のためのオプションです。）</p>
<pre><code>$ ./Prog2 +RTS -p</code></pre>
<p>これにより、時間プロファイル情報が、<code>Prog2.prof</code>ファイルに以下の様に出力されます。</p>
<pre><code>$ cat Prog2.prof
	Sun Sep  3 18:01 2017 Time and Allocation Profiling Report  (Final)

	   Prog2 +RTS -p -RTS

	total time  =        0.03 secs   (25 ticks @ 1000 us, 1 processor)
	total alloc =      49,688 bytes  (excludes profiling overheads)

COST CENTRE MODULE           SRC               %time %alloc

f2          Main             Prog2.hs:11:1-22   60.0    0.0
f1          Main             Prog2.hs:8:1-27    40.0    0.1
MAIN        MAIN             &lt;built-in&gt;          0.0    1.3
CAF         GHC.IO.Handle.FD &lt;entire-module&gt;     0.0   69.8
CAF         GHC.IO.Encoding  &lt;entire-module&gt;     0.0    5.6
CAF         GHC.Conc.Signal  &lt;entire-module&gt;     0.0    1.3
main        Main             Prog2.hs:5:1-15     0.0   21.3
 :</code></pre>
<p>上の例では、<span class="ascii">main</span>や<span class="ascii">f1</span>や<span class="ascii">f2</span>などについて、関数ごとの実行時間が出力されています。</p>
<p>時間プロファイルの表示内容の詳細については、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#profiling">こちら</a>を参照してください。<br />
時間プロファイルについては、<a href="http://book.realworldhaskell.org/read/profiling-and-optimization.html#id677833">こちら</a>や、<a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20110201/356705/">こちら</a>も参考になります。</p>
<h3 id="空間プロファイルの出力">空間プロファイルの出力</h3>
<p><span class="ascii">GHC</span>によりコンパイルされた実行オブジェクトについて、実行時の空間プロファイル情報、つまり、ヒープメモリの使用状況等を出力できます。<br />
例えば、以下のソースの場合について例を示します。</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb38-1" data-line-number="1"><span class="fu">$</span> cat Prog3.hs</a>
<a class="sourceLine" id="cb38-2" data-line-number="2"></a>
<a class="sourceLine" id="cb38-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb38-4" data-line-number="4"></a>
<a class="sourceLine" id="cb38-5" data-line-number="5"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb38-6" data-line-number="6">main <span class="fu">=</span> print <span class="fu">$</span> f1 [<span class="dv">1</span><span class="fu">..</span><span class="dv">1000000</span>]</a>
<a class="sourceLine" id="cb38-7" data-line-number="7"></a>
<a class="sourceLine" id="cb38-8" data-line-number="8">f1 [] <span class="fu">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb38-9" data-line-number="9">f1 (x<span class="fu">:</span>xs) <span class="fu">=</span> (abs x) <span class="fu">+</span> (f1 xs)</a></code></pre></div>
<p>プロファイルを取るためには、以下の様にまず、コンパイル時に、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html?highlight=#ghc-flag--rtsopts%5B=%E2%9F%A8none%7Csome%7Call%E2%9F%A9%5D"><code>-rtsopts</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--prof"><code>-prof</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--fprof-auto"><code>-fprof-auto</code></a>オプションを指定します。<br />
<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html?highlight=#ghc-flag--rtsopts%5B=%E2%9F%A8none%7Csome%7Call%E2%9F%A9%5D"><code>-rtsopts</code></a>は、実行オブジェクトの実行時に、<span class="ascii">GHC</span>のランタイムシステム<span class="ascii">(RTS)</span>用の引数を使用可能にするオプションです。 <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--prof"><code>-prof</code></a>は、プロファイル用のコードを埋め込むためのオプションです。 <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--fprof-auto"><code>-fprof-auto</code></a>は、プロファイルを取得する対象を自動で設定するオプションです。</p>
<p>ここでは、メモリ使用状況を分かりやすくするために、最適化のレベルを下げる<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-optimisation.html?highlight=#ghc-flag--O0"><code>-O0</code></a>オプションを指定しています（プロファイル取得に必須ではありません）。</p>
<pre><code>$ ghc -O0 -rtsopts -prof -fprof-auto Prog3.hs</code></pre>
<p>実行時の空間プロファイルを出力するには、実行オブジェクトの起動時に<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#setting-rts-options-on-the-command-line"><code>+RTS</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#rts-flag--hc"><code>-hc</code></a>オプションを指定します。 （<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#rts-flag--hc"><code>-hc</code></a>が時間プロファイル情報出力のためのオプションです。）</p>
<pre><code>$ ./Prog3 +RTS -hc -i0.1</code></pre>
<p>これにより、プロファイル情報が、<code>Prog3.hp</code>ファイルに生成されます。</p>
<p>なお、上の例では、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#rts-flag--i"><code>-i</code></a>オプションにより、プロファイルを取得する間隔を秒単位で指定しています。この例では、<span class="ascii">0.1</span>秒単位にプロファイル情報を取得しています。秒数は、状況に併せて調整してください。</p>
<p>さらに、以下の様に、<span class="ascii">GHC</span>に標準で付属している<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=hp2ps#hp2ps-rendering-heap-profiles-to-postscript"><code>hp2ps</code></a>コマンドを実行することにより、生成されたプロファイル情報を、、<span class="ascii">PostScript</span>ファイルに変換できます。</p>
<pre><code>$ hp2ps -e8in -c Prog3.hp</code></pre>
<p>さらに、<span class="ascii">OS</span>プラットフォームに応じたコマンドなどにより、<span class="ascii">PostScript</span>ファイルを<span class="ascii">PDF</span>に変換します。 ここでは、<span class="ascii">ps2pdf</span>コマンドを使用しています。</p>
<pre><code>$ ps2pdf Prog3.ps &gt; Prog3.pdf</code></pre>
<p>これにより、以下の様に、空間プロファイルがグラフィカルに表示されます。</p>
<p><img src="/img/2017/12-rts-space-profile.png" /></p>
<p>空間プロファイルの表示内容の詳細については、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#profiling-memory-usage">こちら</a>を参照してください。<br />
空間プロファイルについては、<a href="http://book.realworldhaskell.org/read/profiling-and-optimization.html#id678078">こちら</a>や、<a href="https://medium.com/@maoe/ghc%E3%83%92%E3%83%BC%E3%83%97%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%AE%E6%89%8B%E5%BC%95%E3%81%8D-md-bb8d180230f6">こちら</a>も参考になります。</p>
<h3 id="実行時イベントの出力">実行時イベントの出力</h3>
<p><span class="ascii">GHC</span>によりコンパイルされた実行オブジェクトについて、実行時のイベント情報を出力できます。<br />
実行時のイベントとは、<span class="ascii">GHC</span>のランタイムシステム（<span class="ascii">RTS</span>）におけるスレッドスケジューラや<span class="ascii">GC</span>などの動作情報や、ユーザー指定による動作情報です。<br />
例えば、以下のソースの場合について例を示します。</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb43-1" data-line-number="1"><span class="fu">$</span> cat Prog4.hs</a>
<a class="sourceLine" id="cb43-2" data-line-number="2"></a>
<a class="sourceLine" id="cb43-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb43-4" data-line-number="4"></a>
<a class="sourceLine" id="cb43-5" data-line-number="5"><span class="kw">import</span> <span class="dt">Control.Concurrent</span> (forkIO, threadDelay, myThreadId)</a>
<a class="sourceLine" id="cb43-6" data-line-number="6"></a>
<a class="sourceLine" id="cb43-7" data-line-number="7"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb43-8" data-line-number="8">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb43-9" data-line-number="9">    forkIO sub</a>
<a class="sourceLine" id="cb43-10" data-line-number="10">    forkIO sub</a>
<a class="sourceLine" id="cb43-11" data-line-number="11">    threadDelay (<span class="dv">2</span> <span class="fu">*</span> <span class="dv">1000</span> <span class="fu">*</span> <span class="dv">1000</span>)</a>
<a class="sourceLine" id="cb43-12" data-line-number="12"></a>
<a class="sourceLine" id="cb43-13" data-line-number="13"><span class="ot">sub ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb43-14" data-line-number="14">sub <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb43-15" data-line-number="15">    myThreadId <span class="fu">&gt;&gt;=</span> print</a>
<a class="sourceLine" id="cb43-16" data-line-number="16">    print <span class="fu">$</span> sum [<span class="dv">1</span><span class="fu">..</span><span class="dv">100000</span>]</a></code></pre></div>
<p>実行時イベントを出力するためには、以下の様にまず、コンパイル時に、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html?highlight=#ghc-flag--rtsopts%5B=%E2%9F%A8none%7Csome%7Call%E2%9F%A9%5D"><code>-rtsopts</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html#ghc-flag--eventlog"><code>-eventlog</code></a>オプションを指定します。<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html#ghc-flag--eventlog"><code>-eventlog</code></a>が、イベントログを出力するためのオプションです。</p>
<pre><code>$ ghc -O -rtsopts -eventlog Prog4.hs</code></pre>
<p>さらに、実際に実行時イベントを出力するには、実行オブジェクトの起動時に<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#setting-rts-options-on-the-command-line"><code>+RTS</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#rts-flag--l"><code>-l</code></a>オプションを指定します。 （<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#rts-flag--l"><code>-l</code></a>が実行時イベントを出力するためのオプションです。）</p>
<pre><code>$ ./Prog4 +RTS -l</code></pre>
<p>これにより、実行時のイベント情報が、<code>Prog4.eventlog</code>ファイルにバイナリ形式で出力されます。<br />
バイナリ形式の出力を表示するには２種類の方法があります。 <span class="ascii">Threadscope</span>コマンドにより<span class="ascii">GUI</span>で表示する方法と、<span class="ascii">ghc-events</span>コマンドによりテキスト形式で表示する方法です。 どちらも、コマンドを別途インストールする必要があります。</p>
<h4 id="threadscopeによるgui表示"><span class="ascii">ThreadScope</span>による<span class="ascii">GUI</span>表示</h4>
<p>以下は、１つめの方法である<span class="ascii">ThreadScope</span>を用いた表示例です。<br />
まず、<a href="https://github.com/haskell/ThreadScope/releases/">こちら</a>から<code>threadscope</code>のバイナリを入手するか、以下の方法により、<code>threadscope</code>コマンドをインストールしてください。</p>
<pre><code>$ stack install threadScope</code></pre>
<p>そして、以下のコマンドにより<span class="ascii">Threadscope</span>を起動します。</p>
<pre><code>$ threadscope Prog4.eventlog</code></pre>
<p>以下の様に<span class="ascii">GUI</span>が起動し、スレッドの稼動状態や<span class="ascii">GC</span>の状態を可視化できます。</p>
<p><img src="/img/2017/12-rts-threadscope.png" /></p>
<p>上の例では、緑の部分がスレッドの稼働中、橙の部分が<span class="ascii">GC</span>の稼働中を表しています。 また、同時に１つスレッドのみが稼働していることが分かります（物理<span class="ascii">CPU</span>が１個に制限されたハードウェアでの実行例です。）</p>
<h4 id="ghc-eventsによるテキスト表示"><span class="ascii">ghc-events</span>によるテキスト表示</h4>
<p>以下は、２つめの方法である<span class="ascii">ghc-events</span>を用いた表示例です。<br />
まず、以下の方法により、<code>ghc-events</code>コマンドをインストールしてください。</p>
<pre><code>$ stack install ghc-events</code></pre>
<p>そして、以下のコマンドにより、イベントの内容をテキスト形式で表示できます。</p>
<pre><code>$ ghc-events show Prog4.eventlog</code></pre>
<p>以下の様に、テキスト形式でイベント状況が詳細に表示されます。</p>
<pre><code>Event Types:
0: Create thread (size 4)
1: Run thread (size 4)
2: Stop thread (size 10)
3: Thread runnable (size 4)
4: Migrate thread (size 6)
8: Wakeup thread (size 6)
9: Starting GC (size 0)
  :
Events:
132911: created capset 0 of type CapsetOsProcess
134098: created capset 1 of type CapsetClockDomain
135704: created cap 0
136473: assigned cap 0 to capset 0
137241: assigned cap 0 to capset 1
141152: capset 1: wall clock time 1504529318s 220117000ns (unix epoch)
142339: capset 0: pid 4626
144644: capset 0: parent pid 3460
  :
250875: cap 0: creating thread 1
253948: cap 0: running thread 1
276507: cap 0: creating thread 2
277764: cap 0: creating thread 3
281117: cap 0: stopping thread 1 (blocked on threadDelay)
286774: cap 0: running thread 2
334686: cap 0: stopping thread 2 (thread yielding)
337829: cap 0: running thread 3
341321: cap 0: stopping thread 3 (blocked on an MVar)
343975: cap 0: running thread 2
349563: cap 0: waking up thread 3 on cap 0
3108630: cap 0: stopping thread 2 (heap overflow)
  :</code></pre>
<p>上の例では、スレッドの生成や停止の状況が詳細に出力されています。</p>
<p>実行時イベントログ機能の詳細については、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#profiling">こちら</a>を参照してください。<br />
実行時イベントログ機能については、<a href="http://chimera.labs.oreilly.com/books/1230000000929/ch15.html">こちら</a>も参考になります。</p>
<h3 id="コードカバレッジの出力">コードカバレッジの出力</h3>
<p><span class="ascii">GHC</span>によりコンパイルされた実行オブジェクトについて、実行時のコードカバレッジ情報を出力できます。<br />
例えば、以下のソースの場合について例を示します。</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb51-1" data-line-number="1"><span class="fu">$</span> cat Prog5.hs</a>
<a class="sourceLine" id="cb51-2" data-line-number="2"></a>
<a class="sourceLine" id="cb51-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb51-4" data-line-number="4"></a>
<a class="sourceLine" id="cb51-5" data-line-number="5"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb51-6" data-line-number="6">main <span class="fu">=</span> print f1</a>
<a class="sourceLine" id="cb51-7" data-line-number="7"></a>
<a class="sourceLine" id="cb51-8" data-line-number="8">f1 <span class="fu">=</span> f2 <span class="dv">3</span></a>
<a class="sourceLine" id="cb51-9" data-line-number="9"></a>
<a class="sourceLine" id="cb51-10" data-line-number="10">f2 <span class="dv">3</span> <span class="fu">=</span> f3</a>
<a class="sourceLine" id="cb51-11" data-line-number="11">f2 _ <span class="fu">=</span> f4</a>
<a class="sourceLine" id="cb51-12" data-line-number="12"></a>
<a class="sourceLine" id="cb51-13" data-line-number="13">f3 <span class="fu">=</span> <span class="dv">30</span></a>
<a class="sourceLine" id="cb51-14" data-line-number="14">f4 <span class="fu">=</span> <span class="dv">40</span></a></code></pre></div>
<p>コードカバレッジを取得するためには、以下の様にまず、コンパイル時に、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--fhpc"><code>-fhpc</code></a>オプションを指定します。</p>
<pre><code>$ ghc -fhpc Prog5.hs</code></pre>
<p>さらに、コンパイルされた実行オブジェクトを起動するだけで、実行時のコードカバレッジを出力できます。</p>
<pre><code>$ ./Prog5</code></pre>
<p>これにより、コードカバレッジ情報が、<code>Prog5.tix</code>ファイルにバイナリ形式で出力されています。</p>
<p>さらに、以下の様に、<span class="ascii">GHC</span>に標準で付属している<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=hpc#hpc-report"><code>hpc report</code></a>コマンドを実行することで、コードカバレッジの概況をテキスト形式で出力できます。</p>
<pre><code>$ hpc report Prog5</code></pre>
<p>以下の様に、コードカバレッジの概況がテキスト形式で出力されます。</p>
<pre><code> 75% expressions used (6/8)
100% boolean coverage (0/0)
     100% guards (0/0)
     100% &#39;if&#39; conditions (0/0)
     100% qualifiers (0/0)
 50% alternatives used (1/2)
100% local declarations used (0/0)
 80% top-level declarations used (4/5)</code></pre>
<p>また、以下の様に、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=hpc#hpc-markup"><code>hpc markup</code></a>コマンドを実行することで、<span class="ascii">HTML</span>ファイルの形式で情報を出力することもできます。</p>
<pre><code>$ hpc markup Prog5</code></pre>
<p>以下の様に、モジュールごとに詳細な<span class="ascii">HTML</span>ファイルが生成されます。</p>
<pre><code>$ ls *html
Main.hs.html    hpc_index_alt.html  hpc_index_fun.html
hpc_index.html  hpc_index_exp.html</code></pre>
<p>生成された<span class="ascii">HTML</span>ファイルでは、モジュールごとの概況が以下の様に表示されます。</p>
<p><img src="/img/2017/12-rts-coverage1.png" /></p>
<p>さらに、モジュール内の詳細状況も以下の様に表示されます。</p>
<p><img src="/img/2017/12-rts-coverage2.png" /></p>
<p>上の例では、<span class="ascii">f4</span>は、評価（実行）されていないパスである事が分かります。</p>
<p>コードカバレッジの詳細については、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=coverage#observing-code-coverage">こちら</a>を参照してください。<br />
コードカバレッジについては、<a href="http://book.realworldhaskell.org/read/testing-and-quality-assurance.html#id629497">こちら</a>も参考になります。</p>
<h3 id="スタックトレースの出力">スタックトレースの出力</h3>
<p><span class="ascii">GHC</span>によりコンパイルされた実行オブジェクトについて、実行時のエラー発生時のスタックトレース情報を出力できます。<br />
例えば、以下のソースの場合について例を示します。</p>
<div class="sourceCode" id="cb58"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb58-1" data-line-number="1"><span class="fu">$</span> cat Prog6.hs</a>
<a class="sourceLine" id="cb58-2" data-line-number="2"></a>
<a class="sourceLine" id="cb58-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb58-4" data-line-number="4"></a>
<a class="sourceLine" id="cb58-5" data-line-number="5"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb58-6" data-line-number="6">main <span class="fu">=</span> print f1</a>
<a class="sourceLine" id="cb58-7" data-line-number="7"></a>
<a class="sourceLine" id="cb58-8" data-line-number="8">f1 <span class="fu">=</span> f2 <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb58-9" data-line-number="9"></a>
<a class="sourceLine" id="cb58-10" data-line-number="10">f2 <span class="fu">=</span> f3 <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb58-11" data-line-number="11"></a>
<a class="sourceLine" id="cb58-12" data-line-number="12">f3 <span class="fu">=</span> <span class="dv">1</span> <span class="ot">`div`</span> <span class="dv">0</span></a></code></pre></div>
<p>スタックトレースを取るためには、以下の様にまず、コンパイル時に、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html?highlight=#ghc-flag--rtsopts%5B=%E2%9F%A8none%7Csome%7Call%E2%9F%A9%5D"><code>-rtsopts</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--prof"><code>-prof</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--fprof-auto"><code>-fprof-auto</code></a>オプションを指定します。<br />
<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html?highlight=#ghc-flag--rtsopts%5B=%E2%9F%A8none%7Csome%7Call%E2%9F%A9%5D"><code>-rtsopts</code></a>は、実行オブジェクトの実行時に、<span class="ascii">GHC</span>のランタイムシステム<span class="ascii">(RTS)</span>用の引数を使用可能にするオプションです。 <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--prof"><code>-prof</code></a>は、プロファイル用のコードを埋め込むためのオプションです。 <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#ghc-flag--fprof-auto"><code>-fprof-auto</code></a>は、プロファイルを取得する対象を自動で設定するオプションです。</p>
<pre><code>$ ghc -rtsopts -prof -fprof-auto Prog6.hs</code></pre>
<p>実行時におけるエラー時のスタックトレースを出力するには、実行オブジェクトの起動時に<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#setting-rts-options-on-the-command-line"><code>+RTS</code></a> <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#rts-flag--xc"><code>-xc</code></a>オプションを指定します。 （<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html?highlight=#rts-flag--xc"><code>-xc</code></a>がスタックトレース出力のためのオプションです。）</p>
<pre><code>$ ./Prog6 +RTS -xc</code></pre>
<p>これにより、エラー時のスタックトレース情報が、次の様に出力されます。</p>
<div class="sourceCode" id="cb61"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb61-1" data-line-number="1"><span class="fu">***</span> <span class="dt">Exception</span> (reporting due to <span class="fu">+</span><span class="dt">RTS</span> <span class="fu">-</span>xc)<span class="fu">:</span> (<span class="dt">THUNK_STATIC</span>), stack trace<span class="fu">:</span> </a>
<a class="sourceLine" id="cb61-2" data-line-number="2">  <span class="dt">GHC.Real.CAF</span></a>
<a class="sourceLine" id="cb61-3" data-line-number="3">  <span class="fu">--&gt;</span> evaluated by<span class="fu">:</span> Main.f3,</a>
<a class="sourceLine" id="cb61-4" data-line-number="4">  called from <span class="dt">Main.CAF</span></a>
<a class="sourceLine" id="cb61-5" data-line-number="5">  <span class="fu">--&gt;</span> evaluated by<span class="fu">:</span> Main.f2,</a>
<a class="sourceLine" id="cb61-6" data-line-number="6">  called from <span class="dt">Main.CAF</span></a>
<a class="sourceLine" id="cb61-7" data-line-number="7">  <span class="fu">--&gt;</span> evaluated by<span class="fu">:</span> Main.f1,</a>
<a class="sourceLine" id="cb61-8" data-line-number="8">  called from <span class="dt">Main.CAF</span></a>
<a class="sourceLine" id="cb61-9" data-line-number="9">  <span class="fu">--&gt;</span> evaluated by<span class="fu">:</span> Main.main,</a>
<a class="sourceLine" id="cb61-10" data-line-number="10">  called from <span class="dt">Main.CAF</span></a>
<a class="sourceLine" id="cb61-11" data-line-number="11"><span class="dt">Prog6</span><span class="fu">:</span> divide by zero</a></code></pre></div>
<p>上の例では、エラーは<span class="ascii">f3</span>で発生しており、<span class="ascii">f3</span>は<span class="ascii">f2, f1, main</span>の順に呼び出されてきたことが分かります。</p>
<p>スタックトレースの詳細については、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html?highlight=#rts-flag--xc">こちら</a>を参照してください。<br />
スタックトレースについては、<a href="http://d.hatena.ne.jp/kazu-yamamoto/20130205/1360051153">こちら</a>も参考になります。</p>
<p>その他、実行時のオプションの詳細は、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html">こちら</a>を参照してください。</p>
<hr />
<h2 id="補足">補足</h2>
<p>さらに、以下の様に、コンパイラ自身についての、情報を出力する方法もあります。</p>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using.html?highlight=#ghc-flag---version"><code>ghc --version</code></a> <span class="ascii">: GHC</span>のバージョンを出力</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using.html?highlight=#ghc-flag---info"><code>ghc --info</code></a> <span class="ascii">: GHC</span>のコンパイラ自身の詳細情報を出力</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using.html?highlight=#ghc-flag---show-options"><code>ghc --show-options</code></a> <span class="ascii">: GHC</span>のオプション一覧を出力</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using.html?highlight=#ghc-flag---supported-extensions"><code>ghc --supported-extensions</code></a> <span class="ascii">: GHC</span>の言語拡張一覧を出力</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using.html?highlight=#ghc-flag---print-libdir"><code>ghc --print-libdir</code></a> <span class="ascii">: GHC</span>が参照するパッケージのディレクトリ一覧を出力</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/packages.html#using-packages"><code>ghc-pkg list</code></a> <span class="ascii">: GHC</span>が参照するパッケージの一覧を出力</li>
</ul>
<p><span class="ascii">Happy Hacking!</span></p>
<p>以上です。</p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2017/13-about-kind-system-part2.html">Haskellの種(kind)について (Part 2)</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/11-haskell-newbies-talks.html" style="margin-left: auto;">Haskell-jp現在の活動・目的総ざらい</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>

</feed>
