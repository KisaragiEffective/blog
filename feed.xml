<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Haskell-jp Blog</title>
    <link href="https://haskell.jp/blog/feed.xml" rel="self" />
    <link href="https://haskell.jp/blog" />
    <id>https://haskell.jp/blog/feed.xml</id>
    <author>
        <name>Haskell-jp</name>
        <email></email>
    </author>
    <updated>2018-04-09T00:00:00Z</updated>
    <entry>
    <title>CLIアプリのE2Eテストを行うためのライブラリー main-testerをリリースしました</title>
    <link href="https://haskell.jp/blog/posts/2018/main-tester.html" />
    <id>https://haskell.jp/blog/posts/2018/main-tester.html</id>
    <published>2018-04-09T00:00:00Z</published>
    <updated>2018-04-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>こんにちは。みなさん、テストは書いてますか？<br />
「<a href="http://syocy.hatenablog.com/entry/haskell-library-2016#%E3%83%86%E3%82%B9%E3%83%88"><span class="ascii">Haskell</span>ライブラリ所感<span class="ascii">2016</span></a>」という記事でも紹介されているとおり、<span class="ascii">Haskell</span>にも様々なテスト用ライブラリーがあります。<br />
今回は、「<span class="ascii">Haskell</span>ライブラリ所感<span class="ascii">2016</span>」でも紹介されている<a href="https://hackage.haskell.org/package/silently"><span class="ascii">silently</span></a>というパッケージにインスパイアされた、新しいテスト用ライブラリーを作りました。<br />
タイトルにも書きましたが<a href="https://hackage.haskell.org/package/main-tester"><span class="ascii">main-tester</span></a>といいます。</p>
<h1 id="main-testerができること"><span class="ascii">main-tester</span>ができること</h1>
<p><span class="ascii">main-tester</span>は名前の通り、<code>main</code>関数のテストをサポートするライブラリーです。<br />
<span class="ascii">Haskell</span>製のプログラムを起動すると最初に実行される、あの<code>main</code>関数です。</p>
<p><code>main</code>関数は<code>IO ()</code>という型であるとおり、原則として必ず入出力を伴うので、自動テストがしにくい関数です。<br />
一般的なベストプラクティスとしては、できるだけ<code>IO</code>でない、純粋な関数を中心にテストを書いていくのが普通でしょう。<br />
それでも敢えて<code>main</code>関数の自動テストを書くのには、以下のメリットがあります。</p>
<ol type="1">
<li><code>main</code>関数をテストすると言うことは、作っているコマンドの、ユーザーの要求に最も近いレベルのテスト、<span class="ascii">E2E</span>テストをすることができる。</li>
<li><code>main</code>関数（や、その他の<code>IO</code>を伴う関数）に対するテストは、データベースやファイルシステムなど、外部のソフトウェアとの「組み合わせ」で起こるバグを検出できる。
<ul>
<li>経験上、特に単純なアプリケーションでは、そうした外部のソフトウェアに対する「誤解」が原因となったバグが比較的多いように感じています。</li>
</ul></li>
<li>私の個人的な都合ですが、趣味では小さなアプリケーションを書くことが多いので、そうした<span class="ascii">E2E</span>テストの方が効果的だったりする。</li>
</ol>
<p>このように、<code>main</code>関数をはじめとする、<code>IO</code>な関数に対して敢えて自動テストを書くことには、様々なメリットがあります。<br />
<code>main-tester</code>はそうした<code>IO</code>な関数をテストする際に伴う、<span class="ascii">2</span>つの問題を解決しました。</p>
<ol type="1">
<li>標準出力・標準エラー出力に出力した文字列がテストしにくい
<ul>
<li>➡️ <code>captureProcessResult</code>という関数で、標準出力・標準エラー出力に出力した文字列をそれぞれ<code>ByteString</code>として取得することができます。</li>
</ul></li>
<li>標準入力から文字列を読み出そうとすると、テストの実行が停止してしまう。
<ul>
<li>➡️ <code>withStdin</code>という関数で、標準入力に与えたい文字列を<code>ByteString</code>として与えることができます。</li>
</ul></li>
</ol>
<p>ここに書いたことは、ビルドした実行ファイルを子プロセスとして呼び出すことによってもできます。<br />
入出力の順番など、標準出力や標準エラー出力のより細かい挙動をテストするにはその方がいいでしょう<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>。<br />
しかし、テストのために<code>PATH</code>を分離させる必要があったり、そのために<a href="https://github.com/commercialhaskell/stack/issues/2885"><code>stack exec</code>を使ったらめっちゃ遅い</a>という問題があったり、そもそも子プロセス呼び出しはそれだけでオーバーヘッドがあったりと、様々な問題があります。<br />
物事をよりシンプルにするには、<code>main</code>関数を直接呼び出した方がよいでしょう。<br />
<span class="ascii">main-tester</span>は、<span class="ascii">CLI</span>アプリケーションの<span class="ascii">E2E</span>テストにおける、そうした子プロセスの呼び出しの問題と、より大きな関数をテストしたいというニーズに応えるためのライブラリーなのです。</p>
<h1 id="ほかのライブラリーとの違い">ほかのライブラリーとの違い</h1>
<p>「<span class="ascii">silently</span>というパッケージにインスパイアされた」と冒頭で申しましたとおり、前節で紹介した機能は、実はすでにほかのライブラリーに似たものがあります。<br />
<span class="ascii">silently</span>に加え、<a href="https://hackage.haskell.org/package/imperative-edsl-0.7.1/docs/System-IO-Fake.html"><span class="ascii">imperative-edsl</span>というパッケージに含まれる、<code>System.IO.Fake</code>というモジュール</a>です<small>（ほかにもあったらすみません！🙇🙇🙇）</small>。<br />
これらと<span class="ascii">main-tester</span>との違いは何でしょう？</p>
<p>第一に、先ほども触れましたが、<span class="ascii">main-tester</span>の<code>captureProcessResult</code>関数や<code>withStdin</code>関数は、標準出力・標準エラー出力・標準入力でやりとりする文字列を<span class="ascii">strict</span>な<code>ByteString</code>でやりとりします。<br />
<span class="ascii">silently</span>や<code>System.IO.Fake</code>は、<code>String</code>なのです。<br />
<code>ByteString</code>は文字通り任意のバイト列を扱うことができるので、「<span class="ascii">Unicode</span>の文字のリスト」である<code>String</code>よりも、多様なデータを扱うことができます。</p>
<p>これは、特に複数の種類の文字コードを扱うとき、非常に重要な機能となります。<br />
<a href="https://haskell.jp/blog/posts/2017/windows-gotchas.html">以前の記事で取り上げた、<code>Invalid character</code>というエラー</a>を再現させる場合も、ないと大変やりづらいでしょう。</p>
<p>第二に、<span class="ascii">main-tester</span>の<code>captureProcessResult</code>関数は、<code>main</code>関数の終了コードも<a href="https://hackage.haskell.org/package/base-4.11.0.0/docs/System-Exit.html#t:ExitCode"><code>ExitCode</code>型</a>の値として取得できます。<br />
<code>main</code>関数の中で<code>exitFailure</code>等の関数を呼び出すと、<code>ExitCode</code>が例外として投げられます。<br />
既存のライブラリーでこれを行うと、<code>ExitCode</code>が例外として処理されるため、テストしたい<code>main</code>関数の実行が終了してしまいます。<br />
結果、<code>main</code>関数が標準出力・標準エラー出力に書き込んだ文字列を取得することができないのです。<br />
「○○というエラーメッセージを出力して異常終了する」といったことをテストしたい場合、これでは使いづらいでしょう。<br />
<strong>「<code>main</code>関数の<span class="ascii">E2E</span>テストを行うためのライブラリーである」</strong>という観点から、必須の機能であると判断し、実装しました。 ちなみに、<code>ExitCode</code>以外の例外についてはそのまま投げられます。仕様を単純にするために、これはユーザーのテストコードの中で処理することとしています。</p>
<h1 id="使い方バグ報告">使い方・バグ報告</h1>
<p>機能は非常にシンプルなので、使い方については<a href="https://hackage.haskell.org/package/main-tester-0.1.0.0/docs/Test-Main.html">ドキュメント</a>のサンプルコードを読めば大体わかるかなぁと思いますが、簡単にサンプルを載せておきましょう。</p>
<p>例えばこんなソース👇のプログラムがあった場合、</p>
<p><span class="ascii">ExampleMain.hs:</span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">module</span> <span class="dt">ExampleMain</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Data.List</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="kw">import</span> <span class="dt">System.Exit</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"></a>
<a class="sourceLine" id="cb1-6" data-line-number="6"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb1-7" data-line-number="7">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">  putStr <span class="st">&quot;What&#39;s your name?: &quot;</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9">  name <span class="ot">&lt;-</span> getLine</a>
<a class="sourceLine" id="cb1-10" data-line-number="10">  <span class="kw">if</span> <span class="st">&quot;Yuji&quot;</span> <span class="ot">`isInfixOf`</span> name</a>
<a class="sourceLine" id="cb1-11" data-line-number="11">    <span class="kw">then</span> putStrLn <span class="st">&quot;Nice name!&quot;</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">    <span class="kw">else</span> die <span class="fu">$</span> name <span class="fu">++</span> <span class="st">&quot;? Sorry I don&#39;t know such a guy!&quot;</span></a></code></pre></div>
<p><span class="ascii">main-tester</span>を使えば、次のように<span class="ascii">Hspec</span>でテストできます。</p>
<p><span class="ascii">ExampleSpec.hs:</span></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="kw">import</span> <span class="dt">System.Exit</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Test.Main</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="kw">import</span> <span class="dt">Test.Hspec</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">ExampleMain</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString</span> <span class="kw">as</span> <span class="dt">B</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8"></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">main <span class="fu">=</span> hspec <span class="fu">$</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">  describe <span class="st">&quot;your-cool-command&quot;</span> <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11">    context <span class="st">&quot;Given &#39;Yuji&#39; to stdin&quot;</span> <span class="fu">$</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12">      it <span class="st">&quot;prints a string including &#39;Nice name&#39; without an error&quot;</span> <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13">        result <span class="ot">&lt;-</span> withStdin <span class="st">&quot;Yuji&quot;</span><span class="fu">$</span> captureProcessResult ExampleMain.main</a>
<a class="sourceLine" id="cb2-14" data-line-number="14">        prExitCode result <span class="ot">`shouldBe`</span> <span class="dt">ExitSuccess</span></a>
<a class="sourceLine" id="cb2-15" data-line-number="15">        prStderr result <span class="ot">`shouldSatisfy`</span> B.null</a>
<a class="sourceLine" id="cb2-16" data-line-number="16">        prStdout result <span class="ot">`shouldSatisfy`</span> (<span class="st">&quot;Nice name&quot;</span> <span class="ot">`B.isInfixOf`</span>)</a>
<a class="sourceLine" id="cb2-17" data-line-number="17"></a>
<a class="sourceLine" id="cb2-18" data-line-number="18">    context <span class="st">&quot;Given other name to stdin&quot;</span> <span class="fu">$</span></a>
<a class="sourceLine" id="cb2-19" data-line-number="19">      it <span class="st">&quot;prints an error message&quot;</span> <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-20" data-line-number="20">        result <span class="ot">&lt;-</span> withStdin <span class="st">&quot;other name&quot;</span> <span class="fu">$</span> captureProcessResult ExampleMain.main</a>
<a class="sourceLine" id="cb2-21" data-line-number="21">        prExitCode result <span class="ot">`shouldBe`</span> <span class="dt">ExitFailure</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-22" data-line-number="22">        prStderr result <span class="ot">`shouldSatisfy`</span> (not <span class="fu">.</span> B.null)</a></code></pre></div>
<p>それぞれのファイルを同じディレクトリーに置いた上で、次のように実行すれば試せるはずです <small>（<span class="ascii">cabal</span>ユーザーの皆さんは適当に読み替えてください…）</small>。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="op">&gt;</span> <span class="ex">stack</span> build hspec main-tester</a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="op">&gt;</span> <span class="ex">stack</span> exec runghc -- --ghc-arg=-i. ExampleSpec.hs</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="ex">your-cool-command</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">  <span class="ex">Given</span> <span class="st">&#39;Yuji&#39;</span> to stdin</a>
<a class="sourceLine" id="cb3-6" data-line-number="6">    <span class="ex">prints</span> a string including <span class="st">&#39;Nice name&#39;</span> without an error</a>
<a class="sourceLine" id="cb3-7" data-line-number="7">  <span class="ex">Given</span> other name to stdin</a>
<a class="sourceLine" id="cb3-8" data-line-number="8">    <span class="ex">prints</span> an error message</a>
<a class="sourceLine" id="cb3-9" data-line-number="9"></a>
<a class="sourceLine" id="cb3-10" data-line-number="10"><span class="ex">Finished</span> in 0.0130 seconds</a>
<a class="sourceLine" id="cb3-11" data-line-number="11"><span class="ex">2</span> examples, 0 failures</a></code></pre></div>
<p>バグを見つけたら<a href="https://gitlab.com/igrep/main-tester/issues">こちらの<span class="ascii">GitLab</span>の<span class="ascii">Issue</span></a>に報告してください<small>（最近の個人的な判官贔屓により、敢えて<span class="ascii">GitLab</span>にしております 😏）</small>。<br />
それではこの春は<span class="ascii">main-tester</span>で<span class="ascii">Happy Haskell Testing!!</span> 💚💚💚</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p><code>main</code>関数を子スレッドとして<code>forkIO</code>することで同じことが恐らくできますが、テスト結果の報告に使うべき、標準出力・標準エラー出力を食い合うことになってしまうので、非常にやりづらいと思います。<a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2018/renew-haskell-antenna.html" style="margin-left: auto;">Haskell Antenna をリニューアルしました</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>Haskell Antenna をリニューアルしました</title>
    <link href="https://haskell.jp/blog/posts/2018/renew-haskell-antenna.html" />
    <id>https://haskell.jp/blog/posts/2018/renew-haskell-antenna.html</id>
    <published>2018-03-21T00:00:00Z</published>
    <updated>2018-03-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <p><a href="https://haskell.jp/antenna/"><span class="ascii">Haskell Antenna</span></a>は<a href="https://github.com/lotz84"><span class="ascii">lotz84</span></a>氏が作った<span class="ascii">Haskell</span>の日本語情報を収集するウェブサイトです。 下記の記事を読むと、動機付けなどが分かると思います。</p>
<ul>
<li><a href="https://haskell.jp/blog/posts/2017/03-haskell-antenna.html"><span class="ascii">Haskell Antenna</span> を公開しました <span class="ascii">- Haskell-jp</span></a></li>
</ul>
<p>残念なことに<span class="ascii">Haskell Antenna</span>は動作が重く、なかなか満足に閲覧することが出来ませんでした。 そこで、<span class="ascii">Haskell Antenna</span>をリニューアルしました！</p>
<p>正確には、<a href="https://planet.haskell.org/"><span class="ascii">Planet Haskell</span></a>の日本語版として作成した<a href="https://github.com/matsubara0507/planet-haskell-jp-demo">もの</a>を、新しい<span class="ascii">Haskell Antenna</span>として置き換えました。 新<span class="ascii">Antenna</span>は旧<span class="ascii">Antenna</span>と比べると見た目も機能も更新頻度も残念なことになってしまいましたが、各サイトのフィードから記事の一覧を取得し静的サイトとして生成しているだけなので動作は軽快です。</p>
<p>旧<span class="ascii">Antenna</span>同様に新<span class="ascii">Antenna</span>でも配信する情報源<span class="ascii">(</span>今のところ<span class="ascii">Atom</span>か<span class="ascii">RSS2.0</span>形式のフィード<span class="ascii">)</span>をいつでも募集しています。 もし追加すべき情報源にアイデアがあれば<a href="https://github.com/haskell-jp/antenna#サイトの追加方法"><span class="ascii">GitHub</span>レポジトリの<span class="ascii">README</span></a>にかかれている方法を参考に<span class="ascii">Pull Request</span>を送っていただくことが可能です。 また、<span class="ascii">PR</span>を送るのは面倒だという方は<span class="ascii">Haskell-jp</span>の<span class="ascii">Slack</span>の<span class="ascii">#antenna</span>チャンネルを通じて提案を行ってもらうことも大歓迎です。 <span class="ascii">(Planet Haskell</span>がそうであるように<span class="ascii">)Haskell</span>中心でなくても良いので、<span class="ascii">Haskell</span>の情報を発信しているブログを持っている方は是非、追加提案をしていただけると助かります。</p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2018/main-tester.html">CLIアプリのE2Eテストを行うためのライブラリー main-testerをリリースしました</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2018/windows-long-path.html" style="margin-left: auto;">WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて</title>
    <link href="https://haskell.jp/blog/posts/2018/windows-long-path.html" />
    <id>https://haskell.jp/blog/posts/2018/windows-long-path.html</id>
    <published>2018-03-13T00:00:00Z</published>
    <updated>2018-03-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>去年、<a href="/posts/2017/windows-gotchas.html"><span class="ascii">Windows</span>で<span class="ascii">Haskell</span>を扱う時によく遭遇するエラーと対処法</a>という記事で、<span class="ascii">Windows</span>ユーザーが<span class="ascii">Haskell</span>で開発したとき、あるいは<span class="ascii">Haskell</span>製のプログラムを使用した際によく遭遇するエラーやその回避方法を紹介しました。<br />
今回は、そこに追記したい内容として、最近私がよく出遭うようになったエラーを紹介します。</p>
<h1 id="openfile-does-not-exist-no-such-file-or-directoryといわれたら短いパスに移そう"><code>openFile: does not exist (No such file or directory)</code>といわれたら短いパスに移そう</h1>
<p><code>does not exist (No such file or directory)</code>というエラーは、本当に読んで字のごとく、開こうとしたファイルが存在しないためのエラーであることとがもちろん多いのですが、エラーメッセージに反して違う原因である場合もあります。</p>
<p>例えば、最近私はとあるプロジェクトを数文字長い名前にリネームしたのですが、たったそれだけで、<code>stack test</code>した際必ず問題のエラーが発生するようになってしまいました。</p>
<pre><code>$ stack test
a-little-longer-name-project-0.1.0.0: build (lib + exe + test)
Preprocessing library for a-little-longer-name-project-0.1.0.0..
Building library for a-little-longer-name-project-0.1.0.0..
Preprocessing executable &#39;mmlh&#39; for a-little-longer-name-project-0.1.0.0..
Building executable &#39;mmlh&#39; for a-little-longer-name-project-0.1.0.0..
Preprocessing test suite &#39;a-little-longer-name-project-test&#39; for a-little-longer-name-project-0.1.0.0..
Building test suite &#39;a-little-longer-name-project-test&#39; for a-little-longer-name-project-0.1.0.0..
[1 of 5] Compiling Paths_aLittleLongerNameProject ( .stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\autogen\Paths_aLittleLongerNameProject.hs, .stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\a-little-longer-name-project-test-tmp\Paths_aLittleLongerNameProject.o )
.stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\a-little-longer-name-project-test-tmp\.stack-work\dist\5c8418a7\build\a-little-longer-name-project-test\autogen\Paths_aLittleLongerNameProject.dump-hi: openFile: does not exist (No such file or directory)</code></pre>
<p>どういうことかと悩んでいたところ、<a href="https://github.com/commercialhaskell/stack/issues/3649">こんな<span class="ascii">Issue</span></a>を見つけました。<br />
<a href="https://github.com/commercialhaskell/stack/issues/3649#issuecomment-351612621"><span class="ascii">Snoyman</span>の指摘</a>のとおり、こちらの問題は<span class="ascii">Windows</span>で使えるパスの長さが原因のエラーのようです。<br />
どういうことかというと、<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%20(v=vs.85)#maxpath"><span class="ascii">MSDN</span>のこちらのページ</a>でも触れているとおり、<span class="ascii">Windows</span>の（<span class="ascii">C</span>言語レベルでの）各種ファイル操作用<span class="ascii">API</span>では、一度に扱えるパスの長さが<span class="ascii">260</span>文字までと決められていて、その制限にかかったためのエラーだというのです！<br />
<code>does not exist (No such file or directory)</code>なんてエラーメッセージで表されるのでわかりづらい！<small>（おそらく<span class="ascii">Windows</span>のエラーコードの出し方に問題があるんじゃないかと思います）</small></p>
<p><span class="ascii">DOS</span>時代から残るこの制限、完全に時代錯誤なものでしかないのですが、<span class="ascii">Windows</span>でパッケージマネージャーなどが自動的に作ったパスを扱っていると、しばしば出くわすことがあります。<br />
<span class="ascii">stack</span>においても、<a href="https://github.com/commercialhaskell/stack/issues/3285">こちらの<span class="ascii">Issue</span></a>で同じ問題が議論されていたり、<a href="https://github.com/commercialhaskell/stack/releases/tag/v1.6.5"><span class="ascii">ver. 1.6.5</span>の<span class="ascii">ChangeLog</span></a>でも言及されていたりと、至る所で格闘している跡があります。</p>
<h2 id="回避方法">回避方法</h2>
<p>そんな<code>does not exist (No such file or directory)</code>ですが、残念ながら私が知る限り、プロジェクトなどのパスを（<code>C:\</code>などのよりルートに近い場所に置いて）より短くする以外の回避方法はありません。<br />
<a href="https://github.com/haskell/haskell-ide-engine#installation-on-windows"><span class="ascii">haskell-ide-engine</span>のインストール方法のページ</a>曰く、（新しめの）<span class="ascii">Windows 10</span>であれば、グループポリシーを編集して、「<span class="ascii">Win32</span>の長いパスを有効にする」を「有効」にすれば回避できるとのことですが、残念ながら手元で試した限りうまくいきませんでした。何かやり方がまずかったのかもしれませんが。<br />
いずれにしても、<code>stack build</code>コマンドなどを実行したときに問題のエラーに遭遇した場合、ビルドしたいもののパスをなんとかして短くする以上の方法はありません。<br />
<code>C:\</code>直下をホームディレクトリのように使う人が今でもたくさんいるわけです。</p>
<p>一方、あなたが問題のエラーが発生するプログラムを<strong>修正する</strong>ことができる立場にある場合、次の方法で回避できるかもしれません。</p>
<h3 id="長いパスをより短くするためにカレントディレクトリーを変更して相対パスを短くする">長いパスをより短くするために、カレントディレクトリーを変更して、相対パスを短くする。</h3>
<p>本件はあくまでも、<span class="ascii">Windows</span>の各種ファイル操作用<span class="ascii">API</span>の<span class="ascii">1</span>回の呼び出しで渡せる長さの制限ですので、制限を超えてしまうような場合はパスを分割すればよいのです。<br />
<a href="https://hackage.haskell.org/package/filepath-1.4.2/docs/System-FilePath-Posix.html#v:splitFileName"><span class="ascii">filepath</span>パッケージの<code>splitFileName</code>関数</a>や<a href="https://hackage.haskell.org/package/filepath-1.4.2/docs/System-FilePath-Posix.html#v:splitPath"><code>splitPath</code>関数</a>を駆使してパスを分割した上で、対象のファイルの親ディレクトリーまで<a href="https://hackage.haskell.org/package/directory-1.3.2.1/docs/System-Directory.html#v:setCurrentDirectory"><span class="ascii">directory</span>パッケージの<code>setCurrentDirectory</code>関数</a>で移動すれば、制限に引っかからないはずです<small>（時間の都合でこちらについては試すコードを用意しておりません。あしからず）</small>。</p>
<p>残念ながらカレントディレクトリーはプロセス全体で共有される情報ですので、マルチスレッドなプログラムでは頭の痛い問題が出てきてしまいますが、一番確実に回避できる方法のはずです。<br />
マルチスレッドである場合を考慮したくない場合は、次に紹介する方法を検討するとよいでしょう。</p>
<h3 id="win32-apiのユニコード版の関数にというプレフィックスを着けた絶対パスを渡す"><span class="ascii">Win32 API</span>のユニコード版の関数に、<code>\\?\</code>というプレフィックスを着けた絶対パスを渡す。</h3>
<p>ここまでに出てきた、「<span class="ascii">Windows</span>の各種ファイル操作用<span class="ascii">API</span>」は、すべて「<span class="ascii">Win32 API</span>」と呼ばれる<span class="ascii">Windows</span>固有の<span class="ascii">API</span>群の一部です。<br />
この「<span class="ascii">Win32 API</span>」に含まれる関数の多くは、「ユニコード版」とそうでないものに分かれます<small>（詳細は<a href="https://msdn.microsoft.com/ja-jp/library/windows/desktop/dd317766(v=vs.85).aspx"><span class="ascii">Conventions for Function Prototypes (Windows)</span></a>をご覧ください）</small>。</p>
<p>このうち、「ユニコード版」の<span class="ascii">API</span>には、この制限を緩和する専用の機能が含まれています。<br />
先ほども触れた<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%20(v=vs.85)#maxpath"><span class="ascii">MSDN</span>のページ</a>曰く、なんと<code>\\?\</code>という変な文字列を絶対パスの頭に着けると、最大約<span class="ascii">32,767</span>文字のパスまで受け付けるようになるというのです！<br />
なんともアドホックな感じのする解決方法ですが、<span class="ascii">Microsoft</span>が言うんだから間違いありません。<br />
いずれにしても<span class="ascii">32,767</span>文字という微妙な最大文字数ができてしまいますが、<span class="ascii">UTF-16</span>での<span class="ascii">32,767</span>文字なので、そう簡単に超えることはないでしょう。<br />
いちいち絶対パスに変えて変なプレフィックスを加えないといけないという面倒くささはありますが、いちいち分割して相対パスに変換するよりは簡単なはずですので、検討する価値があります。</p>
<p>この、<code>\\?\</code>機能を試す場合、下記のコードを適当なファイルに貼り付けて保存し、<code>stack runghc file.hs</code>などと実行してみてください <span class="ascii">(Thanks,</span> <span class="citation" data-cites="matsubara0507"><span class="ascii">@matsubara0507</span></span><span class="ascii">!)</span>。<br />
<code>catch</code>関数を使って例外を捕捉している箇所では、実際にパスが長すぎるためにエラーが発生し、<code>catch</code>されているはずです。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">import</span>           <span class="dt">Control.Exception</span> (catch, <span class="dt">IOException</span>)</a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="kw">import</span>           <span class="dt">Data.List</span>        (replicate)</a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="kw">import</span>           <span class="dt">System.Directory</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb2-6" data-line-number="6">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7">  crDir <span class="ot">&lt;-</span> getCurrentDirectory</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">  <span class="kw">let</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">    path1 <span class="fu">=</span> mconcat <span class="fu">$</span> replicate <span class="dv">20</span> <span class="st">&quot;abcdefgh/&quot;</span> <span class="co">-- ok</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">    path2 <span class="fu">=</span> mconcat <span class="fu">$</span> replicate <span class="dv">30</span> <span class="st">&quot;abcdefgh/&quot;</span> <span class="co">-- error</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11">    path3 <span class="fu">=</span> crDir <span class="fu">++</span> <span class="st">&quot;/&quot;</span> <span class="fu">++</span> path2 <span class="co">-- error</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12">    path4 <span class="fu">=</span> <span class="st">&quot;\\\\?\\&quot;</span> <span class="fu">++</span> path3 <span class="co">-- ok</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13"></a>
<a class="sourceLine" id="cb2-14" data-line-number="14">  putStrLn <span class="fu">$</span> <span class="st">&quot;path1: &quot;</span> <span class="fu">++</span> show path1</a>
<a class="sourceLine" id="cb2-15" data-line-number="15">  createDirectoryIfMissing <span class="dt">True</span> path1</a>
<a class="sourceLine" id="cb2-16" data-line-number="16"></a>
<a class="sourceLine" id="cb2-17" data-line-number="17">  putStrLn <span class="fu">$</span> <span class="st">&quot;path2: &quot;</span> <span class="fu">++</span> show path2</a>
<a class="sourceLine" id="cb2-18" data-line-number="18">  createDirectoryIfMissing <span class="dt">True</span> path2 <span class="ot">`catch`</span> (\e <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;  &quot;</span> <span class="fu">++</span> show (<span class="ot">e ::</span> <span class="dt">IOException</span>))</a>
<a class="sourceLine" id="cb2-19" data-line-number="19"></a>
<a class="sourceLine" id="cb2-20" data-line-number="20">  putStrLn <span class="fu">$</span> <span class="st">&quot;path3: &quot;</span> <span class="fu">++</span> show path3</a>
<a class="sourceLine" id="cb2-21" data-line-number="21">  createDirectoryIfMissing <span class="dt">True</span> path3 <span class="ot">`catch`</span> (\e <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;  &quot;</span> <span class="fu">++</span> show (<span class="ot">e ::</span> <span class="dt">IOException</span>))</a>
<a class="sourceLine" id="cb2-22" data-line-number="22"></a>
<a class="sourceLine" id="cb2-23" data-line-number="23">  putStrLn <span class="fu">$</span> <span class="st">&quot;path4: &quot;</span> <span class="fu">++</span> show path4</a>
<a class="sourceLine" id="cb2-24" data-line-number="24">  createDirectoryIfMissing <span class="dt">True</span> path4</a></code></pre></div>
<h1 id="おわりに">おわりに</h1>
<p>さて、またしても<span class="ascii">Windows</span>固有の面倒な問題を紹介することとなってしまいましたが、俗世の喜び（主にゲーム）と簡単にインストールできる<span class="ascii">GUI</span>に慣らされてしまった私は、今後も<span class="ascii">Windows</span>を使い続けるつもりです。<br />
いろいろ困難は尽きませんがこれからも<span class="ascii">Windows</span>で<span class="ascii">Happy Haskell Life</span>を！🏁🏁🏁</p>
<h1 id="参考url">参考<span class="ascii">URL</span></h1>
<p>※本文中で言及していないもののみ</p>
<ul>
<li><a href="http://kkamegawa.hatenablog.jp/entry/2016/07/27/220014">プログラマ的に<span class="ascii">Windows 10 Anniversary Update</span>のうれしいところ <span class="ascii">- kkamegawa</span>’<span class="ascii">s weblog</span></a></li>
<li><a href="https://superuser.com/questions/1119883/windows-10-enable-ntfs-long-paths-policy-option-missing"><span class="ascii">Windows 10</span> “<span class="ascii">Enable NTFS long paths policy</span>” <span class="ascii">option missing - Super User</span></a></li>
</ul>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2018/renew-haskell-antenna.html">Haskell Antenna をリニューアルしました</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2018/topic-request.html" style="margin-left: auto;">Haskell-jp Blogで書いてほしいネタを募集します！</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>Haskell-jp Blogで書いてほしいネタを募集します！</title>
    <link href="https://haskell.jp/blog/posts/2018/topic-request.html" />
    <id>https://haskell.jp/blog/posts/2018/topic-request.html</id>
    <published>2018-02-18T00:00:00Z</published>
    <updated>2018-02-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p><span class="ascii">Haskell-jp Blog</span>では、設立当初より<span class="ascii">Haskell</span>に関する記事を幅広く募集してきました。<br />
このたびはそれに加え、この<span class="ascii">Haskell-jp Blog</span>で「書いて欲しい！」「読んでみたい！」<span class="ascii">Haskell</span>に関する話題も募集することにしました！ 例えば、下記のような話題が考えられるでしょう。</p>
<ul>
<li>○○パッケージの解説記事が欲しい</li>
<li>数学用語と<span class="ascii">Haskell</span>用語の対応関係が知りたい</li>
<li><span class="ascii">Real World Haskell</span>を今読むならの注意点</li>
<li>そのほか、<span class="ascii">Haskell</span>に関する話題であれば何でも！</li>
</ul>
<p><strong>ただし、提案していただいたネタに関する知見の持ち主が居ないかもしれませんし、誰かの負担になるものなので必ず記事になるとは限りません。</strong> また、場合によっては既に記事があるため、既存の記事を薦められるかもしれません。</p>
<h2 id="ネタを提案してくれる場合">ネタを提案してくれる場合</h2>
<p><a href="https://github.com/haskell-jp/blog/issues/new?template=topic-request.md&amp;labels=Topic+Request">この<span class="ascii">Blog</span>のリポジトリの<span class="ascii">Issue</span></a>からお願いします。 既に提案されていたら、その<span class="ascii">Issue</span>に対して 👍 するといいと思います。</p>
<h2 id="書いてもいいよって場合">書いてもいいよって場合</h2>
<p><code>TopicRequest</code> というラベルを作ったので、<a href="https://github.com/haskell-jp/blog/issues?q=is:issue+is:Aopen+label:%22Topic+Request%22"><span class="ascii">Issue</span>をそのラベルで検索</a>してください。 書いてもいいという提案があった場合は、<span class="ascii">Issue</span>に「書いてもいいよ」という旨をコメントしていただけるとバッティングが無くて助かります。</p>
<p>それでは、今後は<span class="ascii">Haskell</span>に関するあなたの記事だけでなく、あなたが<span class="ascii">Haskell</span>について読みたい記事も募集していきますので、どしどし応募してください！ 🙏</p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2018/windows-long-path.html">WindowsでHaskellを扱う時によく遭遇するNo such file or directoryについて</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2018/ghc-proposal-and-patch.html" style="margin-left: auto;">GHCへの変更提案とパッチ送付の手順例</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>GHCへの変更提案とパッチ送付の手順例</title>
    <link href="https://haskell.jp/blog/posts/2018/ghc-proposal-and-patch.html" />
    <id>https://haskell.jp/blog/posts/2018/ghc-proposal-and-patch.html</id>
    <published>2018-02-11T00:00:00Z</published>
    <updated>2018-02-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<h2 id="はじめに">はじめに</h2>
<p><span class="ascii">Haskell</span>のコンパイラの１つである<span class="ascii">GHC</span>は、オープンソースソフトウェア<span class="ascii">(OSS)</span>のプロジェクトとして今も活発に開発が進められています。 個人の経験や経歴や肩書きや権限などに関わらず、誰でも<span class="ascii">GHC</span>の開発にすぐに参加することができます。</p>
<p>ここでは、<span class="ascii">GHC</span>に新しい変更を提案し実装するための、以下の手順例を紹介します。</p>
<ol type="1">
<li><a href="#ch1">変更提案</a> <span class="ascii">(GitHub</span>の<span class="ascii">ghc-proposals</span> リポジトリ上にて実施<span class="ascii">)</span></li>
<li><a href="#ch2">パッチ送付</a> <span class="ascii">(Phabricator</span>の<span class="ascii">Haskell.org</span> インスタンス上にて実施<span class="ascii">)</span></li>
</ol>
<p><span class="ascii">GHC</span>に改善したい点があれば、誰でも変更提案が可能です。 提案のハードルは案外高いものではありません。<span class="ascii">GHC</span>開発では、新たな<span class="ascii">contribution</span>が歓迎されています。<br />
仮に提案やパッチが<span class="ascii">reject</span>判断されるとしても、<span class="ascii">GHC</span>の開発者と直接やり取りする良い機会が得られます。</p>
<p>以下では、数値リテラルの構文を変更する単純な例をもとに、変更提案やパッチ送付の手順例を紹介します。<span class="ascii">(</span>文章だらけになってしまいましたがご容赦を 😊 <span class="ascii">)</span></p>
<hr />
<h2 id="ch1"><span class="ascii">1.</span> 変更提案<span class="ascii">(proposal)</span></h2>
<h3 id="概要">概要</h3>
<p><span class="ascii">GHC</span>は、コンパイラ本体やライブラリやツールチェーンなど多くの要素で構成されていますが、ここではコンパイラ本体への変更提案の手順について紹介します。</p>
<p><span class="ascii">GHC</span>のコンパイラ本体の開発では、<a href="https://github.com/ghc-proposals/ghc-proposals#what-is-a-proposal">ユーザーに見える<span class="ascii">(user-visible)</span>振る舞い</a>等を変更<span class="ascii">(</span>追加・修正・削除など<span class="ascii">)</span>するための提案<span class="ascii">(proposal)</span>手順が定められています。 事前の調整や権限などを必要とせず、<span class="ascii">GitHub</span>への<span class="ascii">pull request</span>を通じて誰もが提案できます。</p>
<p>なお、変更提案<span class="ascii">(</span>仕様<span class="ascii">)</span>のプロセスと、修正パッチ送付<span class="ascii">(</span>実装<span class="ascii">)</span>のプロセスは、分離されています。必ずしも、変更提案者が実装まで行う必要はありません。</p>
<h3 id="変更提案の正確な手続き">変更提案の正確な手続き</h3>
<p>提案の具体的な手続きについては、以下に記載されています。よく読んでおきましょう。</p>
<ul>
<li><a href="https://github.com/ghc-proposals/ghc-proposals#ghc-proposals"><span class="ascii">https://github.com/ghc-proposals/ghc-proposals#ghc-proposals</span></a></li>
</ul>
<p>変更提案は、提案書を書いて以下の場所<span class="ascii">(</span>リポジトリ<span class="ascii">)</span>に、<span class="ascii">pull request</span>を送ることで行えます。</p>
<ul>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/pulls"><span class="ascii">https://github.com/ghc-proposals/ghc-proposals/pulls</span></a></li>
</ul>
<h3 id="変更提案のおおまかな流れ">変更提案のおおまかな流れ</h3>
<p><a href="https://github.com/ghc-proposals/ghc-proposals#what-is-the-timeline-of-a-proposal">提案の流れ</a>は、ざくっと以下の通りです。</p>
<ul>
<li>提案の作成
<ul>
<li><span class="ascii">GitHub</span>上で、<a href="https://github.com/ghc-proposals/ghc-proposals"><span class="ascii">ghc-proposals</span></a>のリポジトリを<span class="ascii">fork</span>する <a href="https://github.com/takenobu-hs/ghc-proposals"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">fork</span>してきた自分のリポジトリで作業用のブランチを作る <a href="https://github.com/takenobu-hs/ghc-proposals/tree/numeric-underscores"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">proposals</span>ディレクトリの下に、“<span class="ascii">0000-</span>プロポーザル名<span class="ascii">.rst</span>”のファイル名で<a href="https://github.com/ghc-proposals/ghc-proposals#how-to-start-a-new-proposal">提案用のファイルを作る</a> <a href="https://github.com/takenobu-hs/ghc-proposals/blob/numeric-underscores/proposals/0000-numeric-underscores.rst"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>“<span class="ascii">Motivation</span>”などの<a href="https://github.com/ghc-proposals/ghc-proposals#what-should-a-proposal-look-like">必要な項目</a>を、<a href="http://docs.sphinx-users.jp/rest.html"><span class="ascii">reStructuredText</span></a>の書式に従い記述する <a href="https://github.com/takenobu-hs/ghc-proposals/blob/numeric-underscores/proposals/0000-numeric-underscores.rst"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
</ul></li>
<li>提案の送付
<ul>
<li><span class="ascii">GitHub</span>上で、<span class="ascii">ghc-proposals</span>のリポジトリに、<span class="ascii">pull request</span>を送る <a href="https://github.com/ghc-proposals/ghc-proposals/pull/76"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>確定した<span class="ascii">pull request</span>の<span class="ascii">URL</span>を、提案用のファイルの“<span class="ascii">This proposal is discussed at this pull request.</span>”の箇所に記載してから、再度<span class="ascii">commit</span>し直す <a href="https://github.com/takenobu-hs/ghc-proposals/commit/61149ee277aadc6bd46e0ad35aeb529f02da1182#diff-1128b179eb6630a402469b59a8a7dce6"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">pull request</span>の <span class="ascii">Conversation</span>のところに、“<span class="ascii">Rendered</span>”という文字で提案ファイルへのリンクを貼っておく <a href="https://github.com/ghc-proposals/ghc-proposals/pull/76#issue-261822915"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
</ul></li>
<li>提案についての議論
<ul>
<li><span class="ascii">pull request</span>上で、<a href="https://github.com/ghc-proposals/ghc-proposals#discussion-goals">議論する</a> <a href="https://github.com/ghc-proposals/ghc-proposals/pull/76"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>フィードバックがあれば、提案ファイルを修正する</li>
<li>議論期間を充分に<span class="ascii">(</span>一ヶ月くらいは<span class="ascii">)</span>設ける</li>
</ul></li>
<li>提案の判断
<ul>
<li>議論が収束したら、<a href="https://github.com/ghc-proposals/ghc-proposals#who-is-the-committee"><span class="ascii">GHC Steering Committee</span></a> へ、<a href="https://github.com/ghc-proposals/ghc-proposals#how-to-bring-a-proposal-before-the-committee">判断依頼</a>をかける <a href="https://github.com/ghc-proposals/ghc-proposals/pull/76#issuecomment-339952996"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">GHC Steering Committee</span>が<span class="ascii">Accepted/Rejected</span>を判断する <a href="https://github.com/ghc-proposals/ghc-proposals/pull/76#event-1341434473"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">Accepted</span>なら、<span class="ascii">Trac</span>で<a href="https://ghc.haskell.org/trac/ghc/newticket?type=task"><span class="ascii">ticket</span>を登録</a>する <a href="https://ghc.haskell.org/trac/ghc/ticket/14473"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>次は、コード修正パッチの作成・送付フェーズへ</li>
</ul></li>
</ul>
<h3 id="変更提案の例">変更提案の例</h3>
<p>数値リテラルの構文を変更する場合の、具体的な変更提案の例を紹介します。</p>
<ul>
<li><a href="https://github.com/takenobu-hs/ghc-proposals/blob/0a694636560ca37d9b76e56bddc43c6bf1c9348a/proposals/0000-numeric-underscores.rst">変更提案の初版</a> <span class="ascii">|</span> <a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0009-numeric-underscores.rst">最終的な変更提案</a></li>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/pull/76">議論フェーズの例</a></li>
</ul>
<p>その他の提案の例は以下にたくさんあります。</p>
<ul>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/pulls?q=is%3Aopen+is%3Apr"><span class="ascii">Open</span>中の提案</a></li>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/pulls?q=is%3Apr+is%3Aclosed"><span class="ascii">Close</span>済みの提案</a></li>
</ul>
<h3 id="いくつかのポイントなど">いくつかのポイントなど</h3>
<ul>
<li>他の良い提案が参考になります <span class="ascii">(</span>同じ種類の提案や議論がうまく進んでいる提案などから、色々な観点を学べます。<span class="ascii">)</span></li>
<li>数カ月単位で気長に根気よくやる<span class="ascii">(</span>開発者は全員がボランティアで忙しい。<span class="ascii">)</span></li>
<li>提案してよいか迷う場合は、事前に<a href="https://mail.haskell.org/cgi-bin/mailman/listinfo/ghc-devs"><span class="ascii">ghc-devs</span>の<span class="ascii">ML(</span>メーリングリスト<span class="ascii">)</span></a>などで相談してもよい</li>
<li>英語の精度を必要以上に気にする必要はない。日本語でしっかり考える。あとは短い文に区切って、<span class="ascii">Google</span>翻訳にでも。</li>
</ul>
<p>提案プロセスは<span class="ascii">GitHub</span>上で行うものです。操作ミスがあったところでやり直しは何度でも行えます。失敗やミスを不必要に怖れる必要はありません。<br />
また、多くの提案は<span class="ascii">Accepted</span>に至らないこともあるので、結果を恥ずかしがる必要もありません。提案の結果に関わらず、提案とその議論自体が、他の開発者に新たな観点や気づき・刺激を提供できます。</p>
<p>それでは、提案プロセスをお楽しみ！</p>
<hr />
<h2 id="ch2"><span class="ascii">2.</span> パッチ送付<span class="ascii">(patch)</span></h2>
<h3 id="概要-1">概要</h3>
<p><span class="ascii">GHC</span>への変更提案に対するコード修正は、パッチを作成して送付することにより行われます。 ここでは、コード開発ツールである<span class="ascii">Phabricator</span>の<span class="ascii">differential</span>機能を用いる、標準的なパッチ送付の手順について紹介します。</p>
<p>なお、修正パッチは<span class="ascii">GitHub</span>の<span class="ascii">pull request</span>を通じても送付できますが、後のコードレビューのフェーズを考慮すると、<span class="ascii">Phabricator</span>を用いるこの手順が効率的です。</p>
<h3 id="パッチ送付の正確な手続き">パッチ送付の正確な手続き</h3>
<p>パッチ作成から送付についての具体的な手続きについては以下に記載されています。</p>
<ul>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/WorkingConventions/FixingBugs"><span class="ascii">How to contribute a patch to GHC</span></a></li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Phabricator"><span class="ascii">Using Phabricator for GHC development</span></a></li>
</ul>
<p>また、<span class="ascii">Phabricator</span>の詳細な操作手順については、以下に解説記事があります。</p>
<ul>
<li><a href="https://medium.com/@zw3rk/contributing-to-ghc-290653b63147"><span class="ascii">Contributing to GHC via Phabricator</span></a></li>
</ul>
<h3 id="パッチ送付のおおまかな流れ">パッチ送付のおおまかな流れ</h3>
<p>パッチ送付の流れは、ざくっと以下の通りです。</p>
<ul>
<li>パッチの作成
<ul>
<li><span class="ascii">GHC</span>の<span class="ascii">build/validate</span>用環境を<a href="https://ghc.haskell.org/trac/ghc/wiki/Building/Preparation">整えておく</a></li>
<li><span class="ascii">GHC</span>のリポジトリを<a href="https://ghc.haskell.org/trac/ghc/wiki/Building/GettingTheSources#CloningHEAD"><span class="ascii">clone</span>する</a></li>
<li>事前に<span class="ascii">master</span>ブランチ上で、<a href="https://ghc.haskell.org/trac/ghc/wiki/Building/QuickStart"><span class="ascii">build</span>できることを確認しておく</a> <span class="ascii">(master</span>自体が<span class="ascii">fail</span>していることがあるため。<span class="ascii">)</span></li>
<li>事前に<span class="ascii">master</span>ブランチ上で、<a href="https://ghc.haskell.org/trac/ghc/wiki/TestingPatches#Locally"><span class="ascii">validate</span>が正常終了することを確認しておく</a> <span class="ascii">(master</span>自体が<span class="ascii">fail</span>していることがあるため。<span class="ascii">)</span></li>
<li>作業用のブランチを作り、コードを修正する
<ul>
<li>修正が１つの<span class="ascii">commit</span>にまとまっていると、後の<span class="ascii">arc</span>コマンドでのパッチ送付がラクです。“<span class="ascii">git merge</span> –<span class="ascii">squash</span>”でまとめられます。</li>
</ul></li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Building/RunningTests/Adding">テストケースを追加する</a> <a href="https://phabricator.haskell.org/D4235#change-AHneoV84zpis"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>必要に応じて<a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/UserManual">ユーザーガイド</a>に変更機能についての説明を追加する <a href="https://phabricator.haskell.org/D4235#change-0p_6dVtsoCP3"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li>修正コードにて<span class="ascii">build</span>できることを確認しておく<span class="ascii">(</span>必ず行う<span class="ascii">)</span></li>
<li>修正コードにて<span class="ascii">validate</span>が正常終了することを確認しておく<span class="ascii">(</span>必ず行う<span class="ascii">)</span></li>
</ul></li>
<li>パッチの送付
<ul>
<li><span class="ascii">Phabricator</span>用のコマンドラインツール<a href="https://ghc.haskell.org/trac/ghc/wiki/Phabricator#TheCLI:Arcanist"><span class="ascii">Arcanist</span>をインストールする</a> <span class="ascii">(</span><a href="https://secure.phabricator.com/book/phabricator/article/arcanist/"><span class="ascii">arcanist</span>ツールの説明</a><span class="ascii">)</span></li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Phabricator#Startingoff:Fixingabugsubmittingareview"><span class="ascii">Phabricator</span>にパッチを送付する</a> <a href="https://phabricator.haskell.org/D4235"><span class="ascii">(</span>例<span class="ascii">)</span></a>
<ul>
<li>具体的なコマンドは“<span class="ascii">arc diff HEAD~</span>”。 最後の<span class="ascii">commit</span>が送信される。</li>
</ul></li>
<li><span class="ascii">Trac</span>の<span class="ascii">ticket</span>の、“<span class="ascii">Differential Rev</span>”の箇所に<span class="ascii">Phab</span>の管理番号を書いておく <a href="https://ghc.haskell.org/trac/ghc/ticket/14473"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
<li><span class="ascii">Phabricator</span>上で、コードレビューしてもらう（待つ、議論する）</li>
<li>必要に応じてコードを修正する
<ul>
<li>コード修正後に、修正パッチを送り直すコマンドは“<span class="ascii">arc diff</span>”。</li>
<li>レビュー待ちの間に、<span class="ascii">master</span>と<span class="ascii">conflict</span>を起こした場合は、パッチを送り直すと親切。</li>
<li>レビュー待ちの間に、<span class="ascii">master</span>との差分が大きくなった場合は、“<span class="ascii">git rebase</span>”してから送り直すのも親切。<span class="ascii">rebase</span>については<a href="https://ghc.haskell.org/trac/ghc/wiki/Phabricator#Workingwithmultipledependentdiffs">ここを参照</a></li>
</ul></li>
<li>レビューが完了して<span class="ascii">master</span>ブランチに取り込まれたら、<span class="ascii">proposals</span>の“<span class="ascii">implemented</span>”のフィールドに、実装済みの<span class="ascii">GHC</span>のバージョン番号を記載しておく <a href="https://github.com/ghc-proposals/ghc-proposals/commit/1974c2a45a782461084ea596ec839638d4ff0743#diff-ffb9f607b8f1e69494a276ae9afa8268"><span class="ascii">(</span>例<span class="ascii">)</span></a></li>
</ul></li>
</ul>
<h3 id="パッチ送付の例">パッチ送付の例</h3>
<p>数値リテラルの構文を変更する場合の、具体的なパッチ送付の例を紹介します。</p>
<ul>
<li><a href="https://phabricator.haskell.org/D4235"><span class="ascii">https://phabricator.haskell.org/D4235</span></a></li>
</ul>
<p>その他のレビュー中パッチの例は以下にたくさんあります。</p>
<ul>
<li><a href="https://phabricator.haskell.org/differential/"><span class="ascii">https://phabricator.haskell.org/differential/</span></a></li>
</ul>
<h3 id="いくつかのポイントなど-1">いくつかのポイントなど</h3>
<ul>
<li>他の良いパッチが参考になります<span class="ascii">(</span>同じ種類の修正を探すと、修正方法や慣習や修正漏れなどを確認できます。<span class="ascii">)</span></li>
<li><span class="ascii">build</span>確認と<span class="ascii">validation</span>確認は絶対に行う<span class="ascii">(</span>つたないコードは問題視されませんが、本来行うべき手順を行わないことは、開発全体にダメージを与えるとともに、個人の信用度に影響します。<span class="ascii">)</span></li>
<li>数カ月単位で気長に根気よくやる<span class="ascii">(</span>パッチ作業は多数並走しており、<span class="ascii">GHC</span>のリリース時期は特に多忙です。全員がボランティアで行っている自発的な活動ですので、忘れられている状況への<span class="ascii">ping</span>は構いませんが、強い催促は控えるのが賢明です。<span class="ascii">)</span></li>
<li>わからない点は、<span class="ascii">ghc-devs ML</span>や<span class="ascii">Phabricator</span>上で相談するとよいでしょう。</li>
<li><span class="ascii">Phabricator(arc</span>コマンド<span class="ascii">)</span>には慣れが必要かと思います。最初は影響範囲の少ない、ドキュメント修正などで<span class="ascii">Phabricator</span>の作業手順に慣れていくのも良いです。</li>
</ul>
<p>パッチ送付は、<span class="ascii">Phabricator</span>や<span class="ascii">git</span>の機能を用いて行うものです。操作ミスがあったところで、<span class="ascii">GHC</span>のリポジトリ本体に直ちに反映されるわけではありません。やり直しは何度でも行えます。失敗やミスを不必要に怖れる必要はありません。<span class="ascii">community</span>のためになる<span class="ascii">contribution</span>は常に歓迎されています。</p>
<p>それでは、パッチ送付プロセスをお楽しみ！</p>
<hr />
<h2 id="補足">補足</h2>
<p>わからないことがあれば、<a href="https://mail.haskell.org/cgi-bin/mailman/listinfo/ghc-devs"><span class="ascii">ghc-devs</span>の<span class="ascii">ML</span></a>に問い合わせると親切に教えてもらえます。 もちろん、<a href="https://join-haskell-jp-slack.herokuapp.com/"><span class="ascii">Haskell-jp</span>の<span class="ascii">slack</span></a>の<span class="ascii">#questions</span>チャネルなどで尋ねるのも良いでしょう。</p>
<p>なお、<span class="ascii">GHC</span>での開発作業については、<a href="https://ghc.haskell.org/trac/ghc/wiki/WorkingConventions"><span class="ascii">Working on GHC</span></a>も参考にどうぞ。<br />
また、<span class="ascii">GHC</span>の開発フロー全体については、<a href="https://takenobu-hs.github.io/downloads/ghc_development_flow.pdf">こちら</a>も参考にどうぞ。<span class="ascii">GHC</span>関連のサイトの情報を力づくで検索するには、<a href="https://takenobu-hs.github.io/haskell-wiki-search/">こちら</a>もどうぞ。</p>
<p><span class="ascii">Happy Hacking!</span></p>
<p>以上です。</p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2018/topic-request.html">Haskell-jp Blogで書いてほしいネタを募集します！</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2018/unordered-containers-hash-dos.html" style="margin-left: auto;">hashdos脆弱性とunordered-containers</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>hashdos脆弱性とunordered-containers</title>
    <link href="https://haskell.jp/blog/posts/2018/unordered-containers-hash-dos.html" />
    <id>https://haskell.jp/blog/posts/2018/unordered-containers-hash-dos.html</id>
    <published>2018-01-21T00:00:00Z</published>
    <updated>2018-01-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>あらゆるソフトウェアに脆弱性は存在し得ます。<br />
<span class="ascii">Haskell</span>は高度な型システムを駆使することで、脆弱性を根本的に回避したプログラムを作ることを可能にします<small>（脆弱性を防ぐためだけのものではないですが、興味のある人は<a href="http://www.kotha.net/ghcguide_ja/7.6.2/safe-haskell.html"><span class="ascii">Safe Haskell</span></a>についても調べてみるといいでしょう）</small>。<br />
しかし、だからといって、型を設計する段階で脆弱性を回避できるよう気をつけなければいけないことには変わりませんし、<span class="ascii">GHC</span>が生成した実行ファイル、使用するライブラリーに絶対に脆弱性がないとは言えません。<br />
現状、<span class="ascii">Haskell</span>はほかの著名なプログラミング言語ほど使用されていないためか、あまり脆弱性が報告されることはありません<small>（<span class="ascii">libc</span>など、ほかの言語の処理系も依存しているようなライブラリーの脆弱性は別として）</small>。<br />
今回は、そんな中でも<a href="https://hackage.haskell.org/package/unordered-containers"><span class="ascii">unordered-containers</span>というパッケージ</a>について、<a href="https://github.com/tibbe/unordered-containers/blob/60ced060304840ed0bf368249ed6eb4e43d4cefc/docs/developer-guide.md#security">ドキュメントにも書かれている</a>ため<strong>おそらく直ることがないであろう脆弱性</strong>と、その回避方法について紹介します。<br />
<span class="ascii">hashdos</span>脆弱性自体は結構有名ですし、ドキュメントに書いてあることなので、ご存知の方には何を今更感があるかと思いますが、検索した限りこの問題について日本語で説明した記事は見当たらなかったので、ここで紹介します。</p>
<h1 id="そもそもunordered-containersって">そもそも<span class="ascii">unordered-containers</span>って？</h1>
<p>脆弱性の前に<span class="ascii">unordered-containers</span>パッケージについて簡単に紹介しましょう。<br />
<a href="https://hackage.haskell.org/package/unordered-containers"><span class="ascii">unordered-containers</span>パッケージ</a>は、<span class="ascii">GHC</span>に標準で付いている<a href="https://hackage.haskell.org/package/containers"><span class="ascii">containers</span>パッケージ</a>よりも高速な連想配列（<a href="https://hackage.haskell.org/package/unordered-containers-0.2.8.0/docs/Data-HashMap-Lazy.html"><code>HashMap</code>型</a>）や集合（<a href="https://hackage.haskell.org/package/unordered-containers-0.2.8.0/docs/Data-HashSet.html"><code>HashSet</code>型</a>）を提供してくれます。<br />
<a href="https://www.stackage.org/lts-10.3/package/unordered-containers-0.2.8.0"><span class="ascii">Stackage</span>の<span class="ascii">LTS Haskell 10.3</span>ではなんと<span class="ascii">970</span>ものパッケージに依存されている</a>、超大人気汎用パッケージです。</p>
<h2 id="どうやって高速化しているの">どうやって高速化しているの？</h2>
<p><code>HashMap</code>という名前が示しているとおり、キーとなる値のハッシュ値を計算・利用することで高速化しています。<br />
しかし、<span class="ascii">Java</span>言語などほかの言語によくある<code>HashMap</code>とは大きく異なり、内部ではハッシュテーブルを使用していません。<br />
<a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20091104/340002/?rt=nocnt">本物のプログラマは<span class="ascii">Haskell</span>を使う <span class="ascii">-</span> 第<span class="ascii">35</span>回　キーを使って値を参照する<span class="ascii">Map</span>型：<span class="ascii">ITpro</span></a>でも説明しているとおり、ハッシュテーブルはミュータブルな配列を内部で使用していることから、イミュータブルなデータ構造を使用して行う関数型プログラミングとは、相性が悪いのです<small>（<code>ST</code>モナドや<code>IO</code>モナドを利用した<a href="https://hackage.haskell.org/package/hashtables"><span class="ascii">hashtables</span>パッケージ</a>などを使えば、限られた範囲内でハッシュテーブルを使うこともできます）</small>。</p>
<p>ハッシュテーブルを使用しない代わりに、<span class="ascii">unordered-containers</span>では内部で<a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie"><span class="ascii">Hash array mapped trie</span></a>という特殊な木を使っています。<br />
どのような構造かは、<a href="http://keens.github.io/slide/HAMT/"><span class="ascii">HAMT ~</span> イミュータブルで高速なハッシュマップ <span class="ascii">~ |</span> κ<span class="ascii">een</span>の<span class="ascii">Happy Hac</span>κ<span class="ascii">ing Blog</span></a>に詳しく書かれています。<br />
こちらのスライドは<span class="ascii">Scala</span>での実装の話ですが、基本的には<span class="ascii">unordered-containers</span>パッケージの<code>HashMap</code>も同じはずです。</p>
<p>大雑把に言うと、<span class="ascii">Hash array mapped trie</span>を使った<code>HashMap</code>では、ハッシュテーブルと同様に、キーとなる値を<strong>ハッシュ関数で一旦固定長の整数に変換する</strong>ことで、キーが存在しているかどうかの確認を高速化しています。そのため、<span class="ascii">containers</span>パッケージよりも高速な処理ができるのです。<br />
<span class="ascii">containers</span>パッケージの<code>Map</code>ではキーの存在を確認する際、キー全体を既存のキーと比較する必要があるため、特に長い文字列をキーとする場合は、処理が遅くなりがちだったのです。</p>
<h1 id="hashdos脆弱性とは"><span class="ascii">hashdos</span>脆弱性とは？</h1>
<p><span class="ascii">hashdos</span>脆弱性は<a href="https://blog.tokumaru.org/2011/12/webdoshashdos.html"><span class="ascii">2011</span>年頃<span class="ascii">Ruby</span>や<span class="ascii">PHP</span>、<span class="ascii">Perl</span>など多くのプログラミング言語が影響を受けるとされた</a>、著名な脆弱性です。<br />
ここでも簡単に仕組みを説明しましょう。</p>
<p>前節で説明したとおり、<span class="ascii">Hash array mapped trie</span>もハッシュテーブルも、必ずキーを一旦固定長の整数に変換します。<br />
文字列など、ハッシュ関数を適用されるキーとなる値は、当然固定長の整数よりも幅広い値を取り得るので、違う文字列同士でも、同じハッシュ値をとることがあります。<br />
この、違う値であるはずのキーが同じハッシュ値をとってしまった状態を「ハッシュ値の衝突」と呼びます。<br />
ハッシュ値の衝突が発生した場合、ハッシュテーブルや<span class="ascii">Hash array mapped trie</span>といったハッシュ値を利用した連想配列は、（単純な）配列やリストなど、やむを得ず逐次探索が必要なデータ構造を内部で使用しなければならなくなります。</p>
<p><span class="ascii">hashdos</span>脆弱性はこの性質を利用した<span class="ascii">DoS</span>攻撃です。<br />
攻撃者は、あらかじめ対象のプログラムで使っているハッシュ関数が、「必ず同じハッシュ値」を返すキー<span class="ascii">(</span>大抵文字列でしょう）を大量に用意して、それを対象のプログラムに入力として与えることで、簡単に<span class="ascii">DoS</span>攻撃を仕掛けることができるのです。<br />
<a href="https://blog.tokumaru.org/2011/12/webdoshashdos.html">先ほど触れた徳丸先生の記事</a>では、<span class="ascii">PHP</span>のアプリケーションに対してわずか<span class="ascii">500KB</span>の<span class="ascii">form-data</span>を送るだけで<span class="ascii">CPU</span>時間を<span class="ascii">1</span>分も消費させることができたそうですから、その威力はすさまじいものと言えるでしょう。</p>
<h1 id="なぜ直さないのか">なぜ直さないのか？</h1>
<p><a href="https://github.com/tibbe/unordered-containers/blob/60ced060304840ed0bf368249ed6eb4e43d4cefc/docs/developer-guide.md#security"><span class="ascii">unordered-containers</span>の<span class="ascii">Developer Guide</span></a>には、次のように書かれています。</p>
<blockquote>
<p><span class="ascii">There</span>’<span class="ascii">s an uncomfortable trade-off with regards to security threats posed by e.g. denial of service attacks. Always using more secure hash function, like SipHash, would provide security by default. However, those functions would make the performance of the data structures no better than that of ordered containers, which defeats the purpose of this package.</span></p>
</blockquote>
<p>要するに、「セキュリティー上問題はあるけど、<span class="ascii">SipHash</span>のような安全なハッシュ関数を使ったら<span class="ascii">containers</span>パッケージよりも速度が出なかった。それではこのパッケージの意味がない」ということです。<br />
<span class="ascii">containers</span>パッケージよりも高速な連想配列を作るために<span class="ascii">unordered-containers</span>パッケージを作ったのだから、それより遅くなっては存在価値がなくなってしまうのです。<br />
従って、ユーザーが任意にキーを入力できるようなプログラムでは、<span class="ascii">unordered-containers</span>ではなく、<span class="ascii">containers</span>を使え、ということです。<br />
このことは<span class="ascii">unordered-containers</span>が使用している<a href="https://hackage.haskell.org/package/hashable-1.2.6.1/docs/Data-Hashable.html#g:1"><span class="ascii">hashable</span>のドキュメント</a>にも書かれています。ある意味ノーガード戦法ですね。</p>
<h1 id="回避方法">回避方法</h1>
<p>前節で触れたとおりですが、<strong>ユーザーが任意にキーを入力できるようなプログラム</strong>では、<span class="ascii">unordered-containers</span>パッケージの<code>HashMap</code>や<code>HashSet</code>ではなく、<span class="ascii">containers</span>パッケージの<code>Map</code>や<code>Set</code>を使いましょう。<br />
<span class="ascii">containers</span>パッケージにある<code>Map</code>や<code>Set</code>はハッシュ関数を一切使っていないので、ハッシュ値の衝突も起こらず、内部で逐次探索が必要なデータ構造を使ってもいません。<br />
なので<span class="ascii">hashdos</span>攻撃に遭うことはないのです。</p>
<p>ただし、実際のところ、<a href="https://www.stackage.org/lts-10.3/package/unordered-containers-0.2.8.0"><span class="ascii">Stackage</span>の<span class="ascii">LTS Haskell 10.3</span>で<span class="ascii">970</span>ものパッケージに依存されている</a><span class="ascii">unordered-containers</span>です。<br />
その中には<span class="ascii">JSON</span>のパーサーである<span class="ascii">aeson</span>も含まれているので、もしかしたら現状回避するのは非常に困難なのかもしれません。😱<br />
次回は、この問題について試しに攻撃用のコードを書いて速度の低下をチェックして報告する話を書くかもしれません…。😰</p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2018/ghc-proposal-and-patch.html">GHCへの変更提案とパッチ送付の手順例</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/advent-calendar-2017.html" style="margin-left: auto;">Haskell Advent Calendar 2017 まとめ</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>Haskell Advent Calendar 2017 まとめ</title>
    <link href="https://haskell.jp/blog/posts/2017/advent-calendar-2017.html" />
    <id>https://haskell.jp/blog/posts/2017/advent-calendar-2017.html</id>
    <published>2017-12-31T00:00:00Z</published>
    <updated>2017-12-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>これは <a href="https://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell Advent Calendar</span> その<span class="ascii">4</span></a> の<span class="ascii">12</span>日目の記事です。</p>
<p>なんで<span class="ascii">12</span>日目の記事で「まとめ」をやっているのかって？ <span class="ascii">25</span>日を過ぎてから余ってた日付に登録しただけですよ。</p>
<p><a href="https://qiita.com/advent-calendar/2017/calendars"><span class="ascii">Qiita</span></a>と<a href="https://adventar.org/calendars?year=2017"><span class="ascii">ADVENTAR</span></a>のアドベントカレンダーで投稿された、<span class="ascii">Haskell</span>に関する記事を集めてみました。 いちおう機械的に集めたので、それなりに拾えてると思いますが、もし「この記事が無いよ」とか、逆に「<span class="ascii">Haskell</span>ちゃうやんこの記事」ってのがあったら、<a href="https://github.com/haskell-jp/blog/edit/master/preprocessed-site/posts/2017/advent-calendar-2017.md">ここから編集して</a><span class="ascii">PR</span>でも送ってください。</p>
<p>ちなみに「<a href="https://scrapbox.io/miyamoen/Elm_Advent_Calendar_2017_%E3%81%BE%E3%81%A8%E3%82%81"><span class="ascii">Elm Advent Calendar 2017</span> まとめ</a>」という記事が面白かったので、その<span class="ascii">Haskell</span>版オマージュ<span class="ascii">(</span>パクリ<span class="ascii">)</span>です。</p>
<h2 id="haskell-advent-calendar"><span class="ascii">Haskell Advent Calendar</span></h2>
<p><span class="ascii">Qiita</span>の方では<span class="ascii">4</span>つもできましたね。</p>
<ul>
<li><a href="https://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a></li>
<li><a href="https://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a></li>
<li><a href="https://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a></li>
<li><a href="https://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a></li>
</ul>
<p>まぁしかし、残念ながらどのカレンダーも埋まってないため<a href="https://qiita.com/advent-calendar/2017/ranking/subscriptions">ランキング</a>圏外となってしまいましたが<span class="ascii">(</span>笑<span class="ascii">)</span></p>
<p>加えて何故か、<span class="ascii">25</span>日が過ぎてからその<span class="ascii">5</span>のカレンダーができるという、なかなか面白い事案が発生しました。</p>
<ul>
<li><a href="https://qiita.com/advent-calendar/2017/haskell5"><span class="ascii">Haskell (</span>その<span class="ascii">5) Advent Calendar 2017 - Qiita</span></a></li>
</ul>
<p>上記のカレンダーの記事以外も含めて、全部で<span class="ascii">104</span>記事もありました。 みんなすごいですね。</p>
<h2 id="記事を集めた">記事を集めた</h2>
<p>超雑にスクレイパーを書いて<span class="ascii">Qiita</span>と<span class="ascii">ADVENTAR</span>のカレンダーをスクレイピングしてきました。 プログラムは以下のリポジトリにあります<span class="ascii">(</span>もちろん<span class="ascii">Haskell</span>で作ったよ<span class="ascii">)</span>。</p>
<ul>
<li><a href="https://github.com/matsubara0507/haskell-advent-calendar"><span class="ascii">matsubara0507/advent-calendar - GitHub</span></a></li>
</ul>
<p>カレンダーのタイトルか、記事のタイトルに「<span class="ascii">Haskell</span>」って単語が入っているやつだけ集めてます。 このプログラムの解説っぽい記事はそのうち自分のとこの記事として挙げる気がする<span class="ascii">(</span>たぶん<span class="ascii">)</span>。</p>
<h2 id="記事たち">記事たち</h2>
<p>分類は温もりのある手作業でやってます。 自然言語処理系が出来れば機械的に分類できたかもしれませんが…</p>
<p>分類違くね？というモノがあれば、<a href="https://github.com/haskell-jp/blog/edit/master/preprocessed-site/posts/2017/advent-calendar-2017.md">ここから編集して</a><span class="ascii">PR</span>でも送ってください。</p>
<p>それでは良いお年を。</p>
<h3 id="ポエム">ポエム</h3>
<p><strong><a href="http://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B">なぜ <span class="ascii">Haskell</span> が好きなのか <span class="ascii">-</span> 趣味はデバッグ……</a></strong><br />
<span class="ascii">by kakkun61 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/06</span></p>
<p><strong><a href="https://qiita.com/Mizunashi_Mana/items/e82214dfae2765c6839a"><span class="ascii">Haskell</span>副作用ポエム <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by Mizunashi_Mana on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/21</span></p>
<p><strong><a href="https://qiita.com/ababup1192/items/b15cdace30b7fef3338c"><span class="ascii">Haskell</span>を勉強して感動したこと・難しいと思ってること <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ababup1192 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/04</span></p>
<h3 id="入門してみた">入門してみた</h3>
<p><strong><a href="https://gist.github.com/sys9kdr/2484ed09f5cb7ea86beae8f5222d9a3c"><span class="ascii">Haskell</span>入門しようとして環境構築で失敗。 <span class="ascii">· GitHub</span></a></strong><br />
<span class="ascii">by sys9kdr on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/05</span></p>
<p><strong><a href="https://qiita.com/lagenorhynque/items/f8b14ff70a26cfd27976"><span class="ascii">Clojurian</span>が<span class="ascii">Haskell</span>で<span class="ascii">Web API</span>開発に入門してみた <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by lagenorhynque on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/19</span></p>
<p><strong><a href="https://qiita.com/hitsujisanmeme/items/e14972cfd349c1149d58">美術の人が考える <span class="ascii">Haskell - Qiita</span></a></strong><br />
<span class="ascii">by hitsujisanmeme on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/14</span></p>
<p><strong><a href="https://qiita.com/brackss1/items/9f9466f160391dc53bba"><span class="ascii">Haskell</span>入門者がライブラリを触っちゃう<span class="ascii">!? - Qiita</span></a></strong><br />
<span class="ascii">by brackss1 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/22</span></p>
<p><strong><a href="https://qiita.com/ryosukue/items/cf14d817a7067dfd2094"><span class="ascii">Ubuntu</span>、<span class="ascii">Haskell</span>で<span class="ascii">web</span>アプリ手始め <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ryosukue on</span> <a href="http://qiita.com/advent-calendar/2017/nuco"><span class="ascii">Nuco Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/23</span></p>
<p><strong><a href="https://qiita.com/3nan/items/b89b7383ddb2bac5dda1"><span class="ascii">Haskell</span>をちょこっと紹介（フィボナッチ数列を書いてみる） <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by 3nan on</span> <a href="http://qiita.com/advent-calendar/2017/tecotec"><span class="ascii">TECOTEC Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/23</span></p>
<h3 id="ノウハウ">ノウハウ</h3>
<p><strong><a href="https://www.ncaq.net/2017/12/02/00/00/00/">私の<span class="ascii">Haskell</span>コーディングスタイルガイド<span class="ascii">,</span>改行出来るポイントを紹介 <span class="ascii">- ncaq</span></a></strong><br />
<span class="ascii">by ncaq on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/02</span></p>
<p><strong><a href="https://www.ncaq.net/2017/12/03/00/00/00/">ゲーム販売<span class="ascii">web</span>アプリケーション<span class="ascii">SYAKERAKE</span>を支える技術<span class="ascii">,Haskell</span>と<span class="ascii">Yesod</span>で作られています <span class="ascii">- ncaq</span></a></strong><br />
<span class="ascii">by ncaq on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/03</span></p>
<p><strong><a href="https://www.ncaq.net/2017/12/04/00/00/00/"><span class="ascii">Stackage Server</span>のちょっとした便利な使い方<span class="ascii">,Hoogle</span>をブラウザのカスタム検索エンジンに追加しましょう<span class="ascii">,</span>よく使うパッケージをブックマークする時は<span class="ascii">PackageR</span>の<span class="ascii">URL</span>にしましょう <span class="ascii">- ncaq</span></a></strong><br />
<span class="ascii">by ncaq on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/04</span></p>
<p><strong><a href="http://d.hatena.ne.jp/kazu-yamamoto/20171212/1513050147"><span class="ascii">go</span>な関数</a></strong><br />
<span class="ascii">by kazu_yamamoto on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/01</span></p>
<p><strong><a href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"><span class="ascii">Haskell</span>の<span class="ascii">ABC(Haskell Advent Calendar 6th) -</span> モナドとわたしとコモナド</a></strong><br />
<span class="ascii">by fumieval on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/06</span></p>
<p><strong><a href="https://haskell.jp/blog/posts/2017/windows-gotchas.html"><span class="ascii">Windows</span>で<span class="ascii">Haskell</span>を扱う時によく遭遇するエラーと対処法 <span class="ascii">- Haskell-jp</span></a></strong><br />
<span class="ascii">by igrep on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/14</span></p>
<h3 id="解説">解説</h3>
<p><strong><a href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"><span class="ascii">A Tour of Go in Haskell</span>を作ったのと、<span class="ascii">Go</span>と<span class="ascii">Haskell</span>の比較 <span class="ascii">- syocy</span>’<span class="ascii">s diary</span></a></strong><br />
<span class="ascii">by syocy on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/03</span></p>
<p><strong><a href="https://qiita.com/cyclone_t/items/8443ed5d4a77f87b1f1b"><span class="ascii">Servant</span>のハンドラに<span class="ascii">ReaderT</span>を適用する <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by cyclone_t on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/15</span></p>
<p><strong><a href="https://qiita.com/wgag/items/11a6e667011d530832e8">スーパーモナドについて <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by wgag on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/10</span></p>
<p><strong><a href="https://tech.recruit-mp.co.jp/dev-tools/post-13981/"><span class="ascii">CircleCI2.0</span>で<span class="ascii">Haskell</span>のテストを実行する – <span class="ascii">PSYENCE:MEDIA</span></a></strong><br />
<span class="ascii">by yukiasai on</span> <a href="http://adventar.org/calendars/2360"><span class="ascii">RECRUIT MARKETING PARTNERS Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/13</span></p>
<p><strong><a href="https://qiita.com/yukiasai/items/248294a871d40c0dcef6"><span class="ascii">Dokku</span>環境を構築して<span class="ascii">Haskell</span>のアプリケーションをデプロイする <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by yukiasai on</span> <a href="http://adventar.org/calendars/2324"><span class="ascii">Recruit Engineers Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/07</span></p>
<h3 id="周辺ツールについて">周辺ツールについて</h3>
<p><strong><a href="https://qiita.com/usamik26/items/672ed3c4451402bfc275"><span class="ascii">Haskell Stack</span> とは何をするツールなのか <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by usamik26 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/12</span></p>
<p><strong><a href="https://haskell.e-bigmoon.com/posts/2017-12-20-stack-ls-command.html"><span class="ascii">stack ls</span> コマンドが追加されます</a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/08</span></p>
<p><strong><a href="https://haskell.e-bigmoon.com/posts/2017-12-24-stack163.html"><span class="ascii">stack v1.6.3</span> がリリースされました。</a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/09</span></p>
<p><strong><a href="https://qiita.com/ogata-k/items/23d70250ec42359b6bb5"><span class="ascii">Haskell</span>や周辺ツールについてのリンク集 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ogata-k on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/15</span></p>
<p><strong><a href="https://qiita.com/ogata-k/items/2b21326b2b7351bfc28c"><span class="ascii">Haskell</span>の<span class="ascii">stack</span>によるプロジェクトについて <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ogata-k on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/16</span></p>
<p><strong><a href="https://haskell.e-bigmoon.com/posts/2017-12-27-haddock-grid-table.html"><span class="ascii">haddock</span> に <span class="ascii">Grid Table</span> 記法が追加されました</a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell5"><span class="ascii">Haskell (</span>その<span class="ascii">5) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/02</span></p>
<p><strong><a href="https://haskell.e-bigmoon.com/posts/2017-12-23-stack161.html">カスタムスナップショットの紹介</a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/14</span></p>
<p><strong><a href="https://myuon.github.io/posts/haskell-project-setup/"><span class="ascii">Haskell</span>プロジェクトを始めるにあたって <span class="ascii">- The curse of</span> λ</a></strong><br />
<span class="ascii">by myuon_myon on</span> <a href="http://qiita.com/advent-calendar/2017/myuon_myon_cs">一人<span class="ascii">Computer Science Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/15</span></p>
<h3 id="ライブラリ紹介">ライブラリ紹介</h3>
<p><strong><a href="https://qiita.com/jabaraster/items/e8ebbe6d25b535947aba"><span class="ascii">servant+persistent</span>を利用する <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by jabaraster on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/07</span></p>
<p><strong><a href="https://qiita.com/makoraru/items/596729de09d6aeb81e5a"><span class="ascii">Yampa</span>で<span class="ascii">Functional Reactive</span>な認知行動療法ボット <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by makoraru on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/13</span></p>
<p><strong><a href="https://nnwww.github.io/blog/post/haskell_ml/"><span class="ascii">Haskell</span>で機械学習を実装しようと思った過去の自分へ</a></strong><br />
<span class="ascii">by _Nnwww on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/23</span></p>
<p><strong><a href="https://qiita.com/cyclone_t/items/52ad44cfbb4603e123f3"><span class="ascii">Haskell</span>・<span class="ascii">Servant+Persistent/Esqueleto</span>で作る実用<span class="ascii">WebAPI (1) Servant</span>の基本 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by cyclone_t on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/11</span></p>
<p><strong><a href="https://matsubara0507.github.io/posts/2017-12-09-extensible-effects-step-by-step.html"><span class="ascii">Extensible Effects</span> ステップ・バイ・ステップ</a></strong><br />
<span class="ascii">by matsubara0507 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/09</span></p>
<p><strong><a href="https://qiita.com/Mizunashi_Mana/items/115855bf2af9b9970198"><span class="ascii">Haskell</span>のパーサライブラリまとめ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by Mizunashi_Mana on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/11</span></p>
<p><strong><a href="https://www.zaneli.com/blog/20171213"><span class="ascii">Haskell</span>入門者<span class="ascii">LT</span>会で自作ライブラリ<span class="ascii">network-voicetext</span>の話をしてきた <span class="ascii">|</span> ザネリは列車を見送った</a></strong><br />
<span class="ascii">by zaneli@github on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/13</span></p>
<p><strong><a href="https://qiita.com/satosystems/items/32bf104a041c8cc13809"><span class="ascii">Haskell</span> と <span class="ascii">SQLite - Qiita</span></a></strong><br />
<span class="ascii">by satosystems on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/16</span></p>
<p><strong><a href="https://qiita.com/masahiro_sakai/items/6a989d5b898a08f17821">部分構造の共有を観測する<span class="ascii">data-reify - Qiita</span></a></strong><br />
<span class="ascii">by masahiro_sakai on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/21</span></p>
<h3 id="作ってみた">作ってみた</h3>
<p><strong><a href="https://matsubara0507.github.io/posts/2017-12-13-elm-and-haskell-for-elmer.html"><span class="ascii">Elm</span> と <span class="ascii">Haskell</span> で作る <span class="ascii">ToDo</span> アプリ</a></strong><br />
<span class="ascii">by matsubara0507 on</span> <a href="http://qiita.com/advent-calendar/2017/elm"><span class="ascii">Elm Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/13</span></p>
<p><strong><a href="http://abc10946.hatenablog.com/entry/2017/12/18/014203"><span class="ascii">Haskell</span>に入門して<span class="ascii">1</span>年位経ったのでライフゲームを作ってみた話 <span class="ascii">- abc10946</span>の日記</a></strong><br />
<span class="ascii">by ABC10946 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/18</span></p>
<p><strong><a href="http://d.hatena.ne.jp/wvogel00/20171222/1513924995">仕事で<span class="ascii">Haskell</span>を使いたいなら外堀から</a></strong><br />
<span class="ascii">by hxf_vogel on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/22</span></p>
<p><strong><a href="http://blog.nakaji.me/slack-api-bloodhound-servant/"><span class="ascii">slack-api + bloodhound + servant</span> で<span class="ascii">bot+</span>αを作る</a></strong><br />
<span class="ascii">by nakaji-dayo on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/07</span></p>
<p><strong><a href="http://secret-garden.hatenablog.com/entry/2017/12/16/000000">【<span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017</span>】<span class="ascii">Vim</span> から <span class="ascii">Hoogle</span> の検索が出来るプラグインをつくった【<span class="ascii">16</span>日目】 <span class="ascii">- Secret Garden(Instrumental)</span></a></strong><br />
<span class="ascii">by pink_bangbi on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/16</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/807866bdaa81c3057ac0">お天気<span class="ascii">Bot</span> で理解する <span class="ascii">Haskell</span> の便利パッケージ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/25</span></p>
<p><strong><a href="https://qiita.com/arowM/items/e59442120ad3c1071c57"><span class="ascii">Haskell ochintin-daicho</span> で年末調整プログラミング <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by arowM on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/12</span></p>
<p><strong><a href="https://qiita.com/lotz/items/1aa6cf18aa193f40c647">作って学ぶ<span class="ascii">Bitcoin</span>！ゼロから作る<span class="ascii">SPV</span>ウォレット <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by lotz on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/18</span></p>
<p><strong><a href="http://tune.hateblo.jp/entry/2017/12/27/031803">優秀な秘書を雇いました<span class="ascii">!!! - Creatable a =&gt; a -&gt; IO b</span></a></strong><br />
<span class="ascii">by tokiwoousaka@github on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/20</span></p>
<p><strong><a href="https://qiita.com/satosystems/items/c1c0feef87345a9df69d"><span class="ascii">Haskell</span> における遅延ファイル読み込みとリソースリーク <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by satosystems on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/23</span></p>
<p><strong><a href="https://haskell.jp/blog/posts/2017/typesafe-precure2.html">タイプセーフプリキュア！を支える技術 その<span class="ascii">2 - Haskell-jp</span></a></strong><br />
<span class="ascii">by igrep on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/24</span></p>
<p><strong><a href="https://www.ncaq.net/2017/12/19/00/00/00/"><span class="ascii">Haskell</span>による<span class="ascii">web</span>スクレイピングの方法を<span class="ascii">dic-nico-intersection-pixiv</span>を例に書く <span class="ascii">- ncaq</span></a></strong><br />
<span class="ascii">by</span> エヌユル <span class="ascii">on</span> <a href="http://adventar.org/calendars/2105"><span class="ascii">Web</span>スクレイピング <span class="ascii">Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/19</span></p>
<p><strong><a href="https://matsubara0507.github.io/posts/2017-12-02-re-adventar-slack-bot-part1.html"><span class="ascii">Re:</span> ゼロから作る <span class="ascii">ADVENTAR</span> の <span class="ascii">Slack Bot (Haskell</span> 編<span class="ascii">)</span></a></strong><br />
<span class="ascii">by</span> ひげ <span class="ascii">on</span> <a href="http://adventar.org/calendars/2300">群馬大学電子計算機研究会 <span class="ascii">IGGG Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/02</span></p>
<h3 id="処理系">処理系</h3>
<p><strong><a href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"><span class="ascii">GHC</span>の中間言語<span class="ascii">Core</span>への脱糖を覗き見る <span class="ascii">- Hash</span> λ <span class="ascii">Bye</span></a></strong><br />
<span class="ascii">by ilyaletre on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/11</span></p>
<p><strong><a href="http://fujiy.hatenablog.com/entry/type-inference-1"><span class="ascii">Haskell</span>の型システムを書く<span class="ascii">(1) -</span> 純粋技術メモ</a></strong><br />
<span class="ascii">by fujiy on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/03</span></p>
<p><strong><a href="https://qiita.com/takoeight0821/items/9a1c3eb5b0f292026596"><span class="ascii">GHC</span>での中置演算子のパース <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by takoeight0821 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/06</span></p>
<p><strong><a href="https://uhideyuki.sakura.ne.jp/studs/index.cgi/ja/HindleyMilnerInHaskell">型システムを学ぼう！</a></strong><br />
<span class="ascii">by unnohideyuki on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/15</span></p>
<h3 id="言語機能">言語機能</h3>
<p><strong><a href="https://matsubara0507.github.io/posts/2017-12-12-backpack-memo.html"><span class="ascii">Haskell Backpack</span> 覚え書き</a></strong><br />
<span class="ascii">by matsubara0507 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/12</span></p>
<p><strong><a href="https://qiita.com/aiya000/items/b802531c58c161cd245f">にこ、希と一緒に学ぶ<span class="ascii">Haskell</span>（番外）「あまり知られていない<span class="ascii">GHC</span>拡張の紹介」 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by aiya000 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/21</span></p>
<p><strong><a href="https://qiita.com/ruicc/items/e2879c44eba77b1e7170"><span class="ascii">Levity polymorphism</span>について軽く <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ruicc on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/02</span></p>
<p><strong><a href="https://qiita.com/ryoppy/items/7156d587da2e6ae7e605"><span class="ascii">Kind</span>について <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ryoppy on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/11</span></p>
<p><strong><a href="http://khibino.hatenadiary.jp/entry/2017/12/18/081814"><span class="ascii">OverloadedLabels</span> と <span class="ascii">Haskell Relational Record - khibino blog</span></a></strong><br />
<span class="ascii">by khibino on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/18</span></p>
<p><strong><a href="https://qiita.com/thimura/items/0d289c231f9aceac61dc"><span class="ascii">GHC 8.2</span> 以前で <span class="ascii">FFI</span> を使う際に注意すること <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by thimura on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/19</span></p>
<h3 id="型">型</h3>
<p><strong><a href="https://qiita.com/junjihashimoto@github/items/31f245f5e0138e5fac7e">依存型の紹介と応用としての<span class="ascii">Clash</span>の紹介 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by junjihashimoto@github on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/19</span></p>
<p><strong><a href="https://qiita.com/aiya000/items/81e8424c8a3ee23586a6">ことり、穂乃果と一緒に学ぶ<span class="ascii">Haskell</span>（入門）その<span class="ascii">6</span>「高階データ型」 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by aiya000 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/24</span></p>
<p><strong><a href="https://qiita.com/mod_poppo/items/50ad2c0ee66171cc1ee9">型を実行時に作る：怖くないリフレクション <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by mod_poppo on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/19</span></p>
<p><strong><a href="https://qiita.com/HirotoShioi/items/5474119ba3682448c109"><span class="ascii">Haskell</span>における型クラス制約の役割 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by HirotoShioi on</span> <a href="http://qiita.com/advent-calendar/2017/haskell5"><span class="ascii">Haskell (</span>その<span class="ascii">5) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/04</span></p>
<h3 id="base"><span class="ascii">Base</span></h3>
<p><strong><a href="https://www.ncaq.net/2017/12/01/00/00/01/"><span class="ascii">Haskell</span>の<span class="ascii">State</span>の必要性が<span class="ascii">,</span>プログラミング言語の処理系を書いた時にわかったので<span class="ascii">,State</span>の良さを語ります <span class="ascii">- ncaq</span></a></strong><br />
<span class="ascii">by ncaq on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/01</span></p>
<p><strong><a href="https://qiita.com/grainrigi/items/f45b586b4013ffc3814e"><span class="ascii">Haskell - $</span>の仕組みを覗いてみよう <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by grainrigi on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/08</span></p>
<p><strong><a href="https://blog.b123400.net/functor/"><span class="ascii">Mapping things</span></a></strong><br />
<span class="ascii">by b123400 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/10</span></p>
<p><strong><a href="https://qiita.com/elipmoc101/items/4590210c9946ee2fd4c5"><span class="ascii">Maybe</span>自作から学ぶ<span class="ascii">Haskell</span>！ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by elipmoc101 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/16</span></p>
<p><strong><a href="https://keiorogiken.wordpress.com/2017/12/24/list%E3%81%A7%E9%81%8A%E3%81%B6/"><span class="ascii">List</span>で遊ぶ <span class="ascii">|</span> 慶應義塾大学ロボット技術研究会</a></strong><br />
<span class="ascii">by mt_caret on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/20</span></p>
<p><strong><a href="https://qiita.com/Lugendre/items/6b4a8c8a9c85fcdcb292"><span class="ascii">Arrow</span>を理解する <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by Lugendre on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/08</span></p>
<h3 id="アルゴリズムとデータ構造">アルゴリズムとデータ構造</h3>
<p><strong><a href="https://qiita.com/ryohji/items/d8bdba1648978c308cdd">探索問題を <span class="ascii">Haskell</span> で解く <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by ryohji on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/09</span></p>
<p><strong><a href="https://qiita.com/v97ug/items/d6dd50a2b6b84a9e4d41">巡回セールスマン問題を遺伝的アルゴリズムとデータ構造を使って<span class="ascii">Haskell</span>で解く！ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by v97ug on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/15</span></p>
<p><strong><a href="https://qiita.com/as_capabl/items/39e55e7a035dea4dc93a">いつから<span class="ascii">Haskell</span>の<span class="ascii">5</span>行クイックソートが遅いと錯覚していた？ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by as_capabl on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/20</span></p>
<p><strong><a href="https://qiita.com/rst76/items/a7dd81b522a09d1b9986">キューの効率的な実装 または私は如何にして<span class="ascii">Haskell</span>を止めて<span class="ascii">F#</span>を愛するようになったか <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by rst76 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/21</span></p>
<p><strong><a href="http://autotaker.hatenablog.com/entry/2017/12/21/125153">永続リアルタイムキューの<span class="ascii">Haskell</span>実装と計算量解析 <span class="ascii">- autotaker</span>’<span class="ascii">s blog</span></a></strong><br />
<span class="ascii">by autotaker1984 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/22</span></p>
<p><strong><a href="https://qiita.com/Aruneko/items/dee20161358e7c39e27a"><span class="ascii">Zipper</span>に挑む <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by Aruneko on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/02</span></p>
<p><strong><a href="https://qiita.com/nobsun/items/27fe53516cbb90ba02e2"><span class="ascii">Tree:</span> 親子関係の付け替え <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by nobsun on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/07</span></p>
<p><strong><a href="http://zodi-g12.hatenablog.com/entry/2017/12/06/133951">コラッツの問題を<span class="ascii">Haskell</span>で書いてみた <span class="ascii">- Zodiac</span>の黙示録</a></strong><br />
<span class="ascii">by zodi_G12 on</span> <a href="http://adventar.org/calendars/2377"><span class="ascii">IQ</span>が<span class="ascii">1 Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/06</span></p>
<h3 id="数学科学">数学・科学</h3>
<p><strong><a href="https://qiita.com/tezca686/items/855236ccdda584ee8ebb"><span class="ascii">[Haskell]</span> とびだせ！<span class="ascii">Hask</span>圏 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by tezca686 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/14</span></p>
<p><strong><a href="https://qiita.com/makoraru/items/768089b2aab1dde47593">区間代数と無限小と無限大 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by makoraru on</span> <a href="http://qiita.com/advent-calendar/2017/haskell3"><span class="ascii">Haskell (</span>その<span class="ascii">3) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/17</span></p>
<p><strong><a href="https://qiita.com/as_capabl/items/2031fe28e577e77dc269">しりとりの圏の回答、または定理証明<span class="ascii">Haskell</span>を少しだけ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by as_capabl on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/04</span></p>
<p><strong><a href="https://qiita.com/hiratara/items/6265b5d4791144bee33b">しりとりの圏の実装<span class="ascii">(</span>未完<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by hiratara on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/05</span></p>
<p><strong><a href="https://qiita.com/kyamaz/items/67ec5c7d39e62c1de91d">量子コンピューターにはモナドがよく似合う <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by kyamaz on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/17</span></p>
<p><strong><a href="https://qiita.com/makoraru/items/ab891a60d4dfe4bbf649"><span class="ascii">Haskell</span>と層 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by makoraru on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/20</span></p>
<p><strong><a href="https://qiita.com/NaOHaq/items/ba490cc1e1ab890cb399"><span class="ascii">Haskell</span>上で有限体を使って遊ぶ <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by NaOHaq on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/22</span></p>
<p><strong><a href="https://qiita.com/cutsea110/items/69889a99d30b627bc04a"><span class="ascii">somehow-morphisms on fixed point written in Haskell - Qiita</span></a></strong><br />
<span class="ascii">by cutsea110 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/01</span></p>
<p><strong><a href="https://qiita.com/kyamaz/items/e49b07e05e871a22246c">量子プログラミングは<span class="ascii">Haskell</span>で <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by kyamaz on</span> <a href="http://qiita.com/advent-calendar/2017/quantum">量子コンピュータ <span class="ascii">Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/17</span></p>
<h3 id="docker"><span class="ascii">Docker</span></h3>
<p><strong><a href="https://qiita.com/t10471/items/4afa598e1be5d6c7cc1f"><span class="ascii">Haskell</span>でも<span class="ascii">Go</span>みたいにシングルバイナリでアプリケーションをデプロイしたい <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by t10471 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell2"><span class="ascii">Haskell (</span>その<span class="ascii">2) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/09</span></p>
<p><strong><a href="https://qiita.com/algas/items/fde155abbc9d8ae3f8c9"><span class="ascii">Haskell on Docker</span> で <span class="ascii">Portable CLI</span> を作ろう <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by algas on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/05</span></p>
<h3 id="eta"><span class="ascii">Eta</span></h3>
<p><strong><a href="https://qiita.com/aiya000/items/881d5f7e04b1178e7764"><span class="ascii">Eta</span>で表現されるデータ型としての<span class="ascii">Java</span>クラスとその継承関係 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by aiya000 on</span> <a href="http://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/25</span></p>
<p><strong><a href="https://qiita.com/aiya000/items/7dc0cb8694de0675088e"><span class="ascii">Haskell (Eta)</span> で<span class="ascii">JavaFX</span>の<span class="ascii">EDSL</span>を作る雰囲気を醸し出す <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by aiya000 on</span> <a href="http://adventar.org/calendars/2546">プロ生ちゃん <span class="ascii">Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/25</span></p>
<h3 id="書籍紹介">書籍紹介</h3>
<p><strong><a href="https://qiita.com/waddlaw/items/dd926462d398c4cbd019">これから <span class="ascii">Haskell</span> を学ぶ人のための書籍紹介 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/01</span></p>
<p><strong><a href="https://qiita.com/Aruneko/items/e72f7c6ee49159751cba"><span class="ascii">2017</span>年に「すごい<span class="ascii">Haskell</span>たのしく学ぼう」を読む <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by Aruneko on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/13</span></p>
<p><strong><a href="https://qiita.com/YoshikuniJujo/items/0708f108bf53a216a61a">拙書「<span class="ascii">Haskell</span> 教養としての関数型プログラミング」の紹介 <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by YoshikuniJujo on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/24</span></p>
<p><strong><a href="https://mt-caret.github.io/blog/posts/2017-12-01-book01.html"><span class="ascii">mt_caret.log -</span> 本<span class="ascii">1</span> “<span class="ascii">Haskell Programming from first principles</span>”</a></strong><br />
<span class="ascii">by mt_caret on</span> <a href="http://adventar.org/calendars/2433">本 <span class="ascii">Advent Calendar 2017 - Adventar</span></a> <span class="ascii">12/01</span></p>
<h3 id="翻訳記事">翻訳記事</h3>
<p><strong><a href="https://qiita.com/Pythonissam/items/ace180b1b78876f1c190"><span class="ascii">Haskell</span> で暗号学的ハッシュを扱う <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/02</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/d767f36d544427a9c60d"><span class="ascii">Haskell</span> のアプリケーション向けに軽量の <span class="ascii">Docker</span>イメージ を作る <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/03</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/8b7d2a200a932e761fa3"><span class="ascii">Haskell</span> 初心者へのアドバイス <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/04</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/31b835b493abf5be3549">将来も使えるテストスイート <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/05</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/27c12237d9ef1c5569ba"><span class="ascii">VS Code</span> で <span class="ascii">Ghcid</span> を使う <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/06</span></p>
<p><strong><a href="https://qiita.com/rounddelta/items/4584f5486c1061c93f0b"><span class="ascii">HLint</span> のルールを理解する <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/07</span></p>
<p><strong><a href="https://qiita.com/Pythonissam/items/41f8121795f5d8954802"><span class="ascii">SPJ</span> の憂鬱 <span class="ascii">(</span>和訳<span class="ascii">) - Qiita</span></a></strong><br />
<span class="ascii">by rounddelta on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/17</span></p>
<p><strong><a href="https://qiita.com/reotasosan/items/d9fdfab10e24eabfefda"><span class="ascii">SPJ</span>と<span class="ascii">Haskell</span>のエコシステム（和訳） <span class="ascii">- Qiita</span></a></strong><br />
<span class="ascii">by reotasosan on</span> <a href="http://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/18</span></p>
<p><strong><a href="https://haskell.e-bigmoon.com/posts/2017-12-27-haskell-performance-debugging"><span class="ascii">Haskell</span> のパフォーマンスをデバッグする</a></strong><br />
<span class="ascii">by waddlaw on</span> <a href="http://qiita.com/advent-calendar/2017/haskell5"><span class="ascii">Haskell (</span>その<span class="ascii">5) Advent Calendar 2017 - Qiita</span></a> <span class="ascii">12/01</span></p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2018/unordered-containers-hash-dos.html">hashdos脆弱性とunordered-containers</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/windows-gotchas.html" style="margin-left: auto;">WindowsでHaskellを扱う時によく遭遇するエラーと対処法</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>WindowsでHaskellを扱う時によく遭遇するエラーと対処法</title>
    <link href="https://haskell.jp/blog/posts/2017/windows-gotchas.html" />
    <id>https://haskell.jp/blog/posts/2017/windows-gotchas.html</id>
    <published>2017-12-25T00:00:00Z</published>
    <updated>2017-12-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>この記事は、<a href="https://qiita.com/advent-calendar/2017/haskell4"><span class="ascii">Haskell (</span>その<span class="ascii">4) Advent Calendar 2017</span></a><span class="ascii">14</span>日目の記事です。<br />
枠が空いていたので埋めるために登録しました。<br />
長くかかった割には実験自体は失敗気味な、<a href="https://haskell.jp/blog/posts/2017/typesafe-precure2.html">昨日のこちらの記事</a>よりは有用な情報じゃないかと思います。<br />
ほかの言語でもありそうな話ですしね。</p>
<p>すごく簡潔にまとめるとこの間の下記のツイートに収まるのですが、もう少し丁寧に補足するために書きます。</p>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
学んだことをまとめると<br><span class="ascii">- Invalid character</span>と言われたら<span class="ascii">chcp 65001</span>しよう<br><span class="ascii">- Permission Denied</span>と言われたらビルドし直そう<br><span class="ascii">-</span> 日本語のパスが混ざらないよう気をつけよう<br><span class="ascii">- C</span>のライブラリーはものによる<br>ですか。多分 <a href="https://twitter.com/hashtag/haskell?src=hash&amp;ref_src=twsrc%5Etfw"><span class="ascii">#haskell</span></a> 以外でも有益な話。
</p>
— <span class="ascii">Yuji Yamamoto:</span> 山本悠滋 <span class="ascii">(</span><span class="citation" data-cites="igrep"><span class="ascii">@igrep</span></span><span class="ascii">)</span> <a href="https://twitter.com/igrep/status/938056578934042626?ref_src=twsrc%5Etfw"><span class="ascii">2017</span>年<span class="ascii">12</span>月<span class="ascii">5</span>日</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h1 id="invalid-characterと言われたらchcp-65001しよう"><span class="ascii">Invalid character</span>と言われたら<span class="ascii">chcp 65001</span>しよう</h1>
<p>恐らく一番高確率で遭遇する <span class="ascii">&amp;</span> 知らないと回避できないのがこれ。<br />
あ、ほらまた<span class="ascii">hakyll</span>でビルドしたら起きた！</p>
<pre><code>&gt; stack exec -- site rebuild
...
  [ERROR] preprocessed-site\posts/2017/01-first.md: hGetContents: invalid argument (invalid byte sequence)</code></pre>
<p><span class="ascii">GHC</span>がファイルを読み書きする時に使う<a href="https://www.stackage.org/haddock/lts-10.0/base-4.10.1.0/System-IO.html#t:Handle"><code>Handle</code></a>というオブジェクトには、文字コードの情報が含まれています。</p>
<p>これは<span class="ascii">Ruby</span>の<a href="https://docs.ruby-lang.org/ja/latest/class/IO.html"><code>IO</code></a>や<span class="ascii">Perl</span>のファイルハンドラーにあるような仕組みと大体似ていて、<code>Handle</code>といったデータの「入り口」を表すオブジェクトに文字コードを紐付けることで、外から入ってくる文字列の文字コードを確実に内部の統一された文字コードに変換する変換できるようにしてくれます。<br />
<span class="ascii">Haskell</span>の<code>Char</code>型の場合は<span class="ascii">UTF-32</span>（この場合その言い方でよかったっけ？）のはずです。</p>
<p>この<code>Handle</code>に紐付ける文字コード、当然のごとくデフォルトでは<span class="ascii">OS</span>のロケール設定に従って設定されるようになってまして、日本語版の<span class="ascii">Windows</span>ではそう、<span class="ascii">Windows-31J</span>（またの名を<span class="ascii">CP932</span>）ですね。<br />
でも今はもうすぐ<span class="ascii">2018</span>年。あなたが「メモ帳」でプログラムを書く人でもない限り、新しく作るファイルの大半は<span class="ascii">UTF-8</span>でしょう。<br />
<span class="ascii">UTF-8</span>と<span class="ascii">Windows-31J</span>は全然違う体系の文字コードなので、<span class="ascii">UTF-8</span>なファイルを<span class="ascii">Windows-31J</span>のファイルとして読もうとしてもうまくいかないわけです。<br />
冒頭にあげた<code>invalid byte sequence</code>というエラーはまさにそうした場合に起こるエラーです。<br />
ファイルの読み書きだけでなく標準入出力でもしばしば発生するので覚えておいてください。</p>
<h2 id="対策">対策</h2>
<h3 id="ユーザーとして出くわした場合">ユーザーとして出くわした場合</h3>
<p>多くの場合、このエラーは以下のコマンドをあらかじめ実行しておけば回避できます。</p>
<pre><code>&gt; chcp 65001
&gt; stack exec -- site rebuild
... 動くはず！</code></pre>
<p>これは、現在開いているコマンドプロンプトで一時的に文字コードを切り替えるコマンドです。<br />
<code>65001</code>という数字が<span class="ascii">UTF-8</span>を指しているようです。<br />
もとに戻したい場合は<code>chcp 932</code>と実行しましょう。</p>
<pre><code>&gt; chcp 932</code></pre>
<p>どうやら「<span class="ascii">CP932</span>」の「<span class="ascii">932</span>」はここで出てくる「<span class="ascii">932</span>」と同じものを指しているようですね！</p>
<p>どういう仕様なのか分かりませんが、このコマンド、<span class="ascii">MSYS2</span>の<span class="ascii">bash</span>でも使用できます。<br />
ただし<code>chcp</code>コマンドは<code>C:\Windows\System32\</code>という、<span class="ascii">MSYS2</span>ユーザーにとってはあまり<code>PATH</code>に入れたくない場所に入っています。<br />
このディレクトリーには、<code>find.exe</code>など、<span class="ascii">Unix</span>な方が好んで使うコマンドと同じ名前の非互換なコマンドがゴロゴロ転がっているのです！</p>
<p>なので私は<span class="ascii">MSYS2</span>を使う時は<code>C:\Windows\System32\</code>は<code>PATH</code>から抜いています。<br />
私と同じような方は下記のようにフルパスで実行しましょう。</p>
<pre><code>/c/Windows/System32/chcp.com 932</code></pre>
<h3 id="それでもダメな場合あるいはライブラリーや開発者として出くわした場合">それでもダメな場合、あるいはライブラリーや開発者として出くわした場合</h3>
<p>残念ながら、<code>chcp 65001</code>してもこのエラーが消えないことはあります<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>。<br />
私の推測なんですが、どうも<code>chcp 65001</code>は<code>chcp 65001</code>したコマンドプロンプト（とか<span class="ascii">bash</span>）の孫プロセス（つまり、あなたが入力したコマンドの子プロセス）には届かないことがあるようです。</p>
<p>そんなときは、実際にエラーが起きているコマンドの開発元にバグ報告するか、自分で直してみましょう。<br />
バグ報告する場合は、「<code>chcp 932</code>してから実行してみて」とお願いすると、バグ報告を受けた開発者も再現しやすくて助かるかも知れません（残念ながら私はやったことがありません）。<br />
自分で直す場合、いろいろ方法はありますが、対象の<code>Handle</code>オブジェクトの文字コードを変えることで対処するのが、一番直接的で確実でしょう。</p>
<p>この問題は<code>Handle</code>に設定された文字コードと実際にやりとりされる文字列の文字コードに食い違いが発生しているため起こるものなのですから、適切な文字コードに変えてしまえばいいのです。<br />
状況にもよりますがエラーが起きた<code>Handle</code>が普通の<span class="ascii">UTF-8</span>なファイルを読み書きするものである場合、下記のようにすれば、問題は回避できるはずです。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="kw">import</span> <span class="dt">System.IO</span> (hSetEncoding)</a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="kw">import</span> <span class="dt">GHC.IO.Encoding</span> (utf8)</a>
<a class="sourceLine" id="cb5-3" data-line-number="3"></a>
<a class="sourceLine" id="cb5-4" data-line-number="4">hSetEncoding handle utf8</a></code></pre></div>
<p>それから、<a href="https://github.com/haskell/haddock/pull/566">実際に私が<span class="ascii">haddock</span>のバグを直した時</a>を例に標準出力（または標準エラー出力）でこのエラーが発生した時の対応も紹介しておきます。<br />
コードだけ貼り付けると、下記のようにすれば少なくともエラーが起こらないようにすることはできます（<a href="https://github.com/haskell/haddock/pull/566/commits/855118ee45e323fd9b2ee32103c7ba3eb1fbe4f2">このコミット</a>とほぼ同じ内容です）。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot">{-# LANGUAGE CPP #-}</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="kw">import</span> <span class="dt">System.IO</span> (hSetEncoding, stdout)</a>
<a class="sourceLine" id="cb6-4" data-line-number="4"></a>
<a class="sourceLine" id="cb6-5" data-line-number="5"><span class="ot">#if defined(mingw32_HOST_OS)</span></a>
<a class="sourceLine" id="cb6-6" data-line-number="6"><span class="kw">import</span> <span class="dt">GHC.IO.Encoding.CodePage</span> (mkLocaleEncoding)</a>
<a class="sourceLine" id="cb6-7" data-line-number="7"><span class="kw">import</span> <span class="dt">GHC.IO.Encoding.Failure</span> (<span class="dt">CodingFailureMode</span>(<span class="dt">TransliterateCodingFailure</span>))</a>
<a class="sourceLine" id="cb6-8" data-line-number="8"><span class="ot">#endif</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9"></a>
<a class="sourceLine" id="cb6-10" data-line-number="10"><span class="fu">...</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11"></a>
<a class="sourceLine" id="cb6-12" data-line-number="12"><span class="ot">#if defined(mingw32_HOST_OS)</span></a>
<a class="sourceLine" id="cb6-13" data-line-number="13">  liftIO <span class="fu">$</span> hSetEncoding stdout <span class="fu">$</span> mkLocaleEncoding <span class="dt">TransliterateCodingFailure</span></a>
<a class="sourceLine" id="cb6-14" data-line-number="14"><span class="ot">#endif</span></a></code></pre></div>
<p><span class="ascii">Windows</span>でしか使用できないモジュールを<code>import</code>している関係上、<span class="ascii">CPP</span>のマクロが混ざって読みにくいですが、重要な部分だけ切り出すと、</p>
<pre><code>hSetEncoding stdout $ mkLocaleEncoding TransliterateCodingFailure</code></pre>
<p>とすればよいのです。</p>
<p>一つ一つ解説しましょう。<br />
まず<code>hSetEncoding</code>は先ほども触れたとおり指定した<code>Handle</code>の文字コードを変更する関数です。<br />
そして<code>stdout</code>は名前の通り標準出力を表す<code>Handle</code>です。<br />
最後の<code>mkLocaleEncoding TransliterateCodingFailure</code>ですが、これは<span class="ascii">Windows</span>で設定された文字コード（この場合<code>chcp</code>された文字コードと同じ）に対して、「もし（<span class="ascii">Unicode</span>から、あるいは<span class="ascii">Unicode</span>に）変換できない文字があった場合、エラーにせず、それっぽい文字に変換する」という設定にすることができます。</p>
<p>結果、<code>chcp 932</code>な状態で<span class="ascii">GHC</span>のエラーメッセージにも使われる</p>
<pre><code>↓この文字
• No instance for (Transformation Nagisa CardCommune_Mepple)
↑</code></pre>
<p>が、</p>
<pre><code>? No instance for (Transformation Nagisa CardCommune_Mepple)</code></pre>
<p>のように、クエスチョンマークに変換されるようになります。そう、<span class="ascii">Windows</span>で<span class="ascii">GHC</span>をお使いの方は一度は目にした「<span class="ascii">?</span>」ではないでしょうか😅<br />
つまり<span class="ascii">GHC</span>はデフォルトで<code>mkLocaleEncoding TransliterateCodingFailure</code>しているものと推測されます。<br />
いずれにせよ、エラーが起きないだけマシですね。</p>
<p>更に補足すると、<span class="ascii">GHC</span>の文字コードについてより詳しい情報は、<a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/GHC-IO-Encoding.html"><span class="ascii">GHC.IO.Encoding</span>のドキュメント</a>をご覧ください。</p>
<h1 id="permission-deniedと言われたらビルドし直そう"><span class="ascii">Permission Denied</span>と言われたらビルドし直そう</h1>
<p>雑なまとめと言いつつ最初の一つ目が長くなってしまいましたが、ここからは簡単に言います。<br />
<span class="ascii">Windows</span>で<code>stack build</code>なり<code>ghc</code>なり<code>elm-make</code>なりとにかくいろいろ動かしていると、「<span class="ascii">Permission Denied</span>」と言ったエラー（あるいはこれと似たようなメッセージのエラー）に出遭います。<br />
正直に言って私は原因はサッパリ分かってないのですが、このエラーは大抵の場合何度も同じコマンドを実行すれば再現しませんでした。<br />
一度や二度ではめげず、繰り返すのがポイントです 😅<br />
問題が起きているディレクトリーをウィルス対策ソフトのスキャン対象から外してみるとか、<span class="ascii">Dropbox</span>の同期を一時的に止めてみる、といったこともやってみるといいかもしれません。</p>
<p>あ、あと、「<span class="ascii">Directory not empty</span>」みたいなのもあったかな。これは同類のはずです。</p>
<h1 id="cのライブラリーは-まぁ頑張れ"><span class="ascii">C</span>のライブラリーは… まぁ、頑張れ。</h1>
<p><span class="ascii">Pure Haskell</span>なライブラリーであれば大体<span class="ascii">OK</span>なんですが、残念ながら<span class="ascii">C</span>のライブラリー（<code>lib***</code>みたいな名前でよく<span class="ascii">OS</span>のパッケージマネージャーに登録されているやつですね）に依存したライブラリーは、<span class="ascii">Windows</span>でインストールするのは結構トラブることが多いです。<br />
まぁ、これは<span class="ascii">Haskell</span>に限った話ではないでしょう。</p>
<p>対応方法は私が知る限り完全にケースバイケースなので、ここでは知っている対応例をいくつか挙げておきましょう。</p>
<ul>
<li><span class="ascii">HDBC-sqlite3:</span>
<ul>
<li><a href="https://qiita.com/igrep/items/d947ab871eb5b20b57e4"><span class="ascii">Windows</span>版<span class="ascii">stack</span>でも<span class="ascii">HDBC-sqlite3</span>をビルドする <span class="ascii">- Qiita</span></a></li>
<li><a href="http://hiratara.hatenadiary.jp/entry/2017/01/29/110100"><span class="ascii">MSYS2</span>で<span class="ascii">HDBC-sqlite3</span>をコンパイル <span class="ascii">-</span> 北海道苫小牧市出身の初老<span class="ascii">PG</span>が書くブログ</a></li>
</ul></li>
<li><a href="https://teratail.com/questions/102462"><span class="ascii">Haskell - Haskell</span>にて<span class="ascii">stack</span>で<span class="ascii">iconv</span>パッケージを利用する方法【<span class="ascii">Windows</span>環境】<span class="ascii">(102462)</span>｜<span class="ascii">teratail</span></a></li>
</ul>
<p>以上です！<br />
それでは<span class="ascii">2018</span>年も<span class="ascii">Haskell on Windows 10</span>で<span class="ascii">Happy Hacking!! WSL</span>なんて知らないぜ！🏁🏁🏁</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>敢えて脚注に書きますが、<a href="http://eta-lang.org/"><span class="ascii">Eta</span></a>のコンパイラーをビルドしている時（のはず）、<code>chcp 65001</code>でもダメで<code>chcp 20127</code>ならうまくいったことがあります。<br />
<code>chcp 20127</code>は<span class="ascii">US-ASCII</span>に切り替えるためのコマンドですが、やっぱり<span class="ascii">Eta</span>の開発者の手元（？）ではそうなっているからなのでしょうか…？<a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2017/advent-calendar-2017.html">Haskell Advent Calendar 2017 まとめ</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/typesafe-precure2.html" style="margin-left: auto;">タイプセーフプリキュア！を支える技術 その2</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>タイプセーフプリキュア！を支える技術 その2</title>
    <link href="https://haskell.jp/blog/posts/2017/typesafe-precure2.html" />
    <id>https://haskell.jp/blog/posts/2017/typesafe-precure2.html</id>
    <published>2017-12-24T00:00:00Z</published>
    <updated>2017-12-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>このエントリーは<a href="https://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017</span></a> <span class="ascii">24</span>日目の記事兼<a href="https://adventar.org/calendars/2118">プリキュア <span class="ascii">Advent Calendar 2017</span></a> <span class="ascii">24</span>日目の記事です。<br />
毎度の手口ですが、二つの<span class="ascii">Advent Calendar</span>に同時に投稿しています。</p>
<p><span class="ascii">Haskell</span>とプリキュアの<span class="ascii">Advent Calendar</span>ということで、去年に引き続き「<a href="https://github.com/igrep/typesafe-precure/">タイプセーフプリキュア！</a>」について、開発する上で見つかった問題と、その解決方法について紹介します <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>。<br />
なお、「タイプセーフプリキュア！」そのものの日本語の紹介については、<a href="https://qiita.com/igrep/items/5496fa405fae00b5a737">私の去年の<span class="ascii">Haskell Advent Calendar</span>の記事</a>や<a href="http://the.igreque.info/posts/2016/06-type-safe-precure.html">同じく去年のプリキュア <span class="ascii">Advent Calendar</span>の記事</a>をご覧ください。</p>
<h1 id="問題提起">問題提起</h1>
<p>例えば、あなたはたくさんの仲間と、たくさんのサブコマンドがある<span class="ascii">CLI</span>アプリを作っていたとします。<br />
コードの規約上、サブコマンド一つにつき一つのモジュールで、決まった関数<small>（<span class="ascii">Haskell</span>であれば<code>[String] -&gt; IO ()</code>みたいな型の関数でしょうか）</small>を定義するものとします。<br />
そうした場合、必ずどこかのモジュールで、各モジュールで定義したサブコマンドを表す関数を列挙する必要があるでしょう。<br />
その場合、次のような問題が生じることがあります。</p>
<ul>
<li>サブコマンド（を表す関数）を追加したとき、サブコマンドを列挙しているモジュールに、追加し忘れる。</li>
<li>複数の開発者がそれぞれのブランチで、新たに作成したサブコマンドを列挙しているモジュールに追加すると、マージする際にコンフリクトがしばしば発生する。</li>
</ul>
<p>また、<span class="ascii">DRY</span>原則を徹底するならば「サブコマンドの名前を、サブコマンド自身の定義と列挙しているモジュールとで繰り返さない」というアイディアに基づき、こうした関数の列挙を避ける、という考え方もあるでしょう。<br />
そのように作ることで、<strong>モジュールに関わる情報<small>（どのような定義で、どのように使用されるのか）</small>をなるべくモジュールのファイルのみに集約</strong>させることができ、モジュールに関する情報が分散してしまうのを軽減することができます。</p>
<p>つまり、今回実現したいことは、複数のファイルに散らばった特定の関数やデータ型の定義を、自動で一カ所にまとめて再利用する、ということです。<br />
この記事で何度も使うことになるので「<strong>定義を自動でまとめる問題</strong>」と呼ぶことにします。<br />
これを<span class="ascii">GHC</span>の各種機能を利用して、<span class="ascii">Haskell</span>で実現させる方法を考えましょう。</p>
<h1 id="ほかの言語での例">ほかの言語での例</h1>
<p>こうした処理を<span class="ascii">Haskell</span>以外のプログラミング言語で行う場合、例えば下記のような機能を使うことになるでしょう。<br />
参考のために、私がこれまでに出会ったものを紹介します。</p>
<h2 id="typesafe-precure2_case-ruby"><span class="ascii">Ruby</span>での場合</h2>
<p>前職時代、私は実際にこの「定義を自動でまとめる問題」に出くわしたのですが、<span class="ascii">Ruby</span>を使っていたため、下記のように<a href="https://docs.ruby-lang.org/ja/2.4.0/method/Module/i/included.html"><span class="ascii">Module#included</span></a>という、対象のモジュールを<code>include</code><small>（モジュールが提供する機能の継承）</small>したときに呼ばれる、特別なメタプログラミング用のメソッドを使って解決しておりました。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">module</span> <span class="dt">ListedAsSubCommand</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">  <span class="ot">@listed</span> = []</a>
<a class="sourceLine" id="cb1-3" data-line-number="3"></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  <span class="co"># このモジュールを include するたびに呼ばれるメソッド。</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">  <span class="co"># 引数として、include した Class オブジェクト（または Module オブジェクト）を受け取る</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">  <span class="kw">def</span> included klass</a>
<a class="sourceLine" id="cb1-7" data-line-number="7">    <span class="co"># include した Class オブジェクトをリストに追加して記録する</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">    <span class="ot">@listed</span>.push klass</a>
<a class="sourceLine" id="cb1-9" data-line-number="9">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10"></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">  <span class="kw">class</span> &lt;&lt; <span class="dv">self</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">    <span class="ot">attr_reader</span> <span class="st">:listed</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14"><span class="kw">end</span></a>
<a class="sourceLine" id="cb1-15" data-line-number="15"></a>
<a class="sourceLine" id="cb1-16" data-line-number="16"></a>
<a class="sourceLine" id="cb1-17" data-line-number="17"><span class="co"># path/to/commands/foo/sub_command_a.rb</span></a>
<a class="sourceLine" id="cb1-18" data-line-number="18"><span class="kw">class</span> <span class="dt">SubCommandA</span></a>
<a class="sourceLine" id="cb1-19" data-line-number="19">  include <span class="dt">ListedAsSubCommand</span></a>
<a class="sourceLine" id="cb1-20" data-line-number="20"></a>
<a class="sourceLine" id="cb1-21" data-line-number="21">  <span class="co"># SubCommandA の定義 ...</span></a>
<a class="sourceLine" id="cb1-22" data-line-number="22"><span class="kw">end</span></a>
<a class="sourceLine" id="cb1-23" data-line-number="23"></a>
<a class="sourceLine" id="cb1-24" data-line-number="24"></a>
<a class="sourceLine" id="cb1-25" data-line-number="25"><span class="co"># path/to/commands/bar/sub_command_b.rb</span></a>
<a class="sourceLine" id="cb1-26" data-line-number="26"><span class="kw">class</span> <span class="dt">SubCommandB</span></a>
<a class="sourceLine" id="cb1-27" data-line-number="27">  include <span class="dt">ListedAsSubCommand</span></a>
<a class="sourceLine" id="cb1-28" data-line-number="28"></a>
<a class="sourceLine" id="cb1-29" data-line-number="29">  <span class="co"># SubCommandB の定義 ...</span></a>
<a class="sourceLine" id="cb1-30" data-line-number="30"><span class="kw">end</span></a></code></pre></div>
<p>このように書くことで、<code>ListedAsSubCommand.listed</code>というプロパティから、<code>ListedAsSubCommand</code>を<code>include</code>した<code>Class</code>オブジェクトのリストが取得できます。<br />
実際に使用するときは、下記のように、対象のクラスが定義されているファイルを含んだディレクトリーからまとめて<code>require</code>した上で、<code>ListedAsSubCommand.listed</code>にアクセスする事になるでしょう。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="co"># ListedAsSubCommand.includedが実行されるのは対象のクラスが</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="co"># 定義されたときなので、この時点では空のリスト。</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="dt">ListedAsSubCommand</span>.listed <span class="co">#=&gt; []</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="co"># Dir.glob メソッドで、指定したディレクトリーから</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="co"># 再帰的にファイルを取り出し、require で読み込む。</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="dt">Dir</span>.glob(<span class="st">&#39;path/to/commands/**/*.rb&#39;</span>) <span class="kw">do</span>|file|</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">  require file</a>
<a class="sourceLine" id="cb2-9" data-line-number="9"><span class="kw">end</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10"></a>
<a class="sourceLine" id="cb2-11" data-line-number="11"><span class="co"># require されたファイルの中でクラスの定義が実行されるので、</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12"><span class="co"># 定義したクラスがリストに追加される</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13"><span class="dt">ListedAsSubCommand</span>.listed <span class="co">#=&gt; [SubCommandA, SubCommandB, ...]</span></a></code></pre></div>
<h2 id="javaでの場合"><span class="ascii">Java</span>での場合</h2>
<p><span class="ascii">Java</span>で「定義を自動でまとめる問題」を解決する場合も、<span class="ascii">Ruby</span>と同様に、何らかの形でメタプログラミング用の仕組みを利用することになるかと思います。<br />
とりわけ、<span class="ascii">Java</span>においては、この問題の解決に特化しているライブラリーの機能が存在している点が興味深いでしょう。<span class="ascii">Spring</span>の「コンポーネントスキャン」です。</p>
<p><span class="ascii">Spring</span>をはじめとする<span class="ascii">DI</span>フレームワークでは、各クラスにおいて依存するオブジェクト<small>（正確にはそのインターフェース）</small>を宣言した際、必ず何らかの形で、「どのインターフェースにどのオブジェクトを紐付けるか」を宣言することになります。いわゆる<span class="ascii">Application Context</span>を書いた<span class="ascii">XML</span>であったり、<code>@Configuration</code>アノテーションが着いたクラスがそれに当たります。<br />
結果、モジュール<small>（実際には<span class="ascii">Java</span>なのでクラス）</small>に関する情報、すなわちどのクラスのどのフィールドに、どのオブジェクトを注入するか、といった情報はすべてモジュールのファイルとは独立して管理することになり、<span class="ascii">DRY</span>ではなくなってしまいます。 まさに「定義を自動でまとめる問題」の典型と言えますね。</p>
<p>それに対して<span class="ascii">Spring</span>の「コンポーネントスキャン」では、下記のように設定することで、「どのインターフェースにどのオブジェクトを紐付けるか」といった情報を、すべて自動で設定してしまうことができます。<br />
下記はコンポーネントスキャンを<code>@Configuration</code>アノテーションが着いた<span class="ascii">Java</span>のクラスで設定した場合のサンプルコードです。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="at">@Configuration</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="at">@ComponentScan</span>(<span class="st">&quot;example.base.package.containing.components&quot;</span>)</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">public</span> <span class="kw">class</span> AppConfig {</a>
<a class="sourceLine" id="cb3-4" data-line-number="4">}</a></code></pre></div>
<p><code>@Configuration</code>アノテーションを付与した<span class="ascii">Java</span>のクラスに、更に<code>@ComponentScan</code>というアノテーションを付与すると、<span class="ascii">Spring</span>は、<code>@ComponentScan</code>アノテーションの引数として渡した名前空間以下に存在する、すべての<code>@Component</code>というアノテーションが着いたクラスのオブジェクトを、自動的にほかの<code>@Component</code>が着いたクラスのフィールドとして設定できるようにします<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a>。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="at">@Component</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="kw">public</span> <span class="kw">class</span> SomeComponent {</a>
<a class="sourceLine" id="cb4-3" data-line-number="3">  <span class="co">// ...</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4">}</a></code></pre></div>
<p>このようにコンポーネントスキャンを使うことで、<code>@ComponentScan</code>されたクラスのオブジェクトは自動で依存するオブジェクトとして紐付けられるようになります。<br />
従来<code>foo-context.xml</code>みたいな名前のファイルに、どのオブジェクトのどのフィールドにどのオブジェクトを紐付けるか、といった情報を一つ一つ書いていたのを、ほとんど書かなくて済むようになりました。</p>
<h1 id="typesafe-precure2_requirement">解決に必要なもの</h1>
<p>さて、私が経験した二つの言語における「定義を自動でまとめる問題」の解決方法を見てきたところで、この問題を解決するのに共通して必要なことを列挙しましょう。</p>
<p><strong><span class="ascii">(1)</span> 対象となる「まとめたい定義（モジュールや関数、型など）」が書かれているファイルが、どのディレクトリー以下にあるか設定する</strong></p>
<p>「定義を自動でまとめる問題」に取り組むに当たり、最低限必要となるのが、この設定です。<br />
まさかファイルシステムにあるすべてのソースコードから「まとめたい定義」を探すわけにも行きませんし、プロジェクトのディレクトリーすべてを処理するのも、柔軟性に欠けた解決方法でしょう。そこで通例「定義を自動でまとめる問題」に対応する際は、「まとめたい定義（モジュールや関数、型など）」が書かれているファイルがどのディレクトリー以下にあるか、を何らかの形で書くことになります。</p>
<p>前述の<span class="ascii">Ruby</span>による例の場合、この情報は下記の<code>Dir.glob</code>メソッドに渡した引数に当たります。<br />
<code>'path/to/commands/**/*.rb'</code> という文字列のうち、 <code>path/to/commands/</code> の部分ですね。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="dt">Dir</span>.glob(<span class="st">&#39;path/to/commands/**/*.rb&#39;</span>) <span class="kw">do</span>|file|</a>
<a class="sourceLine" id="cb5-2" data-line-number="2">  require file</a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="kw">end</span></a></code></pre></div>
<p><span class="ascii">Java</span>における<span class="ascii">Spring</span>のコンポーネントスキャンの場合、<code>@ComponentScan</code>アノテーションに渡した引数が該当します。<br />
厳密には、<code>@ComponentScan</code>アノテーションに渡す引数はディレクトリーのパスではなく<code>Java</code>のパッケージの名前ですが、<span class="ascii">Java</span>ではパッケージはクラスパス以下のディレクトリーと一対一で対応するよう作る必要があるので、事実上ディレクトリーのパスを渡していると言えるでしょう。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="at">@Configuration</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="at">@ComponentScan</span>(<span class="st">&quot;example.base.package.containing.components&quot;</span>)</a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="kw">public</span> <span class="kw">class</span> AppConfig {</a>
<a class="sourceLine" id="cb6-4" data-line-number="4">}</a></code></pre></div>
<p><strong><span class="ascii">(2)</span> 「まとめたい定義（モジュールや関数、型など）」が書かれたファイルに、なんらかの印をつける</strong></p>
<p>「定義を自動でまとめる問題」では、「どの定義を自動でまとめるか」さえ指定できればよいので、理屈の上では前述の「<span class="ascii">(1)</span> 対象となる『まとめたい定義（モジュールや関数、型など）』が書かれているファイルが、どのディレクトリー以下にあるか設定する」さえできれば、後はディレクトリー以下のファイルをすべて自動でまとめられるはずです。 しかし、それだけでは次の問題が生じてしまう恐れがあります。</p>
<ol type="1">
<li>「自動でまとめられるファイル」がどのように使用されるか理解しにくくなる。
<ul>
<li>「自動でまとめられるファイル」に書かれた定義は、多くの場合、明確に使用される箇所で言及されなくなってしまいます。結果、そのファイルを読んだだけでは、書かれている定義がどこでどう使われているのか、そもそも本当に使われているのかどうかすら分からなくってしまいます。プロジェクトに新しく参加する人は、相応の学習が必要になってしまうでしょう。</li>
</ul></li>
<li>細かい例外を設定しにくい。
<ul>
<li>「まとめたい定義が書かれたファイル」を含むディレクトリーの中に、まとめる対象としたくないファイルを作る、ということがやりにくくなってしまいます。</li>
<li>例えばサブコマンドの例で言えば、<code>Commands</code>というディレクトリー以下に複数のサブコマンド（まとめられる対象）を置いたとき、各サブコマンドで共有されるユーティリティー関数も<code>Commands</code>ディレクトリー以下に置きたくなるかも知れません。もちろん状況に応じてほかのディレクトリーに置く手段も検討すべきですが、そうしたユーティリティー関数の入ったファイルは自動でまとめて欲しくないでしょう。</li>
</ul></li>
</ol>
<p>そうした問題を軽減するために、「定義を自動でまとめる問題」に対応する際は、必ず「『まとめたい定義（モジュールや関数、型など）』が書かれたファイルに、なんらかの印をつける」ことを検討した方がいいと思います。</p>
<p>前述の<span class="ascii">Ruby</span>による例で言えば、これは<code>include ListedAsSubCommand</code>という、<code>included</code>メソッドを実装した<code>ListedAsSubCommand</code>モジュールを<code>include</code>することが該当します。<br />
<span class="ascii">Java</span>の<span class="ascii">Spring</span>のコンポーネントスキャンの場合、まさしく<code>@Component</code>アノテーションがそれに当たるでしょう。</p>
<p>これらの印が着いたファイルを読む場合、この「印」を手がかりにして、コードベースを検索したり定義ジャンプしたり、<span class="ascii">Spring</span>の場合はインターネットを検索したりすることで、「印」の役割を知り、そのファイルがどう使われるのか調べることができるのです。</p>
<h1 id="typesafe-precure2_warnings">注意点</h1>
<p>いよいよ次の節で「定義を自動でまとめる問題」を<span class="ascii">Haskell</span>で解決した例を紹介いたしますが、その前にこの問題を解決することによって生じる、副作用について強調しておきましょう。 私の観測範囲内でですが、今までこの問題に対応した例を見たことがないのは、そうした副作用による悪影響が大きいと感じている人が多数派だからなのかも知れません。</p>
<p>それは、前節でも触れましたが、「『自動でまとめられるファイル』がどのように使用されるか理解しにくくなる」ということです。<br />
この問題は、確かに「『まとめたい定義（モジュールや関数、型など）』が書かれたファイルに、なんらかの印をつける」ことである程度緩和可能な問題ではありますが、それでも強く意識するべきでしょう。<br />
「自動でまとめられるファイル」を初めて読んだ人が、<code>include ListedAsSubCommand</code>や<code>@Component</code>という印に気づければよいのですが、そうでない場合、使用箇所を求めてコードベースをさまようことになってしまいます。<br />
事前に「印」の存在を知らせておくに越したことはありません。</p>
<p>それから、「『まとめたい定義（モジュールや関数、型など）』が書かれたファイルに、なんらかの印をつける」ことを選択した場合、「まとめたい定義が書かれたファイル」を新しく追加したいとき、ファイルにその「印」を書き忘れてしまうことがある点も、覚えておくべきでしょう。<br />
当初この「定義を自動でまとめる問題」を提起した際、自動でまとめなかった場合のデメリットしてあげた、</p>
<blockquote>
<ul>
<li>サブコマンド（を表す関数）を追加したとき、サブコマンドを列挙しているモジュールに、追加し忘れる。</li>
</ul>
</blockquote>
<p>という問題と本質的に同じです。<br />
自動でまとめずに手で定義を列挙した場合と比べて、編集するファイルが少ない分、忘れる可能性は低いかもしれません。<br />
ひな形に「印」を含めれば、さらに忘れる確率を下げることができるでしょう。手で一つのファイルに定義を列挙していた場合、そうした工夫はできません。<br />
ですが、いずれにしても忘れてしまうリスクがあることは変わらないでしょう。</p>
<p>以上の通り、結局のところ、「定義を自動でまとめる」よう設定するか、単純にまとめたい定義を手で列挙するかどうかは、そうしたトレードオフを考慮しつつ落ち着いて考えるのを推奨します。<br />
これから紹介する方法を採用する際も、ここであげた注意点については忘れないでください。</p>
<h1 id="haskellでの解決事例---タイプセーフプリキュアにおけるcure-index.jsonの実装"><span class="ascii">Haskell</span>での解決事例 <span class="ascii">-</span> 「タイプセーフプリキュア！」における<code>cure-index.json</code>の実装</h1>
<p>「<a href="https://github.com/igrep/typesafe-precure/">タイプセーフプリキュア！</a>」<small>（パッケージとしての名前は<a href="https://hackage.haskell.org/package/typesafe-precure"><span class="ascii">typesafe-precure</span></a>なので、以下「<span class="ascii">typesafe-precure</span>」と呼びます）</small>では、最近の更新により、コンパイル時に「<a href="https://github.com/igrep/typesafe-precure/blob/master/gen/cure-index.json"><span class="ascii">cure-index.json</span></a>」と、「<a href="https://github.com/igrep/typesafe-precure/blob/master/gen/pretty-cure-index.json"><span class="ascii">pretty-cure-index.json</span></a>」いうファイルを生成するようになりました。<br />
次のような内容のファイルです。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode json"><code class="sourceCode json"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="fu">{</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">    <span class="dt">&quot;specialItems&quot;</span><span class="fu">:</span> <span class="ot">[</span></a>
<a class="sourceLine" id="cb7-3" data-line-number="3">        <span class="fu">{</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">            <span class="dt">&quot;nameEn&quot;</span><span class="fu">:</span> <span class="st">&quot;Sweets Pact&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">            <span class="dt">&quot;attachments&quot;</span><span class="fu">:</span> <span class="ot">[</span></a>
<a class="sourceLine" id="cb7-6" data-line-number="6">                <span class="st">&quot;Animal Sweets&quot;</span></a>
<a class="sourceLine" id="cb7-7" data-line-number="7">            <span class="ot">]</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-8" data-line-number="8">            <span class="dt">&quot;nameJa&quot;</span><span class="fu">:</span> <span class="st">&quot;スイーツパクト&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-9" data-line-number="9">            <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;SweetsPact&quot;</span></a>
<a class="sourceLine" id="cb7-10" data-line-number="10">        <span class="fu">}</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb7-11" data-line-number="11">        <span class="er">...</span></a>
<a class="sourceLine" id="cb7-12" data-line-number="12">    <span class="ot">]</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-13" data-line-number="13">    <span class="dt">&quot;transformees&quot;</span><span class="fu">:</span> <span class="ot">[</span></a>
<a class="sourceLine" id="cb7-14" data-line-number="14">        <span class="fu">{</span></a>
<a class="sourceLine" id="cb7-15" data-line-number="15">            <span class="dt">&quot;nameEn&quot;</span><span class="fu">:</span> <span class="st">&quot;Cure Whip&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-16" data-line-number="16">            <span class="dt">&quot;variationEn&quot;</span><span class="fu">:</span> <span class="st">&quot;&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-17" data-line-number="17">            <span class="dt">&quot;nameJa&quot;</span><span class="fu">:</span> <span class="st">&quot;キュアホイップ&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-18" data-line-number="18">            <span class="dt">&quot;variationJa&quot;</span><span class="fu">:</span> <span class="st">&quot;&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-19" data-line-number="19">            <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;CureWhip&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-20" data-line-number="20">            <span class="dt">&quot;introducesHerselfAs&quot;</span><span class="fu">:</span> <span class="st">&quot;ショートケーキ！元気と笑顔を！レッツ・ラ・まぜまぜ！キュアホイップ！できあがり！&quot;</span></a>
<a class="sourceLine" id="cb7-21" data-line-number="21">        <span class="fu">}</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb7-22" data-line-number="22">        <span class="er">...</span></a>
<a class="sourceLine" id="cb7-23" data-line-number="23">    <span class="ot">]</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-24" data-line-number="24">    <span class="dt">&quot;girls&quot;</span><span class="fu">:</span> <span class="ot">[</span></a>
<a class="sourceLine" id="cb7-25" data-line-number="25">        <span class="fu">{</span></a>
<a class="sourceLine" id="cb7-26" data-line-number="26">            <span class="dt">&quot;nameEn&quot;</span><span class="fu">:</span> <span class="st">&quot;Ichika Usami&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-27" data-line-number="27">            <span class="dt">&quot;nameJa&quot;</span><span class="fu">:</span> <span class="st">&quot;宇佐美 いちか&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-28" data-line-number="28">            <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;Ichika&quot;</span></a>
<a class="sourceLine" id="cb7-29" data-line-number="29">        <span class="fu">}</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb7-30" data-line-number="30">        <span class="er">...</span></a>
<a class="sourceLine" id="cb7-31" data-line-number="31">    <span class="ot">]</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-32" data-line-number="32">    <span class="er">...</span></a>
<a class="sourceLine" id="cb7-33" data-line-number="33"><span class="fu">}</span></a></code></pre></div>
<p>これは、変身アイテムからプリキュア、プリキュアに変身する前の女の子、それから浄化技や変身時の台詞まで、<span class="ascii">typesafe-precure</span>で定義されているあらゆる情報をまとめた<span class="ascii">JSON</span>です。<br />
まさしく、プリキュアの定義を自動でまとめた「インデックス」となっております <a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a>。<br />
ただし、残念ながら現時点では「キラキラ☆プリキュアアラモード」に収録されたプリキュアの情報しか、<code>cure-index.json</code>には記録されていません<small>（理由は後で説明します）</small>。</p>
<p>名前の通り、<span class="ascii">pretty-</span><code>cure-index.json</code>には<code>cure-index.json</code>をプリティープリントした<span class="ascii">JSON</span>が記録されています。<br />
下記のように<code>curl</code>して確かめてみましょう。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb8-1" data-line-number="1">$ <span class="ex">curl</span> -sL https://github.com/igrep/typesafe-precure/raw/master/gen/cure-index.json</a>
<a class="sourceLine" id="cb8-2" data-line-number="2">{<span class="st">&quot;girls&quot;</span>:[{<span class="st">&quot;id&quot;</span>:<span class="st">&quot;Ichika&quot;</span>,<span class="st">&quot;nameEn&quot;</span>:<span class="st">&quot;Ichika Usami&quot;</span>,<span class="st">&quot;nameJa&quot;</span>:<span class="st">&quot;宇佐美 いちか&quot;</span>},{<span class="st">&quot;id&quot;</span>:<span class="st">&quot;Himari&quot;</span>,<span class="st">&quot;nameEn&quot;</span>:<span class="st">&quot;Himari Arisugawa&quot;</span>,<span class="st">&quot;nameJa&quot;</span>:<span class="st">&quot;有栖川 ひまり&quot;</span>}</a>
<a class="sourceLine" id="cb8-3" data-line-number="3"><span class="ex">...</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">$ <span class="ex">curl</span> -sL https://github.com/igrep/typesafe-precure/raw/master/gen/pretty-cure-index.json</a>
<a class="sourceLine" id="cb8-5" data-line-number="5"><span class="kw">{</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6">    <span class="st">&quot;specialItems&quot;</span>:<span class="bu"> [</span></a>
<a class="sourceLine" id="cb8-7" data-line-number="7">        {</a>
<a class="sourceLine" id="cb8-8" data-line-number="8">            <span class="st">&quot;nameEn&quot;</span>: <span class="st">&quot;Sweets Pact&quot;</span>,</a>
<a class="sourceLine" id="cb8-9" data-line-number="9">...</a></code></pre></div>
<p>さて、この<code>cure-index.json</code>、繰り返しになりますが、<span class="ascii">typesafe-precure</span>で定義されている、すべてのプリキュアの情報をまとめた<span class="ascii">JSON</span>となっております。<br />
ライブラリーとしての<span class="ascii">typesafe-precure</span>では、これらの情報は一つ一つが<span class="ascii">Haskell</span>の型として定義<span class="ascii">[^detail-typesafe-precure]</span>されており、<code>cure-index.json</code>は、それらの情報をコンパイル時に「自動でまとめる」ことで作成されます。決して、<span class="ascii">JSON</span>から<span class="ascii">Haskell</span>の型を作っているわけではありません。<br />
詳細は冒頭にも挙げましたが、<a href="https://qiita.com/igrep/items/5496fa405fae00b5a737">私の去年の<span class="ascii">Haskell Advent Calendar</span>の記事</a>や<a href="http://the.igreque.info/posts/2016/06-type-safe-precure.html">同年のプリキュア <span class="ascii">Advent Calendar</span>の記事</a>をご覧ください。<br />
ここではそれを実現するために使用した、<span class="ascii">Haskell</span>で「定義を自動でまとめる」方法を紹介しましょう。</p>
<h2 id="使用したghcについて">使用した<span class="ascii">GHC</span>について</h2>
<p>…と、その前に、今回<span class="ascii">typesafe-precure</span>のビルドに使用した<span class="ascii">GHC</span>のバージョンを述べておきましょう。</p>
<p><span class="ascii">typesafe-precure</span>は現在<span class="ascii">(ver. 0.5.0.1)</span>の時点において、通常<span class="ascii">GHC 8.0.2</span>でビルドされています。<br />
特に<span class="ascii">CI</span>での確認はしていませんが、<span class="ascii">GHC 7.10</span>でもビルドできるはずです。<br />
従って、使用している<span class="ascii">template-haskell</span>パッケージは<a href="https://hackage.haskell.org/package/template-haskell-2.10.0.0"><span class="ascii">2.10.0.0</span></a>から<a href="https://hackage.haskell.org/package/template-haskell-2.11.1.0"><span class="ascii">2.11.1.0</span></a>となっています。</p>
<p>この記事で紹介する機能は、<span class="ascii">GHC</span><small>（と、<span class="ascii">GHC</span>に標準添付される<span class="ascii">template-haskell</span>パッケージ）</small>のバージョンによって、大きく変わる場合があります。<br />
今回は「できない」としたことも、将来の<span class="ascii">GHC</span>ではできるようになっている（あるいは運悪くその逆もある）かもしれません。<br />
あらかじめご了承ください。</p>
<p>なお、各バージョンの<span class="ascii">GHC</span>に標準添付されているパッケージのバージョンについては、<a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/Libraries/VersionHistory"><span class="ascii">Commentary/Libraries/VersionHistory</span> – <span class="ascii">GHC</span></a>をご覧ください。</p>
<h2 id="annでまとめたい型が書かれたモジュールに印を着ける"><span class="ascii">ANN</span>で「まとめたい型」が書かれたモジュールに「印」を着ける</h2>
<p>まず、「『まとめたい定義（モジュールや関数、型など）』が書かれたファイルに、なんらかの印をつける」方法を考えましょう。<br />
実は<span class="ascii">Haskell(GHC)</span>にもアノテーションがあります<small>（<span class="ascii">Java</span>のアノテーションと使い勝手が異なりますが）</small>。<br />
<code>ANN</code>という<a href="https://www.haskell.org/onlinereport/haskell2010/haskellch12.html#x19-18800012"><span class="ascii">GHC</span>のプラグマ</a>（<code>{-# ... #-}</code> という形式で表される、特別なコメント）を使用すると、下記のように、モジュールや型、名前が付いた値に対して、アノテーションを加えることができます<small>（例は<a href="https://qiita.com/philopon/items/85210cc8f23ae04ba6ec">アンッ<span class="ascii">!!!</span>アンッ<span class="ascii">!!!! - Qiita</span></a>から拝借しました）</small>。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="kw">module</span> <span class="dt">Foo</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2"><span class="ot">{-# ANN module (&quot;annotation&quot; :: String) #-}</span> <span class="co">-- モジュールに対する注釈。importの前には書けないっぽい。不便……</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"></a>
<a class="sourceLine" id="cb9-4" data-line-number="4"><span class="kw">data</span> <span class="dt">Foo</span> <span class="fu">=</span> <span class="dt">Foo</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5"><span class="ot">{-# ANN type Foo (2 :: Int) #-}</span> <span class="co">-- 型に対する注釈</span></a>
<a class="sourceLine" id="cb9-6" data-line-number="6"><span class="ot">{-# ANN type Foo (5 :: Int) #-}</span> <span class="co">-- 注釈を同じ/違う型で複数個付ける事も出来る</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7"><span class="ot">{-# ANN type Foo (2.4 :: Double) #-}</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8"></a>
<a class="sourceLine" id="cb9-9" data-line-number="9"><span class="ot">foo ::</span> <span class="dt">Foo</span></a>
<a class="sourceLine" id="cb9-10" data-line-number="10">foo <span class="fu">=</span> <span class="dt">Foo</span></a>
<a class="sourceLine" id="cb9-11" data-line-number="11"><span class="ot">{-# ANN foo (3 + 2 * 6 :: Int) #-}</span> <span class="co">-- 値に対する注釈。注釈の中で計算する事も可能</span></a></code></pre></div>
<p>上記の通り、<span class="ascii">GHC</span>の<code>ANN</code>は、<span class="ascii">Java</span>のアノテーションと異なり、アノテーション専用のインターフェースを作って引数を補足情報として渡す、というような形式ではありません<small>（そもそも<span class="ascii">Haskell</span>にはインターフェースなんてありませんしね）</small>。<br />
<code>Data</code>型クラスのインスタンスである型の値であれば、なんでもアノテーションとして設定できます。</p>
<p>その<code>Data</code>型クラスのインスタンスですが、<code>base</code>パッケージに含まれている多くの型に加え、<code>DeriveDataTypeable</code>という<span class="ascii">GHC</span>の言語拡張を使えば、オリジナルの型も簡単にそのインスタンスにすることができます。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="ot">{-# LANGUAGE DeriveDataTypeable #-}</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Data.Data</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"></a>
<a class="sourceLine" id="cb10-5" data-line-number="5"><span class="kw">data</span> <span class="dt">SomeOriginalType</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">  <span class="dt">SomeOriginalValue</span> <span class="kw">deriving</span> <span class="dt">Data</span></a></code></pre></div>
<p>この、<code>Data</code>型クラスを使えば、実行時に型の構造を取得したりすることができます。<br />
とはいえ、ここでは単純に<code>{-# LANGUAGE DeriveDataTypeable #-}</code>と<code>deriving Data</code>を「おまじない」として使うだけで差し支えありません。<br />
詳しく知りたい方は<a href="https://github.com/shiatsumat/wiwinwlh-jp/wiki/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%82%AF%E3%82%B9">「<span class="ascii">What I Wish I Knew When Learning Haskell</span> 日本語訳」の「ジェネリクス」の章</a>をご覧ください。</p>
<p>さて<span class="ascii">typesafe-precure</span>では、この<code>Data</code>型クラスと<code>ANN</code>プラグマを利用した次のようなアプローチで、各モジュールに対し、プリキュアやプリキュアに関する情報を「印」として付与しました。</p>
<ol type="1">
<li><p><a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index/Types.hs"><code>ACME.PreCure.Index.Types</code></a>というモジュールに、型の名前やインスタンスの定義を自動生成したり、それを<span class="ascii">JSON</span>に変換したりするのに使う、中間データのための型を作る。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Girl</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">  <span class="dt">Girl</span> {<span class="ot"> girlId ::</span> <span class="dt">String</span>,<span class="ot"> girlNameEn ::</span> <span class="dt">String</span>,<span class="ot"> girlNameJa ::</span> <span class="dt">String</span> }</a>
<a class="sourceLine" id="cb11-3" data-line-number="3">    <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>, <span class="dt">Data</span>)</a></code></pre></div>
<ul>
<li>この、各種中間データ用の型を<code>Data</code>型クラスのインスタンスとすることで、「まとめたい定義」が含まれたモジュールに、その中間データ用の値を<code>ANN</code>プラグマで付与できるようにする。</li>
</ul></li>
<li><p>名前が<code>ACME.PreCure.Textbook.*.Profiles</code>という形式のモジュール<a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a><small>（<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Textbook/KirakiraALaMode/Profiles.hs">「キラキラ☆プリキュアアラモード」での例</a>）</small>で、中間データの値<small>（つまり各プリキュアや変身アイテムなどについての情報）</small>を定義する。</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="ot">girls ::</span> [<span class="dt">Girl</span>]</a>
<a class="sourceLine" id="cb12-2" data-line-number="2">girls <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3">  [ mkGirl <span class="st">&quot;Ichika Usami&quot;</span> <span class="st">&quot;宇佐美 いちか&quot;</span></a>
<a class="sourceLine" id="cb12-4" data-line-number="4">  , mkGirl <span class="st">&quot;Himari Arisugawa&quot;</span> <span class="st">&quot;有栖川 ひまり&quot;</span></a>
<a class="sourceLine" id="cb12-5" data-line-number="5">  , mkGirl <span class="st">&quot;Aoi Tategami&quot;</span> <span class="st">&quot;立神 あおい&quot;</span></a>
<a class="sourceLine" id="cb12-6" data-line-number="6">  , mkGirl <span class="st">&quot;Yukari Kotozume&quot;</span> <span class="st">&quot;琴爪 ゆかり&quot;</span></a>
<a class="sourceLine" id="cb12-7" data-line-number="7">  , mkGirl <span class="st">&quot;Akira Kenjo&quot;</span> <span class="st">&quot;剣城 あきら&quot;</span></a>
<a class="sourceLine" id="cb12-8" data-line-number="8">  , mkGirl <span class="st">&quot;Ciel Kirahoshi&quot;</span> <span class="st">&quot;キラ星 シエル&quot;</span></a>
<a class="sourceLine" id="cb12-9" data-line-number="9">  ]</a></code></pre></div>
<p><small><span class="ascii">1.</span> <code>ACME.PreCure.Textbook.*.Profiles</code>で定義した中間データを、<code>ACME.PreCure.Textbook.KirakiraALaMode.Types</code>という形式のモジュールに対して<code>ANN</code>プラグマで付与する（同じく<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Textbook/KirakiraALaMode/Types.hs">「キラキラ☆プリキュアアラモード」での例</a>）</small>。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode.Types</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2"></a>
<a class="sourceLine" id="cb13-3" data-line-number="3"><span class="kw">import</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode.Profiles</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4"></a>
<a class="sourceLine" id="cb13-5" data-line-number="5"><span class="ot">{-# ANN module girls #-}</span></a></code></pre></div></li>
</ol>
<h3 id="stage-restrictionを避けるためにモジュールを分ける"><span class="ascii">Stage Restriction</span>を避けるためにモジュールを分ける</h3>
<p>先の手順で引用したコードをご覧になった方は、こんなことを疑問に思ったかも知れません。<br />
中間データの値を定義するモジュールと、<code>ANN</code>で中間データの値を付与するモジュールとを分ける必要があるのか、と。<br />
上記の例で言えば、一つのモジュール<span class="ascii">(</span><code>ACME.PreCure.Textbook.KirakiraALaMode.Types</code><span class="ascii">)</span>で<code>girls</code>を定義しつつ<code>ANN</code>で付与すればよいのではないか、ということです。<br />
あるいは<code>girls</code>という名前をつけずに、</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">{-# ANN module</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2"><span class="ot">    [ mkGirl &quot;Ichika Usami&quot; &quot;宇佐美 いちか&quot;</span></a>
<a class="sourceLine" id="cb14-3" data-line-number="3"><span class="ot">    , mkGirl &quot;Himari Arisugawa&quot; &quot;有栖川 ひまり&quot;</span></a>
<a class="sourceLine" id="cb14-4" data-line-number="4"><span class="ot">    , mkGirl &quot;Aoi Tategami&quot; &quot;立神 あおい&quot;</span></a>
<a class="sourceLine" id="cb14-5" data-line-number="5"><span class="ot">    , mkGirl &quot;Yukari Kotozume&quot; &quot;琴爪 ゆかり&quot;</span></a>
<a class="sourceLine" id="cb14-6" data-line-number="6"><span class="ot">    , mkGirl &quot;Akira Kenjo&quot; &quot;剣城 あきら&quot;</span></a>
<a class="sourceLine" id="cb14-7" data-line-number="7"><span class="ot">    , mkGirl &quot;Ciel Kirahoshi&quot; &quot;キラ星 シエル&quot;</span></a>
<a class="sourceLine" id="cb14-8" data-line-number="8"><span class="ot">    ]</span></a>
<a class="sourceLine" id="cb14-9" data-line-number="9"><span class="ot">#-}</span></a>
<a class="sourceLine" id="cb14-10" data-line-number="10"><span class="co">-- 注: このコードは試していないので文法が合っているか自信がないです。</span></a></code></pre></div>
<p>というような書き方はできないのか、ということです。</p>
<p>中間データの値を<code>ANN</code>で使うだけならそれで問題ないのですが、<span class="ascii">typesafe-precure</span>の場合、中間データの値からプリキュアや変身アイテムを表す型と、その型クラスのインスタンスを定義する必要があります。<br />
なので、先ほどのコード例にあった<code>ACME.PreCure.Textbook.KirakiraALaMode.Profiles</code>というモジュールでは、実際には<code>{-# ANN module girls #-}</code>の行の後に、<code>girls</code>から、プリキュアに変身する女の子（を表す型）や、それに対して型クラスのインスタンスを宣言する<span class="ascii">Template Haskell</span>のコードが続いています。<br />
下記の<code>$(declareGirls girls)</code>という行がそれです。</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode.Types</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3"></a>
<a class="sourceLine" id="cb15-4" data-line-number="4"><span class="kw">import</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode.Profiles</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5"></a>
<a class="sourceLine" id="cb15-6" data-line-number="6"><span class="ot">{-# ANN module girls #-}</span></a>
<a class="sourceLine" id="cb15-7" data-line-number="7"><span class="fu">$</span>(declareGirls girls)</a></code></pre></div>
<p>詳細は冒頭でも挙げた<a href="https://qiita.com/igrep/items/5496fa405fae00b5a737">私の去年の<span class="ascii">Haskell Advent Calendar</span>の記事</a>などをご覧いただきたいのですが、<span class="ascii">typesafe-precure</span>では、それぞれのプリキュアや、プリキュアに変身する女の子、変身に必要なアイテムなどを、すべて<strong>個別の型</strong>として定義しています。<br />
そのため、中間データの値は<span class="ascii">JSON</span>としてまとめるだけでなく、個別の型として定義する必要もあったのです。<br />
その結果、中間データの値は必ず名前をつけて使い回さないといけなくなるのです。</p>
<p>そして、<code>ANN</code>や<span class="ascii">Template Haskell</span>において値に名前をつけて使い回す場合、「<span class="ascii">Stage Restriction</span>」というやっかいな制限が顔を出してきます。<br />
これは、「<code>ANN</code>で値を付与する式や、トップレベルの宣言などを生成する<span class="ascii">Template Haskell</span>のコードでは、<strong>ほかのモジュールから<code>import</code>された名前しか</strong>参照できない」という制限です<small>（詳しくは「<a href="http://haskell.g.hatena.ne.jp/mr_konn/20111218/1324220725">できる！<span class="ascii">Template Haskell (</span>完<span class="ascii">)</span></a>」をご覧ください）</small>。<br />
これがあるために、中間データの値を含めた名前（上記のコードの場合<code>girl</code>）は、<code>ANN</code>や<span class="ascii">Template Haskell</span>で参照するモジュールとは一旦別のモジュールとして定義して、<code>import</code>して再利用するしかありません。</p>
<p>本来、「定義を自動でまとめる問題」に対応する目的の中には「モジュールに関わる情報（どのような定義で、どのように使用されるのか）をなるべくモジュールのファイルのみに集約させる」というものがありましたが、外部のファイルに書くボイラープレートが増えてしまい、この観点ではイマイチな実装になってしまいました。<br />
この点については、後の節でよりよい方法を検討しましょう。</p>
<h2 id="autoexporterでまとめたい型が書かれているモジュールがどのディレクトリー以下にあるか設定する"><span class="ascii">autoexporter</span>で「まとめたい型」が書かれているモジュールが、どのディレクトリー以下にあるか設定する</h2>
<p>前節までで紹介した方法により、<code>ANN</code>プラグマを使うことでプリキュアの情報が書かれたモジュールに、プリキュアの情報を「自動でまとめる」ための「印」を着けることができました。<br />
続いて、<code>ANN</code>プラグマで「印」を着けたモジュールがどこにあるかを指定して、<span class="ascii">GHC</span>に自動で回収させる方法を述べましょう。 「<a href="#typesafe-precure2_requirement">解決に必要なもの</a>」の節で説明した、「対象となる『まとめたい定義（モジュールや関数、型など）』が書かれているファイルが、どのディレクトリー以下にあるか設定する」部分に当たります。</p>
<p>次の節で説明しますが、<code>ANN</code>プラグマで付与した情報は、「<a href="https://qiita.com/philopon/items/85210cc8f23ae04ba6ec#template-haskell%E3%81%8B%E3%82%89">アンッ<span class="ascii">!!!</span>アンッ<span class="ascii">!!!!</span>」でも説明されている</a>とおり<code>reifyAnnotations</code>という<span class="ascii">Template Haskell</span>の関数を使えば取得することができますが、該当のモジュールを何らかの方法で集めなくてはなりません。<br />
私が調べた限り、少なくとも<span class="ascii">Template Haskell</span>を使う限りは、<code>import</code>しているモジュールから収集する方法しか見つかりませんでした。<br />
<a href="https://hackage.haskell.org/package/template-haskell-2.12.0.0/docs/Language-Haskell-TH.html"><span class="ascii">Template Haskell</span>のライブラリーのドキュメント</a>では、<code>reifyAnnotations</code>するのに必要な、<code>Module</code>型の値を取得する方法として、<code>thisModule</code>を使って<span class="ascii">Template Haskell</span>のコードを実行しているモジュールから取得するか、<code>reifyModule</code>関数を使って<code>thisModule</code>から<code>thisModule</code>が<code>import</code>しているモジュールから取得するしか紹介されていないためです。</p>
<p>しかし、現状の<span class="ascii">GHC</span>では<span class="ascii">Template Haskell</span>をもってしても、指定したディレクトリー以下のモジュールを自動で<code>import</code>するということはできません。<br />
あまりユーザーに自由を与えてしまうと、却って混乱が生じる恐れがあるので敢えて実装していないのでしょう。<br />
とは言え、だからといって「印」を着けたモジュールを一つずつ手で<code>import</code>して列挙してしまっては、「定義を自動でまとめる問題」を解決できたとは言えなくなってしまいます。<br />
そこで、今回は実践でもよく使われる、さらなる「裏技」を用いることにしました。<br />
本節の見出しでネタバレしてしまっていますが、<a href="https://hackage.haskell.org/package/autoexporter"><code>autoexporter</code></a>というプログラムと、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html#ghc-flag--F"><span class="ascii">GHC</span>のカスタムプリプロセッサーのためのオプション</a>を使います。</p>
<p><span class="ascii">autoexporter</span>は、ドキュメントに書いてあるとおり、<span class="ascii">GHC</span>のカスタムプリプロセッサーのためのオプション<span class="ascii">(</span><code>-F -pgmF</code><span class="ascii">)</span>、さらには<a href="https://downloads.haskell.org/~ghc/7.0.3/docs/html/users_guide/pragmas.html#options-pragma"><code>OPTIONS_GHC</code>プラグマ</a>組み合わせて、次のように使うことを想定して作られています。<br />
以下は、<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Textbook.hs"><span class="ascii">typesafe-precure</span>の<code>ACME/PreCure/Textbook.hs</code>というファイル</a>からの抜粋です。</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="ot">{-# OPTIONS_GHC -F -pgmF autoexporter #-}</span></a></code></pre></div>
<p>と、いっても<span class="ascii">1</span>行だけですが😅</p>
<p>一つずつ解説しましょう。<br />
まず<code>OPTIONS_GHC</code>プラグマですが、文字通りこれは<code>ghc</code>コマンドに渡すオプションを、ファイル単位で指定するためのものです<small>（もちろんすべてのオプションをファイル単位で指定できるわけではありません）</small>。<br />
つまり、上記の場合<code>-F -pgmF autoexporter</code>というオプションが、<code>ACME/PreCure/Textbook.hs</code>というファイルでのみ有効になります。</p>
<p>続いて<code>-F</code>オプションですが、これは「カスタムプリプロセッサー」という機能を有効にするためのものです。<br />
これを有効にすると、有効にしたファイルを、続く<code>-pgmF</code>オプションで指定したプログラムで変換するようになります。<br />
具体的には、<code>-pgmF</code>オプションで指定したプログラムに、</p>
<ol type="1">
<li>変換前のファイル名、</li>
<li>変換前のソースコードを含むファイルの名前<small>（恐らく、一時ディレクトリーにコピーした、変換前のファイル名とは異なる名前と思われます）</small>、</li>
<li>変換後のソースコードを書き込むファイル名<small>（これも一時ディレクトリーにあるファイル名なのでしょう）</small>、</li>
</ol>
<p>という<span class="ascii">3</span>つのコマンドライン引数を渡して、<code>-pgmF</code>オプションで指定したプログラムを実行します。<br />
<code>-pgmF</code>で指定したプログラムが、<span class="ascii">3</span>つめの引数として渡した名前のファイルに変換後のソースコードを書き込むことで、<code>-F</code>を有効にしたファイルを、変換後のソースコードでそっくりそのまま差し替えます。<br />
結果、<code>-pgmF</code>オプションで指定したプログラムは、自由に任意の<span class="ascii">Haskell</span>のソースを生成できるようになります。まさにソースコードの自動生成にぴったりな機能と言えるでしょう。</p>
<p>ちなみにこの機能、<a href="https://hackage.haskell.org/package/hspec-discover"><code>hspec-discover</code></a>などのパッケージでも使用されています。テストコードを複数のファイルに分けて書く場合はほぼ必ず使われるものなので、みなさんも「おまじない」として使用したことがあるでしょう<small>（<code>-F -pgmF</code>なんて文字列、ググラビリティーも低いですしね。）</small>。<br />
そういえばこれもテストコードの「定義を自動でまとめる問題」を解決したものでしたね！</p>
<p>話がそれましたが、<code>autoexporter</code>はこのカスタムプリプロセッサーを利用することで、次のようなソースコードを自動生成します。<br />
<code>autoexporter</code>のドキュメントにも同じことが書かれていますが、ここでも<code>ACME/PreCure/Textbook.hs</code>を例に説明しましょう。</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2">  ( <span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook.First</span></a>
<a class="sourceLine" id="cb17-3" data-line-number="3">  , <span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook.MaxHeart</span></a>
<a class="sourceLine" id="cb17-4" data-line-number="4">  <span class="fu">...</span></a>
<a class="sourceLine" id="cb17-5" data-line-number="5">  , <span class="kw">module</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode</span></a>
<a class="sourceLine" id="cb17-6" data-line-number="6">  ) <span class="kw">where</span></a>
<a class="sourceLine" id="cb17-7" data-line-number="7"></a>
<a class="sourceLine" id="cb17-8" data-line-number="8"><span class="kw">import</span> <span class="dt">ACME.PreCure.Textbook.First</span></a>
<a class="sourceLine" id="cb17-9" data-line-number="9"><span class="kw">import</span> <span class="dt">ACME.PreCure.Textbook.MaxHeart</span></a>
<a class="sourceLine" id="cb17-10" data-line-number="10"><span class="fu">...</span></a>
<a class="sourceLine" id="cb17-11" data-line-number="11"><span class="kw">import</span> <span class="dt">ACME.PreCure.Textbook.KirakiraALaMode</span></a></code></pre></div>
<p>そう、（プリキュアが好きで）賢明な<span class="ascii">Haskeller</span>のみなさんならお気づきでしょう。<a href="https://github.com/igrep/typesafe-precure/tree/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Textbook"><span class="ascii">typesafe-precure</span>の<code>ACME/PreCure/Textbook/</code>ディレクトリー</a>に含まれている、（プリキュアの各シリーズを表す）すべてのモジュールを<code>import</code>して、再エクスポートしているのです！</p>
<p>つまり、<code>autoexporter</code>はこのような、「責務を分割するためにモジュールを細かく分けたい、でもユーザーには一つのモジュールを<code>import</code>しただけで使えるようにしたい」というライブラリー開発者のニーズに応えるため、よく行われているモジュールの書き方を自動で行うための便利コマンドなのです。</p>
<p>紹介が長くなりましたが、<span class="ascii">typesafe-precure</span>ではこの<code>autoexporter</code>を次のように使うことで、「まとめたい型（プリキュアや変身アイテムなどの情報）」が書かれているモジュールを集めています。</p>
<ol type="1">
<li>前述の<code>ACME.PreCure.Textbook</code>モジュールで<code>autoexporter</code>を使うことで、<code>ACME.PreCure.Textbook</code>以下にある、「まとめたい型（プリキュアや変身アイテムなどの情報）」が書かれているモジュールをすべて自動的に再エクスポートする。</li>
<li><a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs"><code>ACME.PreCure.Index</code></a>モジュールが<code>ACME.PreCure.Textbook</code>モジュールを<code>import</code>することで、実際に<code>cure-index.json</code>などの書き出しを行う<code>ACME.PreCure.Index</code>モジュールが、<code>ACME.PreCure.Textbook</code>が再エクスポートしたすべてのモジュールを利用できるようになる。</li>
</ol>
<p>実際のところ<code>OPTIONS_GHC -F</code>をもっとうまく使えば、<code>ACME.PreCure.Textbook</code>以下にあるモジュールを自動ですべて<code>import</code>するモジュールと、それを利用して<code>cure-index.json</code>などの書き出しを行うモジュールを、分けずに一つのモジュールで済ますこともできたでしょう。<br />
今回は敢えて<code>autoexporter</code>を再利用することで、<code>ACME.PreCure.Textbook</code>以下にあるモジュールをすべて回収する処理を書かずに任せることにしました。<br />
この件については後ほど再検討しましょう。</p>
<h2 id="annプラグマで付与した定義情報からjsonを書き出す"><code>ANN</code>プラグマで付与した定義情報から、<span class="ascii">JSON</span>を書き出す</h2>
<p>いよいよ、<code>autoexporter</code>を駆使して集めたモジュールから、<code>ANN</code>で付与したプリキュアの情報を取り出し、<span class="ascii">JSON</span>に変換して書き出しましょう。<br />
詳細は<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs"><code>ACME.PreCure.Index</code></a>モジュールや、<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index/Lib.hs"><code>ACME.PreCure.Index.Lib</code></a>モジュールのソースコードをご覧いただきたいのですが、ここでは簡単にアルゴリズムを解説します。</p>
<ol type="1">
<li>「現在のモジュール（<code>ACME.PreCure.Index</code>）」を取得する。</li>
<li>「現在のモジュール」が<code>import</code>しているモジュールから、<code>ACME.PreCure.Textbook</code>モジュールを見つけて、取り出す（<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs#L38-L39">具体的には<span class="ascii">38</span>行目から<span class="ascii">39</span>行目</a>）。</li>
<li>取得した<code>ACME.PreCure.Textbook</code>モジュールが<code>import</code>している、プリキュアの情報を集めたモジュール（<code>ANN</code>プラグマでプリキュアの情報を付与したモジュール）をすべて取り出す（<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs#L42-L45">具体的には<span class="ascii">42</span>行目から<span class="ascii">45</span>行目</a>）。</li>
<li>「プリキュアの情報を集めたモジュール」すべてから、<code>ANN</code>プラグマで付与されているプリキュアや変身アイテムなどの情報を集めて、種類ごとに一つのリストとしてまとめる（<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs#L48-L60">具体的には<span class="ascii">48</span>行目から<span class="ascii">60</span>行目</a>）。</li>
<li>収集してできた<code>Index</code>という型の値を、それぞれ<span class="ascii">JSON</span>に変換して書き込む（<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Index.hs#L61-L62">具体的には<span class="ascii">48</span>行目から<span class="ascii">60</span>行目</a>）。</li>
</ol>
<p>上記のアルゴリズムにおいても、<span class="ascii">Template Haskell</span>の「<span class="ascii">Stage Restriction</span>」と戦わなければならないということは注記しておきましょう。<br />
つまり、<code>ACME.PreCure.Index</code>における<span class="ascii">Template Haskell</span>のコードで繰り返し使う便利な関数は、<code>ACME.PreCure.Index</code>とは別のモジュールで定義して、<code>import</code>して使わなければならないのです。<br />
<code>ACME.PreCure.Index.Lib</code>モジュールは、その制限を回避するためのモジュールです。</p>
<p>ともあれこうして、<span class="ascii">typesafe-precure</span>では<code>ACME.PreCure.Index</code>モジュールをコンパイルする度に、各モジュールに定義されたすべてのプリキュアに関する情報を集めて、<a href="https://github.com/igrep/typesafe-precure/tree/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/gen"><span class="ascii">gen</span>ディレクトリー</a>にある<code>cure-index.json</code>や<code>pretty-cure-index.json</code>というファイルに書き出すことができました。<br />
「定義を自動でまとめる問題」、これにて一件落着です！🎉<br />
なお、自動生成されるファイルを<span class="ascii">Git</span>で管理することはなるべく避けた方がよいことですが、<code>cure-index.json</code>の配布を簡単に行うため方策として用いることにしています。</p>
<h1 id="うまくいかなかった方法-来年のタイプセーフプリキュアについてちょっとだけ">うまくいかなかった方法 （<span class="ascii">+</span> 来年の「タイプセーフプリキュア！」についてちょっとだけ）</h1>
<p><span class="ascii">typesafe-precure</span>における「定義を自動でまとめる問題」の解決方法はここまで述べたとおりですが、今後同じような問題に対応したくなったときのために、最初に思いついたけどうまくいかなかった方法や、後で思いついた別の解決方法をこの先の二つの節ででまとめておきます。<br />
私や読者のみなさんがお仕事など、より重要なプロジェクトでこれらのアイディアを活かすことができれば幸いです。</p>
<h2 id="型クラスのインスタンスから">型クラスのインスタンスから</h2>
<p>当初（実は今も大部分は）、<span class="ascii">typesafe-precure</span>には、<a href="https://github.com/igrep/typesafe-precure/blob/f6701b3b4a86fda3a9e82a6f0c06a87c4a56362e/src/ACME/PreCure/Textbook/KirakiraALaMode/Profiles.hs"><code>ACME.PreCure.Textbook.KirakiraALaMode.Profiles</code></a>で定義しているような中間データはなく、各プリキュア（や、変身アイテムなど諸々）に対しては、直接型を宣言したり型クラスのインスタンスを実装したりしていました。<br />
例えば下記のようなコードです<a href="#fn5" class="footnote-ref" id="fnref5"><sup>5</sup></a>👇</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="kw">data</span> <span class="dt">CurePeach</span> <span class="fu">=</span> <span class="dt">CurePeach</span></a>
<a class="sourceLine" id="cb18-2" data-line-number="2"></a>
<a class="sourceLine" id="cb18-3" data-line-number="3"><span class="kw">data</span> <span class="dt">CureStickPeachRod</span> <span class="fu">=</span> <span class="dt">CureStickPeachRod</span></a>
<a class="sourceLine" id="cb18-4" data-line-number="4"></a>
<a class="sourceLine" id="cb18-5" data-line-number="5"><span class="kw">instance</span> <span class="dt">Purification</span> <span class="dt">CurePeach</span> <span class="dt">CureStickPeachRod</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb18-6" data-line-number="6">  purificationSpeech _ _ <span class="fu">=</span></a>
<a class="sourceLine" id="cb18-7" data-line-number="7">    [ <span class="st">&quot;届け！愛のメロディ！&quot;</span></a>
<a class="sourceLine" id="cb18-8" data-line-number="8">    , <span class="st">&quot;キュアスティック・ピーチロッド！&quot;</span></a>
<a class="sourceLine" id="cb18-9" data-line-number="9">    , <span class="st">&quot;悪いの悪いの飛んでいけ！&quot;</span></a>
<a class="sourceLine" id="cb18-10" data-line-number="10">    , <span class="st">&quot;プリキュア！ラブサンシャイン・フレッシュ！&quot;</span></a>
<a class="sourceLine" id="cb18-11" data-line-number="11">    ]</a></code></pre></div>
<p>今回作った<code>cure-index.json</code>を最初に思いついたとき、「型クラスから各型のインスタンス宣言を自動で収集して、そこから<code>cure-index.json</code>を作れないだろうか」と、漠然と考えていました。<br />
<span class="ascii">typesafe-precure</span>を作り始める以前、私は<span class="ascii">Ruby</span>で「定義を自動でまとめる問題」に対応した際、<a href="#typesafe-precure2_case-ruby"><span class="ascii">Ruby</span>での場合</a>の節で紹介したような方法を用いていたため、「<span class="ascii">Haskell</span>における、<span class="ascii">Ruby</span>で言うところの<span class="ascii">mix-in</span>されるモジュールは型クラスだ」なんて類推をしていたからかも知れません。<br />
いずれにしても、そんな方法で実現できれば、既存の<span class="ascii">typesafe-precure</span>のモジュールの構造をそのまま使って<span class="ascii">cure-index</span>が作れるので、大変都合がよかったのです。</p>
<p>しかし、残念ながらその方法は、少なくとも単純に<span class="ascii">Template Haskell</span>を使うだけでは不可能であるとすぐ気づきました。<br />
なぜなら、<a href="https://hackage.haskell.org/package/template-haskell-2.12.0.0/docs/Language-Haskell-TH.html#v:reifyInstances"><span class="ascii">Template Haskell</span>のライブラリーが提供する<code>reifyInstances</code>という関数</a>は、インスタンス宣言を取り出したい型を、自前で持ってきて引数として渡さなければならないからです。<br />
したがって、<span class="ascii">Ruby</span>でやっていたように、型クラスのインスタンスを自動でリストアップする、といったことはできません<small>（もちろん、<span class="ascii">Ruby</span>でやった時も完全に自動ではなく、<code>include</code>したクラスが自分でグローバルなリストに追加していたわけですが）</small>。<br />
それならば、自前で<code>import</code>しているモジュールから定義されている型を収集することはできないだろうか、と思って、指定したモジュールで定義されている型を取り出す<span class="ascii">API</span>を探ってみましたが、それも見つかりませんでした。<br />
最もそれらしいことができそうな<a href="https://hackage.haskell.org/package/template-haskell-2.12.0.0/docs/Language-Haskell-TH.html#v:reifyModule"><code>reifyModule</code>という関数</a>が返す<a href="https://hackage.haskell.org/package/template-haskell-2.12.0.0/docs/Language-Haskell-TH.html#t:ModuleInfo"><code>ModuleInfo</code></a>も、保持しているのはあくまでも<code>import</code>している別のモジュールだけであり、いくら<span class="ascii">reify</span>してもモジュールの<strong>中で</strong>定義されている型の情報はとれないのです。</p>
<p>やむなく、私は<span class="ascii">typesafe-precure</span>の構造を改め、現在のような、<span class="ascii">JSON</span>として書き出すデータ構造を元に型と型クラスのインスタンスを自動で定義するような実装にすることとしました。<br />
この変更は依然として続いています。具体的には、今年新しく追加された「キラキラ☆プリキュアアラモード」に登場するプリキュア以外は、まだ従来の構造のままで、中間データの値は定義されていません。<br />
「キラキラ☆プリキュアアラモード」に収録されたプリキュアの情報しか、<code>cure-index.json</code>に記録されていないのはそのためです。</p>
<p>来年のプリキュアハッカソンやプリキュア<span class="ascii">Advent Calendar</span>では、<a href="https://hackage.haskell.org/package/haskell-src-exts"><span class="ascii">haskell-src-exts</span></a>という、<span class="ascii">Haskell</span>で<span class="ascii">Haskell</span>のソースコードをパースするライブラリーを使って、この大きな移行プロジェクトに取り組むことになるかと思います。<br />
<span class="ascii">typesafe-precure</span>には技術的なネタが尽きませんね。</p>
<h1 id="ほかにやればよかったかも知れない方法">ほかにやればよかったかも知れない方法</h1>
<p>同じことを繰り返しますが、これから紹介する方法も含めて「定義を自動でまとめる」問題の解決は、どんな方法を使うにしても、多かれ少なかれ凝ったメタプログラミングのテクニックを使わなければならなくなります。<br />
<a href="#typesafe-precure2_warnings">注意点</a>の節で強調したとおり、そのコードベースを初めて読んだ人が迷子にならないよう配慮することは忘れないでください。</p>
<h2 id="モジュールが持っている特定の名前の関数型を処理する">モジュールが持っている特定の名前の関数・型を処理する</h2>
<p>その方法は、先の節でも紹介した<a href="https://hackage.haskell.org/package/hspec-discover"><code>hspec-discover</code></a>でも実際に行われている方法です。<br />
<code>hspec-discover</code>は、<span class="ascii">GHC</span>のカスタムプリプロセッサーを利用して実行することで、テストが書かれたディレクトリーから<code>Spec</code>という名前で終わるすべてのテスト用モジュールを自動でまとめて、それらをすべて実行する<code>Spec.hs</code>を、自動で生成します。<br />
<code>hspec-discover</code>の場合、<code>ANN</code>のようなアノテーションは一切使用せず、モジュールの名前やモジュールがエクスポートする名前に規約を設けることで「定義をまとめる対象」を検出しています。<br />
このように、<code>ANN</code>のような特別な「印」を着けずに純粋に名前だけで「定義をまとめる対象」を決めることもできます。<br />
実績もあり、同じような方法をとることは非常に簡単そうです。</p>
<p>しかし、個人的には<a href="#typesafe-precure2_warnings">注意点</a>の節でも述べたとおり、「定義をまとめる」対象であることを表す「印」は、「定義をまとめる」対象のファイルの中にあった方が、わかりやすくていいと思います。<br />
確かに<code>hspec-discover</code>のように、公開されていて広く使用されているものであれば、使用したプロジェクトのコードを初めて読む人でも、すぐに理解できる場合が多いでしょう。「何がまとめられるのか」も比較的直感的ですしね。<br />
とはいえ、私が想定している、例えばアプリケーションのプラグインみたいな、もう少しローカルなコードベースである場合、「印」はより「印」らしいものであった方が、手がかりとして気づきやすいのではないかと思います。</p>
<p>😕初めて「まとめられる」コードを含むファイルを目にして、どのように使用されるのか分からず戸惑う<br />
⬇️<br />
🤔<code>{-# ANN MarkedAsFoo #-}</code>という見慣れないコメントを見つけて、それでコードベースを検索してみる<small>（プラグマは多くの<span class="ascii">syntax highlighter</span>で普通のコメントより目立って見えるはずです）</small><br />
⬇️<br />
💡<code>MarkedAsFoo</code>が着いたモジュールを実際に収集してまとめているコードを見つけて、理解する</p>
<p>という流れで「定義を自動でまとめる」機構の存在に気づくのではないでしょうか。</p>
<p>あるいはいっそ<code>ANN</code>も使わずに、こんな内容の<span class="ascii">human-readable</span>なコメントを「印」とするのもよいかも知れません。<br />
プログラムで検出するのもそう難しくはないでしょう。</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="kw">module</span> <span class="dt">Foo.Commands.SampleCommand</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb19-2" data-line-number="2"></a>
<a class="sourceLine" id="cb19-3" data-line-number="3"><span class="co">-- | このコメントが付いたモジュールの &#39;execute&#39; という関数は、</span></a>
<a class="sourceLine" id="cb19-4" data-line-number="4"><span class="co">--   Template Haskellによって、自動的に再利用できるよう収集される。</span></a>
<a class="sourceLine" id="cb19-5" data-line-number="5"><span class="co">--   詳しくは &#39;Foo.Commands` を読まれたし。</span></a></code></pre></div>
<p>これなら、<code>Foo.Commands</code>モジュールにヒントがあることが、すぐに分かります。<br />
<code>hspec-discover</code>のように、<span class="ascii">Template Haskell</span>を使わず直接ファイルシステムにあるファイルを開く方法とも、相性がいいはずです。</p>
<p>ほかにもいろいろな方法を考えましたが、これ以上に有効でもなさそうだし、そろそろ時間もなくなってきたので、この辺でまとめたいと思います。</p>
<h1 id="まとめ">まとめ</h1>
<ul>
<li>「定義を自動でまとめる」問題を解決することにより、モジュールに関わる情報<small>（どのような定義で、どのように使用されるのか）</small>をなるべくモジュールのファイルのみに集約させることができる</li>
<li>「定義を自動でまとめる」問題を解決するには、下記のことをする
<ul>
<li>「まとめたい定義」が書かれているファイルが、どのディレクトリー以下にあるか設定する</li>
<li>「まとめたい定義」が書かれたファイルに、なんらかの印をつける</li>
</ul></li>
<li><span class="ascii">Haskell</span>で「定義を自動でまとめる」問題を解決する場合、<span class="ascii">Template Haskell</span>と<span class="ascii">GHC</span>の<code>ANN</code>プラグマや、<span class="ascii">GHC</span>のカスタムプリプロセッサー<span class="ascii">(</span><code>-F -pgmF</code><span class="ascii">)</span>を組み合わせて使うことによって解決できるが、実際には<span class="ascii">GHC</span>のカスタムプリプロセッサーのみで十分可能
<ul>
<li>まとめる対象や状況に応じて、柔軟にやり方を考えよう</li>
</ul></li>
<li>どのような方法であれ、「定義を自動でまとめる」問題を解決すると、「『「自動でまとめられるファイル』がどのように使用されるか理解しにくくなる」という別の問題が発生するので、気をつけよう</li>
</ul>
<p>それでは<span class="ascii">2018</span>年も<span class="ascii">Template Haskell</span>とプリキュアで<span class="ascii">Happy Hacking!!</span> ❤️❤️❤️</p>
<h1 id="参考にしたページ">参考にしたページ</h1>
<p>（記事中で直接リンクを張っていないもののみ）</p>
<ul>
<li><a href="https://dev.classmethod.jp/server-side/java/various-spring-configuration/">第<span class="ascii">2</span>回 <span class="ascii">Spring</span>の様々な設定記述 – <span class="ascii">Annotation</span>も<span class="ascii">Java</span>もあるんだよ ｜ <span class="ascii">Developers.IO</span></a></li>
<li><a href="https://docs.ruby-lang.org/ja/2.4.0/method/Module/i/included.html"><span class="ascii">instance method Module#included (Ruby 2.4.0)</span></a></li>
<li><a href="https://downloads.haskell.org/~ghc/7.0.3/docs/html/users_guide/pragmas.html#annotation-pragmas"><span class="ascii">GHC User</span>’<span class="ascii">s Guide</span>の「<span class="ascii">7.13. Pragmas</span>」</a></li>
</ul>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>実際には「タイプセーフプリキュアそのものを開発する上で見つかった問題」というよりタイプセーフプリキュアの開発をすることで問題解決の実験をしている、といった方が正しいのは内緒。<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>もう少し正確に言うと、自動的に設定したいフィールド（あるいはコンストラクターの引数）に<code>@Autowired</code>というアノテーションが必要ですが、今回の話では本質的ではないので割愛しています。<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>もちろん、数年前流行ったあのライトノベルのパロディーではありません。<a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>誰にも聞かれてはいませんが勝手にお話ししますと、<code>ACME.PreCure.Textbook</code>という名前は、<a href="https://dic.pixiv.net/a/%E3%83%97%E3%83%AA%E3%82%AD%E3%83%A5%E3%82%A2%E6%95%99%E7%A7%91%E6%9B%B8">プリキュアの教科書</a>から来ています。<a href="#fnref4" class="footnote-back">↩</a></p></li>
<li id="fn5"><p>現在もそうですが、実際には<span class="ascii">Template Haskell</span>で定義されているので、<span class="ascii">typesafe-precure</span>のリポジトリーにはこれと全く同じコードはありません。<a href="#fnref5" class="footnote-back">↩</a></p></li>
</ol>
</section>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2017/windows-gotchas.html">WindowsでHaskellを扱う時によく遭遇するエラーと対処法</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/no-stack-build.html" style="margin-left: auto;">Haskell-jp Blogへの投稿が簡単になりました！</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>
<entry>
    <title>Haskell-jp Blogへの投稿が簡単になりました！</title>
    <link href="https://haskell.jp/blog/posts/2017/no-stack-build.html" />
    <id>https://haskell.jp/blog/posts/2017/no-stack-build.html</id>
    <published>2017-11-27T00:00:00Z</published>
    <updated>2017-11-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10">
                <ul class="social-buttons">
                    <li><div>
                        <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
                        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                    </div></li>
                    <li><div>
                        <script type="text/javascript">
                            reddit_target = "haskell_jp";
                            reddit_title  = document.title;
                        </script>
                        <script type="text/javascript" src="//www.redditstatic.com/button/button1.js"></script>
                    </div></li>
                    <li><div>
                        <a data-pocket-label="pocket" data-pocket-count="horizontal" class="pocket-btn" data-lang="en"></a>
                        <script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
                    </div></li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div id="md-post-content" class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
              <hr />
<p>こんにちは。<span class="ascii">Haskell-jp</span>です。<br />
ちょっと間が空いてしまいましたが、久々の投稿です。<span class="ascii">Haskell</span>自体の話と関係なくてすみません！</p>
<p>内容としてはタイトルのとおりなのですが、<a href="https://github.com/haskell-jp/blog/pull/51">こちら</a>や<a href="https://github.com/haskell-jp/blog/pull/53">こちら</a>をはじめとする<span class="ascii">Pull request</span>により、当ブログの記事の投稿が簡単になりました！<br />
具体的には、下記の点を改善しております。</p>
<ul>
<li>記事を作成して<span class="ascii">Pull request</span>を送った際、<span class="ascii">[Merge pull request]</span>ボタンを押して<span class="ascii">master</span>ブランチにマージしただけで自動で記事が公開されるようになりました！</li>
<li><a href="https://circleci.com/docs/1.0/build-artifacts/"><span class="ascii">CircleCI</span>の<span class="ascii">artifacts</span>機能</a>を利用することにより、ビルド結果から実際に公開される際のページをプレビューできるようにしました！
<ul>
<li><em><span class="ascii">https://XX-XXXXXXXX-gh.circle-artifacts.com/0/home/ubuntu/blog/generated-site</span></em> みたいな<span class="ascii">URL</span>で見られるようになります（具体的なページはビルド結果ごとに異なるので、適宜ご案内します）。</li>
</ul></li>
</ul>
<p>結果、これまで<span class="ascii">Haskell-jp Blog</span>に投稿する際に問題となっていた、下記の点が解消されました。</p>
<ul>
<li>投稿する人が自分で<code>make</code>などを実行しなければ、<span class="ascii">markdown</span>で書いた記事がどのような<span class="ascii">HTML</span>に変換されるかわからなかった。</li>
<li>権限を持った人が<code>make deploy</code>するまで、記事を<span class="ascii">master</span>ブランチにマージしても公開されなかった。</li>
</ul>
<p>以上を踏まえた、<span class="ascii">Haskell-jp Blog</span>の投稿手順については、<a href="https://github.com/haskell-jp/blog#readme"><span class="ascii">README</span></a>をご覧ください。<br />
基本的に投稿する人は、<strong><span class="ascii">Markdown</span>で記事を書いて、<span class="ascii">Pull request</span>を送るだけ</strong>です！</p>
<p>それでは、これからも<span class="ascii">Haskell-jp Blog</span>をよろしくお願いします！ <span class="ascii">hask(_ _)eller  </span> なお、現在<span class="ascii">Haskell-jp Blog</span>では、<a href="https://qiita.com/advent-calendar/2017/haskell"><span class="ascii">Haskell Advent Calendar 2017</span></a>（と<a href="https://qiita.com/advent-calendar/2017/haskell2">その<span class="ascii">2</span></a>、<a href="https://qiita.com/advent-calendar/2017/haskell3">その<span class="ascii">3</span></a>）の記事を特に精力的に募集しています。 <span class="ascii"> </span> ぜひこの機会に<span class="ascii">Haskell-jp Blog</span>に記事を投稿してみませんか？</p>
            </div>
        </div>
        <div id="post-navigation" class="row" style="margin-top: 20px;">
            <div class="col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4">
                
                <i class="glyphicon glyphicon-chevron-left" aria-hidden="true" style="margin-right: 5px;"></i>
                <a href="/posts/2017/typesafe-precure2.html">タイプセーフプリキュア！を支える技術 その2</a>
                
            </div>
            <div class="col-lg-2 col-md-2 col-xs-4 text-center">
                <a href="/">トップに戻る</a>
            </div>
            <div class="col-lg-3 col-md-4 col-xs-4">
                
                <a href="/posts/2017/13-about-kind-system-part2.html" style="margin-left: auto;">Haskellの種(kind)について (Part 2)</a>
                <i class="glyphicon glyphicon-chevron-right" aria-hidden="true" style="margin-left: 5px;"></i>
                
            </div>
        </div>
    </div>
</article>

]]></summary>
</entry>

</feed>
